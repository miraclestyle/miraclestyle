{"ts":1378921097340,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1378921185716,"patch":[[{"diffs":[[1,"#coding=UTF-8\n\n#MASTER MODEL FILE\n\n# NAPOMENA!!! - Sve mapirane informacije koje se snimaju u datastore trebaju biti hardcoded, tj. u samom aplikativnom codu a ne u settings.py\n# u settings.py se cuvaju one informacije koje se ne cuvaju u datastore i koje se ne koriste u izgradnji datastore recorda...\n\n# pitanje je da li ce nam trebati composite indexi za query-je poput:\n# BuyerAddress.query(ancestor=key).order(BuyerAddress.name) ili AggregateUserPermission.query(AggregateUserPermission.reference == key, ancestor=key)\n# ali je highly unlikely, zato sto se ancestor ne mora ukljucivati u slucajevima composite indexa\n# odgovor na gore postavljeno pitanje se mozda moze pronaci na: \n# https://developers.google.com/appengine/docs/python/datastore/indexes#Python_Index_configuration\n# https://github.com/GoogleCloudPlatform/appengine-guestbook-python\n# za sada smo resili osnovne query-je sa composite indexima koji podrazumevaju ancestor filtere,\n# pa mozemo kasnije tokom razvoja funkcionalne logike to dalje unaprediti.\n\n# datastore ne podrzava LIKE statement kao sto to podrzavaju struktuirane baze, umesto LIKE se moze korititi index range scan, kao napr:\n# SELECT * FROM Country WHERE name >= 'B' AND name < 'C' ORDER BY name\n# mnogi modeli koji ce imati opciju pretraga po osnovu user custom entry-ja ce koristiti ovaj mehanizam,\n# i na njima se moraju pripremiti indexi za ove funkcije.\n\n# treba se ispitati \"_default_indexed = False\" za Expando modele\n\n# problem 1 write per sec unutar transakcija kojie se commitaju na jednu entity grupu se treba normalizovati.\n# ovaj problem se odnosi na broj write operacija koje se mogu odvijati na istoj entity grupi.\n# jedan primer gde ovaj problem moze postojati je u slucaju AggregateBuyerCollectionCatalog!!\n\n# detalji oko modeliranja podataka i skaliranja su prezentirani na dole navedenim linkovima\n# https://developers.google.com/appengine/articles/datastore/overview\n# https://developers.google.com/appengine/articles/scaling/overview\n\n# skontati idempotency modela koji ce ucestvovati u transakcijama (ovo je najbolje uraditi u fazi razvoja funkcionalne logike)\n# idempotency se odnosi na sve modele, i treba nastojati uciniti sve transakcije idempotent-ne, u najmanju ruku, kada je to moguce!\n\n'''\nOvo su zabranjena imena propertija:\n\nall\napp\ncopy\ndelete\nentity\nentity_type\nfields\nfrom_entity\nget\ngql\ninstance_properties\nis_saved\nkey\nkey_name\nkind\nparent\nparent_key\nproperties\nput\nsetdefault\nto_xml\nupdate\n'''\n\nfrom google.appengine.ext import blobstore\nfrom google.appengine.ext import ndb\nfrom decimal import *\n\n\nclass DecimalProperty(ndb.StringProperty):\n  def _validate(self, value):\n    if not isinstance(value, (decimal.Decimal)):\n      raise TypeError('expected an decimal, got %s' % repr(value))\n\n  def _to_base_type(self, value):\n    return str(value) # Doesn't matter if it's a decimal or string\n\n  def _from_base_type(self, value):\n    return decimal.Decimal(value)  # Always return a decimal\n\n################################################################################\n# User - \n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":10353}]],"length":10353,"saved":false}
{"ts":1378921455158,"patch":[[{"diffs":[[0,"False)\n\n"],[-1,"\n"],[1,"################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n################################################################################\n# DOMAIN - \n################################################################################\n\n# done!\nclass Domain(ndb.Expando):\n    \n    # root\n    # composite index: ancestor:no - state,name\n    name = ndb.StringProperty('1', required=True)\n    primary_contact = ndb.KeyProperty('2', kind=User, required=True, indexed=False)\n    state = ndb.IntegerProperty('3', required=True)\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 3\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n        'terminated' : (3, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'suspend' : 3,\n       'terminate' : 4,\n       'activate_suspended' : 5,\n       'activate_terminated' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate_suspended' : {\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n         'activate_terminated' : {\n            'from' : ('terminated',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n        'terminate' : {\n           'from' : ('active', 'suspended'),\n           'to'   : ('terminated',),\n        },\n    }\n    \n    # *** mozda treba zameniti dozvole za upravljanje domenom sa jednom dozvolom 'manage-Domain' ili tome slicno!\n    \n    # Ova akcija kreira novu domenu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        domain = Domain(name='deskriptivno ime po zelji kreatora', primary_contact=user_key, state='active')\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=user_key, action='create', state=domain.state, log=domain)\n        object_log.put()\n        role = Role(parent=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        #object_log = ObjectLog(parent=role_user_key, agent=user_key, action='accept', state=role_user.state, log=role_user)\n        #object_log.put()\n        sub_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        sub_role.put()\n    \n    # Ova akcija azurira postojecu domenu.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.name = 'promenjeno ime od strane administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='update', state=domain.state, log=domain)\n        object_log.put()\n    \n    # Ova akcija suspenduje aktivnu domenu. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'suspend-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.state = 'suspended'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='suspend', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija terminira aktivnu ili suspendovanu domenu. Ovde cemo dalje opisati posledice terminacije\n    @ndb.transactional\n    def terminate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'terminate-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' ili domain.state == 'suspended'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'terminate-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'terminated'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='terminate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira suspendovanu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_suspended():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'activate_suspended-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'suspended'.\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_suspended', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira terminiranu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_terminated():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate_terminated-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'terminated'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'activate_terminated-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_terminated', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass Role(ndb.Model):\n    \n    # root (namespace Domain/'MIRACLESTYLE')\n    # Role permissions affect Domain and it's related entities, with exception to Roles in 'MIRACLESTYLE' namespace.\n    # Roles in 'MIRACLESTYLE' namespace globally affect Miraclestyle Application and all of it's related entities.\n    # ancestor User (for caching/optimization purposes) - Role(namespace=domain_key, parent=user_key, id=str(role_key.id()), ....)\n    # TREBA TESTIRATI DA LI RADE QUERY: Role.query(namespace=..., ancestor=..., id=....)\n    # mozda bude trebalo jos indexa u zavistnosti od potreba u UIUX\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    permissions = ndb.StringProperty('2', repeated=True, indexed=False)# soft limit 1000x - action-Model - create-Store\n    readonly = ndb.BooleanProperty('3', default=True, indexed=False)\n    \n    _KIND = 6\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Role'. \n        # u slucaju kreiranja Role u 'MIRACLESTYLE' domeni, agent mora biti Application Admin (users.is_current_user_admin()).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        # domena 'MIRACLESTYLE' je uvek evaluated 'active'\n        role = Role(namespace=domain_key, name='Store Managers', permissions=['create_store', 'update_store',], readonly=False) # readonly je uvek False za user generated Roles\n        role_key = role.put()\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='create', state='none', log=role)\n        object_log.put()\n    \n    # Azurira postojecu rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def update():\n        # (u slucaju da agent treba azurirati globalne Role imacemo problem posto bi globalna dozvola 'update-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'update-Role').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Role'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role.name = 'New Store Managers'\n        role.permissions = ['create_store',]\n        role_key = role.put()\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='update', state='none', log=role)\n        object_log.put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        # ovo uraditi sa taskletima za async operacije\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            sub_role = key.get()\n            sub_role.name = role.name\n            sub_role.permissions = role.permissions\n            sub_role.put()\n    \n    # Brise postojecu rolu domene, ili globalnu rolu.\n    @ndb.transactional\n    def delete():\n        # (u slucaju da agent treba brisati globalne Role imacemo problem posto bi globalna dozvola 'delete-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'delete-Role').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Role'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        roles = []\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            roles.append(key)\n        ndb.delete_multi(roles)\n        ndb.delete_multi(role_users)\n        role_key.delete()\n\n# done!\nclass RoleUser(ndb.Model):\n    \n    # ancestor Role\n    # id = str(user_key.id())\n    # mozda bude trebalo jos indexa u zavistnosti od potreba u UIUX\n    # composite index: ancestor:yes - user\n    user = ndb.KeyProperty('1', kind=User, required=True)\n    state = ndb.IntegerProperty('2', required=True)# invited/accepted\n    \n    _KIND = 7\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'invited' : (1, ),\n        'accepted' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'invite' : 1,\n       'remove' : 2,\n       'accept' : 3,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'accept' : {\n            'from' : ('invited',),\n            'to' : ('accepted',),\n        },\n    }\n    \n    # Poziva novog usera u rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def invite():\n        # (u slucaju da se user treba invite na globalnu Rolu imacemo problem posto bi globalna dozvola 'invite-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'invite').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'invite-RoleUser'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role_user = RoleUser(parent=role_key, user='123673472829', state='invited')\n        role_user_key = role_user.put()\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='invite', state=role_user.state, log=role_user)\n        object_log.put()\n        # salje se notifikacija korisniku da je dobio poziv za dodavanje u Rolu.\n    \n    # Uklanja postojeceg usera iz role domene, ili globalne role.\n    @ndb.transactional\n    def remove():\n        # (u slucaju da se user treba remove sa globalne Role imacemo problem posto bi globalna dozvola 'remove-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'remove').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'remove-RoleUser', ili agent koji je referenciran u entitetu (role_user.user == agent).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='remove', state=role_user.state)\n        object_log.put()\n        role_user_key.delete()\n        key = ndb.Key(namespace=domain_key, parent=role_user.user, str(role_key.id()))\n        # ovaj delete ce fail ukoliko nije napravljen entitet sa tim kljucem, napr: ako je role_user.state == 'invited'\n        key.delete()\n    \n    # Prihvata poziv novog usera u rolu (lokalne ili globalne - \"MIRACLESTYLE\") domene\n    @ndb.transactional\n    def accept():\n        # ovu akciju moze izvrsiti samo agent koji je referenciran u entitetu (role_user.user == agent).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role_user.state = 'accepted'\n        role_user_key = role_user.put()\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='accept', role_user.state)\n        object_log.put()\n        sub_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='~', permissions=['~',], readonly='True/False')\n        sub_role.put()\n\n# future implementation - prototype!\nclass Rule(ndb.Model):\n    \n    # root\n    name = ndb.StringProperty('1', required=True)\n    model_kind = ndb.StringProperty('2', required=True)\n    actions = ndb.StringProperty('3', repeated=True)\n    fields = ndb.LocalStructuredProperty(Field, '4', repeated=True)\n    condition = ndb.TextProperty('5')\n    roles = ndb.KeyProperty('6', kind=Role, repeated=True)\n\n# future implementation - prototype!\nclass Field(ndb.Model):\n    \n    # LocalStructuredProperty model\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    writable = ndb.BooleanProperty('2', default=True, indexed=False)\n    visible = ndb.BooleanProperty('3', default=True, indexed=False)"],[0,"\n\n\n\n\n\n\n\n"]],"start1":10333,"start2":10333,"length1":17,"length2":34320}]],"length":44656,"saved":false}
{"ts":1378921597485,"patch":[[{"diffs":[[0,"False)\n\n"],[-1,"\n"],[1,"# done!\nclass Store(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - state,name\n    name = ndb.StringProperty('1', required=True)\n    logo = blobstore.BlobKeyProperty('2', required=True)# blob ce se implementirati na GCS\n    state = ndb.IntegerProperty('3', required=True)\n    _default_indexed = False\n    pass\n    #Expando\n    #\n    # Company\n    # company_name = ndb.StringProperty('4', required=True)\n    # company_country = ndb.KeyProperty('5', kind=Country, required=True)\n    # company_region = ndb.KeyProperty('6', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # company_region = ndb.StringProperty('6', required=True)# ako je potreban key val onda se ovo preskace\n    # company_city = ndb.StringProperty('7', required=True)\n    # company_postal_code = ndb.StringProperty('8', required=True)\n    # company_street_address = ndb.StringProperty('9', required=True)\n    # company_street_address2 = ndb.StringProperty('10')\n    # company_email = ndb.StringProperty('11')\n    # company_telephone = ndb.StringProperty('12')\n    #\n    # Payment\n    # currency = ndb.KeyProperty('13', kind=Currency, required=True)\n    # tax_buyer_on ?\n    # paypal_email = ndb.StringProperty('14')\n    # paypal_shipping ?\n    #\n    # Analytics \n    # tracking_id = ndb.StringProperty('15')\n    #\n    # Feedback\n    # feedbacks = ndb.LocalStructuredProperty(StoreFeedback, '16', repeated=True)# soft limit 120x\n\n# done!\nclass StoreFeedback(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # ovaj model dozvoljava da se radi feedback trending per month per year\n    # mozda bi se mogla povecati granulacija per week, tako da imamo oko 52 instance per year, ali mislim da je to nepotrebno!\n    # ovde treba voditi racuna u scenarijima kao sto je napr. promena feedback-a iz negative u positive state,\n    # tako da se za taj record uradi negative_feedback_count - 1 i positive_feedback_count + 1\n    month = ndb.IntegerProperty('1', required=True, indexed=False)\n    year = ndb.IntegerProperty('2', required=True, indexed=False)\n    positive_feedback_count = ndb.IntegerProperty('3', required=True, indexed=False)\n    negative_feedback_count = ndb.IntegerProperty('4', required=True, indexed=False)\n    neutral_feedback_count = ndb.IntegerProperty('5', required=True, indexed=False)\n\n# done!\nclass StoreContent(ndb.Model):\n    \n    # ancestor Store (Catalog - for caching)\n    # composite index: ancestor:yes - sequence\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n    sequence = ndb.IntegerProperty('3', required=True)\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x\n\n# done!\nclass Carrier(ndb.Model):\n    \n    # root (namespace Domain)\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L27\n    # http://hg.tryton.org/modules/carrier/file/tip/carrier.py#l10\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    active = ndb.BooleanProperty('2', default=True)\n\n# done!\nclass CarrierLine(ndb.Expando):\n    \n    # ancestor Carrier\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L170\n    # composite index: ancestor:yes - sequence; ancestor:yes - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    location_exclusion = ndb.BooleanProperty('3', default=False, indexed=False)\n    active = ndb.BooleanProperty('4', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '5', repeated=True)# soft limit 300x\n    # rules = ndb.LocalStructuredProperty(CarrierLineRule, '6', repeated=True)# soft limit 300x\n\n# done!\nclass CarrierLineRule(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L226\n    # ovde se cuvaju dve vrednosti koje su obicno struktuirane kao formule, ovo je mnogo fleksibilnije nego hardcoded struktura informacija koje se cuva kao sto je bio prethodni slucaj\n    condition = ndb.StringProperty('1', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: True ili weight[kg] >= 5 ili volume[m3] = 0.002\n    price = ndb.StringProperty('2', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: amount = 35.99 ili amount = weight[kg]*0.28\n    # weight - kg; volume - m3; ili sta vec odlucimo, samo je bitno da se podudara sa measurementsima na ProductTemplate/ProductInstance\n\n# done!\nclass Catalog(ndb.Expando):\n    \n    # root (namespace Domain)\n    # https://support.google.com/merchants/answer/188494?hl=en&hlrm=en#other\n    # composite index: ???\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    name = ndb.StringProperty('2', required=True)\n    publish = ndb.DateTimeProperty('3', required=True)# today\n    discontinue = ndb.DateTimeProperty('4', required=True)# +30 days\n    cover = blobstore.BlobKeyProperty('5', required=True)# blob ce se implementirati na GCS\n    cost = DecimalProperty('6', required=True, indexed=False)\n    state = ndb.IntegerProperty('7', required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # Search improvements\n    # product count per product category\n    # rank coefficient based on store feedback\n\n# done!\nclass CatalogImage(Image):\n    \n    # ancestor Catalog\n    # composite index: ancestor:yes - sequence\n\n# done!\nclass CatalogPricetag(ndb.Model):\n    \n    # ancestor Catalog\n    product_template = ndb.KeyProperty('1', kind=ProductTemplate, required=True, indexed=False)\n    container_image = blobstore.BlobKeyProperty('2', required=True, indexed=False)# blob ce se implementirati na GCS\n    source_width = ndb.FloatProperty('3', required=True, indexed=False)\n    source_height = ndb.FloatProperty('4', required=True, indexed=False)\n    source_position_top = ndb.FloatProperty('5', required=True, indexed=False)\n    source_position_left = ndb.FloatProperty('6', required=True, indexed=False)\n    value = ndb.StringProperty('7', required=True, indexed=False)# $ 19.99 - ovo se handla unutar transakcije kada se radi update na unit_price od ProductTemplate ili ProductInstance\n\n# done!\nclass ProductTemplate(ndb.Expando):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - name\n    product_category = ndb.KeyProperty('1', kind=ProductCategory, required=True, indexed=False)\n    name = ndb.StringProperty('2', required=True)\n    description = ndb.TextProperty('3', required=True)# soft limit 64kb\n    product_uom = ndb.KeyProperty('4', kind=ProductUOM, required=True, indexed=False)\n    unit_price = DecimalProperty('5', required=True)\n    state = ndb.IntegerProperty('6', required=True, indexed=False)\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando\n    # mozda treba uvesti customer lead time??\n    # product_template_variants = ndb.KeyProperty('7', kind=ProductVariant, repeated=True)# soft limit 100x\n    # product_template_contents = ndb.KeyProperty('8', kind=ProductContent, repeated=True)# soft limit 100x\n    # product_template_images = ndb.LocalStructuredProperty(Image, '9', repeated=True)# soft limit 100x\n    # weight = ndb.StringProperty('10')# prekompajlirana vrednost, napr: 0.2[kg] - gde je [kg] jediniva mere, ili sta vec odlucimo\n    # volume = ndb.StringProperty('11')# prekompajlirana vrednost, napr: 0.03[m3] - gde je [m3] jediniva mere, ili sta vec odlucimo\n\n# done!\nclass ProductInstance(ndb.Expando):\n    \n    # ancestor ProductTemplate\n    #variant_signature se gradi na osnovu ProductVariant entiteta vezanih za ProductTemplate-a (od aktuelne ProductInstance) preko ProductTemplateVariant \n    #key name ce se graditi tako sto se uradi MD5 na variant_signature\n    #query ce se graditi tako sto se prvo izgradi variant_signature vrednost na osnovu odabira od strane krajnjeg korisnika a potom se ta vrednost hesira u MD5 i koristi kao key identifier\n    #mana ove metode je ta sto se uvek mora izgraditi kompletan variant_signature, tj moraju se sve varijacije odabrati (svaka varianta mora biti mandatory_variant_type)\n    #default vrednost code ce se graditi na osnovu sledecih informacija: ancestorkey-n, gde je n incremental integer koji se dodeljuje instanci prilikom njenog kreiranja\n    #ukoliko user ne odabere multivariant opciju onda se za ProductTemplate generise samo jedna ProductInstance i njen key se gradi automatski.\n    # composite index: ancestor:yes - code\n    code = ndb.StringProperty('1', required=True)\n    state = ndb.IntegerProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando\n    # description = ndb.TextProperty('3', required=True)# soft limit 64kb\n    # unit_price = DecimalProperty('4', required=True)\n    # product_instance_contents = ndb.KeyProperty('5', kind=ProductContent, repeated=True)# soft limit 100x\n    # product_instance_images = ndb.LocalStructuredProperty(Image, '6', repeated=True)# soft limit 100x\n    # low_stock_quantity = DecimalProperty('7', default=0.00)# notify store manager when qty drops below X quantity\n    # weight = ndb.StringProperty('8')# prekompajlirana vrednost, napr: 0.2[kg] - gde je [kg] jediniva mere, ili sta vec odlucimo\n    # volume = ndb.StringProperty('9')# prekompajlirana vrednost, napr: 0.03[m3] - gde je [m3] jediniva mere, ili sta vec odlucimo\n    # variant_signature = ndb.TextProperty('10', required=True)# soft limit 64kb - ova vrednost kao i vrednosti koje kupac manuelno upise kao opcije variante se prepisuju u order line description prilikom Add to Cart\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass ProductInventoryLog(ndb.Model):\n    \n    # ancestor ProductInstance\n    # not logged\n    # composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)# idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan \n    quantity = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass ProductInventoryAdjustment(ndb.Model):\n    \n    # ancestor ProductInstance\n    # not logged\n    adjusted = ndb.DateTimeProperty('1', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('2', kind=User, required=True, indexed=False)\n    quantity = DecimalProperty('3', required=True, indexed=False, indexed=False)\n    comment = ndb.StringProperty('4', required=True, indexed=False)\n\n# done!\nclass ProductVariant(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # http://v6apps.openerp.com/addon/1809\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    description = ndb.TextProperty('2')# soft limit 64kb\n    options = ndb.StringProperty('3', repeated=True, indexed=False)# soft limit 1000x\n    allow_custom_value = ndb.BooleanProperty('4', default=False, indexed=False)# ovu vrednost buyer upisuje u definisano polje a ona se dalje prepisuje u order line description prilikom Add to Cart \n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)"],[0,"\n\n\n\n\n\n\n\n"]],"start1":44639,"start2":44639,"length1":17,"length2":13570}]],"length":58209,"saved":false}
{"ts":1378921649192,"patch":[[{"diffs":[[0,"d=True)\n\n\n\n\n"],[1,"################################################################################\n# TRADE - 11\n################################################################################\n\n# done!\nclass Order(ndb.Expando):\n    \n    # ancestor User (namespace Domain)\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l28\n    # http://hg.tryton.org/modules/purchase/file/tip/purchase.py#l32\n    # http://doc.tryton.org/2.8/modules/sale/doc/index.html\n    # http://doc.tryton.org/2.8/modules/purchase/doc/index.html\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L48\n    # buyer = ndb.KeyProperty('1', kind=User, required=True)\n    # composite index: \n    # ancestor:no - store,state,updated:desc; ancestor:no - store,state,order_date:desc\n    # ancestor:no - state,updated:desc; ancestor:no - state,order_date:desc\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,order_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    order_date = ndb.DateTimeProperty('2', auto_now_add=True, required=True)# updated on checkout\n    currency = ndb.LocalStructuredProperty(OrderCurrency, '3', required=True)\n    untaxed_amount = DecimalProperty('4', required=True, indexed=False)\n    tax_amount = DecimalProperty('5', required=True, indexed=False)\n    total_amount = DecimalProperty('6', required=True)\n    state = ndb.IntegerProperty('7', required=True) \n    updated = ndb.DateTimeProperty('8', auto_now=True, required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # company_address = ndb.LocalStructuredProperty(OrderAddress, '9', required=True)\n    # billing_address = ndb.LocalStructuredProperty(OrderAddress, '10', required=True)\n    # shipping_address = ndb.LocalStructuredProperty(OrderAddress, '11', required=True)\n    # reference = ndb.StringProperty('12', required=True)\n    # comment = ndb.TextProperty('13')# 64kb limit\n    # company_address_reference = ndb.KeyProperty('14', kind=Store, required=True)\n    # billing_address_reference = ndb.KeyProperty('15', kind=BuyerAddress, required=True)\n    # shipping_address_reference = ndb.KeyProperty('16', kind=BuyerAddress, required=True)\n    # carrier_reference = ndb.KeyProperty('17', kind=StoreCarrier, required=True)\n    # feedback = ndb.IntegerProperty('18', required=True)\n    # store_name = ndb.StringProperty('19', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n    # store_logo = blobstore.BlobKeyProperty('20', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n\n# done!\nclass OrderFeedback(ndb.Model):\n    \n    # ancestor Order\n    state = ndb.IntegerProperty('1', required=True, indexed=False)\n\n# done!\nclass BillingOrder(ndb.Expando):\n    \n    # root (namespace Domain)\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l28\n    # http://hg.tryton.org/modules/purchase/file/tip/purchase.py#l32\n    # http://doc.tryton.org/2.8/modules/sale/doc/index.html\n    # http://doc.tryton.org/2.8/modules/purchase/doc/index.html\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L48\n    order_date = ndb.DateTimeProperty('1', auto_now_add=True, required=True, indexed=False)# updated on checkout\n    currency = ndb.LocalStructuredProperty(OrderCurrency, '2', required=True)\n    untaxed_amount = DecimalProperty('3', required=True, indexed=False)\n    tax_amount = DecimalProperty('4', required=True, indexed=False)\n    total_amount = DecimalProperty('5', required=True, indexed=False)\n    state = ndb.IntegerProperty('6', required=True, indexed=False) \n    updated = ndb.DateTimeProperty('7', auto_now=True, required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # company_address = ndb.LocalStructuredProperty(OrderAddress, '8', required=True)\n    # billing_address = ndb.LocalStructuredProperty(OrderAddress, '9', required=True)\n    # shipping_address = ndb.LocalStructuredProperty(OrderAddress, '10', required=True)\n    # reference = ndb.StringProperty('11', required=True)\n    # comment = ndb.TextProperty('12')# 64kb limit\n\n# done!\nclass OrderAddress(ndb.Expando):\n    \n    # LocalStructuredProperty model\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    country = ndb.StringProperty('2', required=True, indexed=False)\n    country_code = ndb.StringProperty('3', required=True, indexed=False)\n    region = ndb.StringProperty('4', required=True, indexed=False)\n    region_code = ndb.StringProperty('5', required=True, indexed=False)\n    city = ndb.StringProperty('6', required=True, indexed=False)\n    postal_code = ndb.StringProperty('7', required=True, indexed=False)\n    street_address = ndb.StringProperty('8', required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n\n# done!\nclass OrderCurrency(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/currency/file/tip/currency.py#l14\n    # http://en.wikipedia.org/wiki/ISO_4217\n    # http://hg.tryton.org/modules/currency/file/tip/currency.xml#l107\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_currency.py#L32\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)\n    code = ndb.StringProperty('3', required=True, indexed=False)\n    numeric_code = ndb.StringProperty('4', indexed=False)\n    rounding = DecimalProperty('5', required=True, indexed=False)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    #formating\n    grouping = ndb.StringProperty('7', required=True, indexed=False)\n    decimal_separator = ndb.StringProperty('8', required=True, indexed=False)\n    thousands_separator = ndb.StringProperty('9', indexed=False)\n    positive_sign_position = ndb.IntegerProperty('10', required=True, indexed=False)\n    negative_sign_position = ndb.IntegerProperty('11', required=True, indexed=False)\n    positive_sign = ndb.StringProperty('12', indexed=False)\n    negative_sign = ndb.StringProperty('13', indexed=False)\n    positive_currency_symbol_precedes = ndb.BooleanProperty('14', default=True, indexed=False)\n    negative_currency_symbol_precedes = ndb.BooleanProperty('15', default=True, indexed=False)\n    positive_separate_by_space = ndb.BooleanProperty('16', default=True, indexed=False)\n    negative_separate_by_space = ndb.BooleanProperty('17', default=True, indexed=False)\n\n# done!\nclass OrderLine(ndb.Expando):\n    \n    # ancestor Order, BillingOrder\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l888\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L649\n    # composite index: ancestor:yes - sequence\n    description = ndb.TextProperty('1', required=True)# soft limit 64kb\n    quantity = DecimalProperty('2', required=True, indexed=False)\n    product_uom = ndb.LocalStructuredProperty(OrderLineProductUOM, '3', required=True)\n    unit_price = DecimalProperty('4', required=True, indexed=False)\n    discount = DecimalProperty('5', default=0.00, indexed=False)\n    sequence = ndb.IntegerProperty('6', required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # taxes = ndb.LocalStructuredProperty(OrderLineTax, '7', repeated=True)# soft limit 500x\n    # product_category_complete_name = ndb.TextProperty('8', required=True)# soft limit 64kb\n    # product_category = ndb.KeyProperty('9', kind=ProductCategory, required=True)\n    # catalog_pricetag_reference = ndb.KeyProperty('10', kind=CatalogPricetag, required=True)\n    # product_instance_reference = ndb.KeyProperty('11', kind=ProductInstance, required=True)\n    # tax_references = ndb.KeyProperty('12', kind=StoreTax, repeated=True)# soft limit 500x\n\n# done!\nclass OrderLineProductUOM(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l28\n    # http://hg.tryton.org/modules/product/file/tip/uom.xml#l63 - http://hg.tryton.org/modules/product/file/tip/uom.xml#l312\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L89\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)\n    category = ndb.StringProperty('3', required=True, indexed=False)# ProductUOMCategory.name\n    rounding = DecimalProperty('4', required=True, indexed=False)\n    digits = ndb.IntegerProperty('5', required=True, indexed=False)\n\n# done!\nclass OrderLineTax(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/account/file/tip/tax.py#l545\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    amount = ndb.StringProperty('2', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n\n# done!\nclass PayPalTransaction(ndb.Model):\n    \n    # ancestor Order, BillingOrder\n    # not logged\n    # ako budemo radili analizu sa pojedinacnih ordera onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    txn_id = ndb.StringProperty('2', required=True)\n    ipn_message = ndb.TextProperty('3', required=True)\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass BillingLog(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)# idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n    amount = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass BillingCreditAdjustment(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    adjusted = ndb.DateTimeProperty('2', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('3', kind=User, required=True, indexed=False)\n    amount = DecimalProperty('4', required=True, indexed=False)\n    message = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    note = ndb.TextProperty('6')# soft limit 64kb - to determine char count"],[0,"\n\n\n"]],"start1":58194,"start2":58194,"length1":15,"length2":10559}]],"length":68753,"saved":false}
{"ts":1378921718028,"patch":[[{"diffs":[[0,"=True)\n\n"],[-1,"\n\n\n"],[0,"########"]],"start1":58195,"start2":58195,"length1":19,"length2":16},{"diffs":[[0," count\n\n"],[1,"################################################################################\n# OBJECT LOG - 1\n################################################################################\n\n# done!\nclass ObjectLog(ndb.Expando):\n    \n    # ancestor Any - ancestor je objekat koji se ujedno i pickle u log property, i moze biti bilo koji objekat osim pojedinih objekata koji su independent\n    # reference i type izvlacimo iz kljuca - key.parent()\n    # composite index: ???\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    agent = ndb.KeyProperty('2', kind=User, required=True)\n    action = ndb.IntegerProperty('3', required=True)\n    state = ndb.IntegerProperty('4', required=True)\n    _default_indexed = False\n    pass\n    # message / m = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    # note / n = ndb.TextProperty('6')# soft limit 64kb - to determine char count\n    # log / l = ndb.PickleProperty('7')\n    \n    # ovako se smanjuje storage u Datastore, i trebalo bi sprovesti to isto na sve modele\n    @classmethod\n    def _get_kind(cls):\n      return datastore_key_kinds.ObjectLog"],[0,"\n"]],"start1":68741,"start2":68741,"length1":9,"length2":1132}]],"length":69873,"saved":false}
{"ts":1378921976286,"patch":[[{"diffs":[[0," count\n\n"],[1,"################################################################################\n# MISC - 12\n################################################################################\n\n# done!\nclass Content(ndb.Model):\n    \n    # root\n    # composite index: ancestor:no - category,state,sequence\n    updated = ndb.DateTimeProperty('1', auto_now=True, required=True)\n    title = ndb.StringProperty('2', required=True)\n    category = ndb.IntegerProperty('3', required=True)\n    body = ndb.TextProperty('4', required=True)\n    sequence = ndb.IntegerProperty('5', required=True)\n    state = ndb.IntegerProperty('6', required=True)# published/unpublished\n\n# done!\nclass Image(ndb.Model):\n    \n    # base class/structured class\n    image = blobstore.BlobKeyProperty('1', required=True, indexed=False)# blob ce se implementirati na GCS\n    content_type = ndb.StringProperty('2', required=True, indexed=False)\n    size = ndb.FloatProperty('3', required=True, indexed=False)\n    width = ndb.IntegerProperty('4', required=True, indexed=False)\n    height = ndb.IntegerProperty('5', required=True, indexed=False)\n    sequence = ndb.IntegerProperty('6', required=True)\n\n# done!\nclass Country(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/country/file/tip/country.py#l8\n    # http://en.wikipedia.org/wiki/ISO_3166\n    # http://hg.tryton.org/modules/country/file/tip/country.xml\n    # http://downloads.tryton.org/2.8/trytond_country-2.8.0.tar.gz\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L42\n    # composite index: ancestor:no - active,name\n    code = ndb.StringProperty('1', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    name = ndb.StringProperty('2', required=True)\n    active = ndb.BooleanProperty('3', default=True)\n\n# done!\nclass CountrySubdivision(ndb.Model):\n    \n    # ancestor Country\n    # http://hg.tryton.org/modules/country/file/tip/country.py#l52\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L86\n    # koliko cemo drilldown u ovoj strukturi zavisi od kasnijih odluka u vezi povezivanja lokativnih informacija sa informacijama ovog modela..\n    # composite index: ancestor:yes - name; ancestor:yes - active,name\n    parent_record = ndb.KeyProperty('1', kind=CountrySubdivision, indexed=False)\n    code = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    name = ndb.StringProperty('3', required=True)\n    type = ndb.IntegerProperty('4', required=True, indexed=False)\n    active = ndb.BooleanProperty('5', default=True)\n\n# done!\nclass Location(ndb.Expando):\n    \n    # base class/structured class\n    country = ndb.KeyProperty('1', kind=Country, required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # region = ndb.KeyProperty('2', kind=CountrySubdivision)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('2')# ako je potreban key val onda se ovo preksace\n    # postal_code_from = ndb.StringProperty('3')\n    # postal_code_to = ndb.StringProperty('4')\n    # city = ndb.StringProperty('5')# ako se javi potreba za ovim ??\n\n# done!\nclass ProductCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/category.py#l8\n    # https://support.google.com/merchants/answer/1705911\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L227\n    # composite index: ancestor:no - state,name\n    parent_record = ndb.KeyProperty('1', kind=ProductCategory, indexed=False)\n    name = ndb.StringProperty('2', required=True)\n    complete_name = ndb.TextProperty('3', required=True)# da je ovo indexable bilo bi idealno za projection query\n    state = ndb.IntegerProperty('4', required=True)\n\n# done!\nclass ProductUOMCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l16\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L81\n    # mozda da ovi entiteti budu non-deletable i non-editable ??\n    name = ndb.StringProperty('1', required=True)\n\n# done!\nclass ProductUOM(ndb.Model):\n    \n    # ancestor ProductUOMCategory\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l28\n    # http://hg.tryton.org/modules/product/file/tip/uom.xml#l63 - http://hg.tryton.org/modules/product/file/tip/uom.xml#l312\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L89\n    # mozda da ovi entiteti budu non-deletable i non-editable ??\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    rate = DecimalProperty('3', required=True, indexed=False)# The coefficient for the formula: 1 (base unit) = coef (this unit) - digits=(12, 12)\n    factor = DecimalProperty('4', required=True, indexed=False)# The coefficient for the formula: coef (base unit) = 1 (this unit) - digits=(12, 12)\n    rounding = DecimalProperty('5', required=True, indexed=False)# Rounding Precision - digits=(12, 12)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    active = ndb.BooleanProperty('7', default=True)\n\n# done!\nclass Currency(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/currency/file/tip/currency.py#l14\n    # http://en.wikipedia.org/wiki/ISO_4217\n    # http://hg.tryton.org/modules/currency/file/tip/currency.xml#l107\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_currency.py#L32\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    code = ndb.StringProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    numeric_code = ndb.StringProperty('4', indexed=False)\n    rounding = DecimalProperty('5', required=True, indexed=False)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    active = ndb.BooleanProperty('7', default=True)\n    #formating\n    grouping = ndb.StringProperty('8', required=True, indexed=False)\n    decimal_separator = ndb.StringProperty('9', required=True, indexed=False)\n    thousands_separator = ndb.StringProperty('10', indexed=False)\n    positive_sign_position = ndb.IntegerProperty('11', required=True, indexed=False)\n    negative_sign_position = ndb.IntegerProperty('12', required=True, indexed=False)\n    positive_sign = ndb.StringProperty('13', indexed=False)\n    negative_sign = ndb.StringProperty('14', indexed=False)\n    positive_currency_symbol_precedes = ndb.BooleanProperty('15', default=True, indexed=False)\n    negative_currency_symbol_precedes = ndb.BooleanProperty('16', default=True, indexed=False)\n    positive_separate_by_space = ndb.BooleanProperty('17', default=True, indexed=False)\n    negative_separate_by_space = ndb.BooleanProperty('18', default=True, indexed=False)\n\n# done!\n# ostaje da se ispita u preprodukciji!!\nclass Message(ndb.Model):\n    \n    # root\n    outlet = ndb.IntegerProperty('1', required=True, indexed=False)\n    group = ndb.IntegerProperty('2', required=True, indexed=False)\n    state = ndb.IntegerProperty('3', required=True)\n\n"],[0,"########"]],"start1":68741,"start2":68741,"length1":16,"length2":7486}]],"length":77343,"saved":false}
{"ts":1378922020131,"patch":[[{"diffs":[[0,"MISC - 1"],[-1,"2"],[1,"0"],[0,"\n#######"]],"start1":68832,"start2":68832,"length1":17,"length2":17}]],"length":77343,"saved":false}
{"ts":1378922071913,"patch":[[{"diffs":[[0,"OMAIN - "],[1,"20"],[0,"\n#######"]],"start1":29382,"start2":29382,"length1":16,"length2":18}]],"length":77345,"saved":false}
{"ts":1378922082655,"patch":[[{"diffs":[[0," User - "],[1,"3"],[0,"\n#######"]],"start1":3048,"start2":3048,"length1":16,"length2":17}]],"length":77346,"saved":false}
{"ts":1378922793336,"patch":[[{"diffs":[[0,"al\n\n"],[-1,"################################################################################\n# User - 3\n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n"],[0,"####"]],"start1":2962,"start2":2962,"length1":26341,"length2":8},{"diffs":[[0,"required=True)\n\n"],[1,"################################################################################\n# User - 3\n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n"],[0,"################"]],"start1":31857,"start2":31857,"length1":32,"length2":26365}]],"length":77346,"saved":false}
{"ts":1378922956999,"patch":[[{"diffs":[[0," ),\n"],[-1,"        'terminated' : (3, ),\n"],[0,"    }\n"],[1,""],[0,"    "]],"start1":4037,"start2":4037,"length1":44,"length2":14},{"diffs":[[0,"   '"],[-1,"terminate' : 4,\n       'activate_suspended' : 5,\n       'activate_terminated' : 6"],[1,"activate' : 4"],[0,",\n  "]],"start1":4143,"start2":4143,"length1":89,"length2":21}]],"length":77248,"saved":false}
{"ts":1378922989612,"patch":[[{"diffs":[[0,"activate"],[-1,"_suspended"],[0,""],[1,""],[0,"' : {\n  "]],"start1":4209,"start2":4209,"length1":26,"length2":16},{"diffs":[[0,"    "],[-1," 'activate_terminated' : {\n            'from' : ('terminated',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n        'terminate' : {\n           'from' : ('active', 'suspended'),\n           'to'   : ('terminat"],[1,"'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspend"],[0,"ed',"]],"start1":4308,"start2":4308,"length1":319,"length2":85}]],"length":77004,"saved":false}
{"ts":1378923025325,"patch":[[{"diffs":[[0,"   \n"],[-1,"    # Ova akcija terminira aktivnu ili suspendovanu domenu. Ovde cemo dalje opisati posledice terminacije\n    @ndb.transactional\n    def terminate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'terminate-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' ili domain.state == 'suspended'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'terminate-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'terminated'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='terminate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n"],[0,"    "]],"start1":6880,"start2":6880,"length1":1074,"length2":8},{"diffs":[[0,"activate"],[-1,"_suspended"],[0,"():\n    "]],"start1":7007,"start2":7007,"length1":26,"length2":16},{"diffs":[[0,"ut()"],[-1,"\n    \n    # Ova akcija aktivira terminiranu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_terminated():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate_terminated-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'terminated'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'activate_terminated-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_terminated', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# "]],"start1":7544,"start2":7544,"length1":1067,"length2":8}]],"length":74869,"saved":false}
{"ts":1378923117210,"patch":[[{"diffs":[[0," = Role("],[-1,"parent"],[1,"namespace"],[0,"=domain_"]],"start1":4984,"start2":4984,"length1":22,"length2":25}]],"length":74872,"saved":false}
{"ts":1378923151131,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        #object_log = ObjectLog(parent=role_user_key, agent=user_key, action='accept', state=role_user.state, log=role_user)\n        #object_log.put()\n"],[0,"    "]],"start1":5216,"start2":5216,"length1":159,"length2":8}]],"length":74721,"saved":false}
{"ts":1378923170763,"patch":[[{"diffs":[[0,"r.put()\n        "],[-1,"sub"],[1,"user"],[0,"_role = Role(nam"]],"start1":5212,"start2":5212,"length1":35,"length2":36},{"diffs":[[0,"y=True)\n        "],[-1,"sub"],[1,"user"],[0,"_role.put()\n    "]],"start1":5362,"start2":5362,"length1":35,"length2":36}]],"length":74723,"saved":false}
{"ts":1378923456971,"patch":[[{"diffs":[[0,"activate"],[-1,"_suspended"],[0,"-Domain'"]],"start1":6953,"start2":6953,"length1":26,"length2":16}]],"length":74713,"saved":false}
{"ts":1378923469849,"patch":[[{"diffs":[[0,"vate"],[-1,"_suspended"],[0,"', s"]],"start1":7194,"start2":7194,"length1":18,"length2":8}]],"length":74703,"saved":false}
{"ts":1378923560276,"patch":[[{"diffs":[[0,"main"],[-1,"/'MIRACLESTYLE')\n    # Role permissions affect Domain and it's related entities, with exception to Roles in 'MIRACLESTYLE' namespace.\n    # Roles in 'MIRACLESTYLE' namespace globally affect Miraclestyle Application and all of it's related entities."],[1,")"],[0,"\n   "]],"start1":7444,"start2":7444,"length1":256,"length2":9}]],"length":74456,"saved":false}
{"ts":1378923577055,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":8197,"start2":8197,"length1":34,"length2":8}]],"length":74430,"saved":false}
{"ts":1378923591928,"patch":[[{"diffs":[[0,"'. \n"],[-1,"        # u slucaju kreiranja Role u 'MIRACLESTYLE' domeni, agent mora biti Application Admin (users.is_current_user_admin()).\n"],[0,"    "]],"start1":8334,"start2":8334,"length1":135,"length2":8},{"diffs":[[0,"e'.\n"],[-1,"        # domena 'MIRACLESTYLE' je uvek evaluated 'active'\n"],[0,"    "]],"start1":8405,"start2":8405,"length1":67,"length2":8}]],"length":74244,"saved":false}
{"ts":1378923643044,"patch":[[{"diffs":[[0," = Role("],[-1,"namespace=domain_key, "],[0,"name='St"]],"start1":8421,"start2":8421,"length1":38,"length2":16}]],"length":74222,"saved":false}
{"ts":1378923689210,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":8754,"start2":8754,"length1":34,"length2":8},{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da agent treba azurirati globalne Role imacemo problem posto bi globalna dozvola 'update-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'update-Role').\n"],[0,"    "]],"start1":8796,"start2":8796,"length1":233,"length2":8}]],"length":73971,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378926067612,"patch":[[{"diffs":[[0,"ima "],[-1,"za"],[1,"u"],[0," async "],[-1,"oper"],[1,"radi optimiz"],[0,"acij"]],"start1":9334,"start2":9334,"length1":21,"length2":28}]],"length":73978,"saved":false}
{"ts":1378926213850,"patch":[[{"diffs":[[0,")))\n            "],[-1,"sub"],[1,"user"],[0,"_role = key.get("]],"start1":9483,"start2":9483,"length1":35,"length2":36},{"diffs":[[0,"            "],[-1,"sub"],[1,"user"],[0,"_role.name ="]],"start1":9521,"start2":9521,"length1":27,"length2":28},{"diffs":[[0,"            "],[-1,"sub"],[1,"user"],[0,"_role.permis"]],"start1":9560,"start2":9560,"length1":27,"length2":28},{"diffs":[[0,"ons\n            "],[-1,"sub"],[1,"user"],[0,"_role.put()\n    "]],"start1":9609,"start2":9609,"length1":35,"length2":36}]],"length":73982,"saved":false}
{"ts":1378926276591,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu."],[0,"\n   "]],"start1":9668,"start2":9668,"length1":35,"length2":8},{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da agent treba brisati globalne Role imacemo problem posto bi globalna dozvola 'delete-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'delete-Role').\n"],[0,"    "]],"start1":9710,"start2":9710,"length1":231,"length2":8}]],"length":73732,"saved":false}
{"ts":1378926375850,"patch":[[{"diffs":[[0,"tor Role"],[-1,"\n    #"],[1," (namespace Domain) -"],[0," id = st"]],"start1":10409,"start2":10409,"length1":22,"length2":37}]],"length":73747,"saved":false}
{"ts":1378926399826,"patch":[[{"diffs":[[0,"d = str("],[-1,"user"],[1,"role"],[0,"_key.id("]],"start1":10440,"start2":10440,"length1":20,"length2":20}]],"length":73747,"saved":false}
{"ts":1378926437979,"patch":[[{"diffs":[[0," - id = str("],[-1,"role"],[1,"user"],[0,"_key.id())\n "]],"start1":10436,"start2":10436,"length1":28,"length2":28}]],"length":73747,"saved":false}
{"ts":1378926448711,"patch":[[{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da se user treba invite na globalnu Rolu imacemo problem posto bi globalna dozvola 'invite-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'invite').\n"],[0,"    "]],"start1":11604,"start2":11604,"length1":234,"length2":8}]],"length":73521,"saved":false}
{"ts":1378926535066,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":11536,"start2":11536,"length1":34,"length2":8}]],"length":73495,"saved":false}
{"ts":1378926539481,"patch":[[{"diffs":[[0,"role"],[-1," domene, ili globalne role."],[0,"\n   "]],"start1":12145,"start2":12145,"length1":35,"length2":8}]],"length":73468,"saved":false}
{"ts":1378926544784,"patch":[[{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da se user treba remove sa globalne Role imacemo problem posto bi globalna dozvola 'remove-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'remove').\n"],[0,"    "]],"start1":12187,"start2":12187,"length1":234,"length2":8}]],"length":73242,"saved":false}
{"ts":1378926672318,"patch":[[{"diffs":[[0,"user == agent).\n"],[1,"        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom\n"],[0,"        # akcija"]],"start1":12342,"start2":12342,"length1":32,"length2":148}]],"length":73358,"saved":false}
{"ts":1378926897247,"patch":[[{"diffs":[[0,"ete "],[1,"ne"],[0,"ce "],[-1,"fail"],[1,"uspeti"],[0," uko"]],"start1":12816,"start2":12816,"length1":15,"length2":19},{"diffs":[[0,"iko "],[-1,"nije napravljen entitet sa tim kljucem"],[1,"entitet ne postoji"],[0,", na"]],"start1":12836,"start2":12836,"length1":46,"length2":26}]],"length":73342,"saved":false}
{"ts":1378927005808,"patch":[[{"diffs":[[0,"rolu"],[-1," (lokalne ili globalne - \"MIRACLESTYLE\") domene"],[0,"\n   "]],"start1":12963,"start2":12963,"length1":55,"length2":8}]],"length":73295,"saved":false}
{"ts":1378927078563,"patch":[[{"diffs":[[0,"er.user == agent"],[1,"_key"],[0,").\n        # akc"]],"start1":13095,"start2":13095,"length1":32,"length2":36}]],"length":73299,"saved":false}
{"ts":1378927087487,"patch":[[{"diffs":[[0,"== agent"],[-1,"_key"],[0,").\n     "]],"start1":13103,"start2":13103,"length1":20,"length2":16}]],"length":73295,"saved":false}
{"ts":1378927150296,"patch":[[{"diffs":[[0,"ccept', "],[1,"state="],[0,"role_use"]],"start1":13341,"start2":13341,"length1":16,"length2":22}]],"length":73301,"saved":false}
{"ts":1378927214128,"patch":[[{"diffs":[[0,"t()\n        "],[-1,"sub"],[1,"user"],[0,"_role = Role"]],"start1":13393,"start2":13393,"length1":27,"length2":28},{"diffs":[[0,"    "],[-1,"sub"],[1,"user"],[0,"_rol"]],"start1":13547,"start2":13547,"length1":11,"length2":12}]],"length":73303,"saved":false}
{"ts":1378927453448,"patch":[[{"diffs":[[0,"nt=role_key,"],[1," id='123673472829',"],[0," user='12367"]],"start1":11784,"start2":11784,"length1":24,"length2":43},{"diffs":[[0," = Role("],[-1,"namespace=domain_key, "],[0,"parent=r"]],"start1":13433,"start2":13433,"length1":38,"length2":16}]],"length":73300,"saved":false}
{"ts":1378927587673,"patch":[[{"diffs":[[0," domenom"],[1,"."],[0,"\n       "]],"start1":12484,"start2":12484,"length1":16,"length2":17}]],"length":73301,"saved":false}
{"ts":1378927676619,"patch":[[{"diffs":[[0," \n    # root"],[1," (namespace Domain)"],[0,"\n    name = "]],"start1":13629,"start2":13629,"length1":24,"length2":43}]],"length":73320,"saved":false}
{"ts":1378927722624,"patch":[[{"diffs":[[0,"###\n\n# done!"],[1," - ovde ce nam trebati kontrola"],[0,"\nclass Domai"]],"start1":3138,"start2":3138,"length1":24,"length2":55}]],"length":73351,"saved":false}
{"ts":1378927762222,"patch":[[{"diffs":[[0,"g.put()\n\n# done!"],[1," ovo cemo iskoristiti za globalne dozvole"],[0,"\nclass Role(ndb."]],"start1":7406,"start2":7406,"length1":32,"length2":73},{"diffs":[[0,"e()\n\n# done!"],[1," ovo cemo iskoristiti za globalne dozvole"],[0,"\nclass RoleU"]],"start1":10425,"start2":10425,"length1":24,"length2":65}]],"length":73433,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378987130179,"patch":[[{"diffs":[[0,"one!"],[-1," ovo cemo iskoristiti za globalne dozvole"],[0,"\ncla"]],"start1":7418,"start2":7418,"length1":49,"length2":8},{"diffs":[[0,"one!"],[-1," ovo cemo iskoristiti za globalne dozvole"],[0,"\ncla"]],"start1":10392,"start2":10392,"length1":49,"length2":8}]],"length":73351,"saved":false}
{"ts":1378987294782,"patch":[[{"diffs":[[0,"mit 120x"],[1,"\n    \n    _KIND = 3\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novu domenu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        domain = Domain(name='deskriptivno ime po zelji kreatora', primary_contact=user_key, state='active')\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=user_key, action='create', state=domain.state, log=domain)\n        object_log.put()\n        role = Role(namespace=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        user_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role.put()\n    \n    # Ova akcija azurira postojecu domenu.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.name = 'promenjeno ime od strane administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='update', state=domain.state, log=domain)\n        object_log.put()\n    \n    # Ova akcija suspenduje aktivnu domenu. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'suspend-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.state = 'suspended'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='suspend', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira suspendovanu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'activate-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'suspended'.\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done"]],"start1":15790,"start2":15790,"length1":16,"length2":3774}]],"length":77109,"saved":false}
{"ts":1378987321991,"patch":[[{"diffs":[[0,"a kreira nov"],[-1,"u domenu"],[1,"i store"],[0,".\n    @ndb.t"]],"start1":16726,"start2":16726,"length1":32,"length2":31},{"diffs":[[0,"amo "],[-1,"registrovani autenticirani agent"],[1,"agent koji ima domain-specific dozvolu 'create-Store'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'"],[0,".\n  "]],"start1":16824,"start2":16824,"length1":40,"length2":136}]],"length":77204,"saved":false}
{"ts":1378987410051,"patch":[[{"diffs":[[0,"e'.\n        "],[-1,"domain = Domain"],[1,"store = Store"],[0,"(name='deskr"]],"start1":16954,"start2":16954,"length1":39,"length2":37},{"diffs":[[0,"a', "],[-1,"primary_contact=user_key"],[1,"logo='referenca kljuca do bloba'"],[0,", st"]],"start1":17019,"start2":17019,"length1":32,"length2":40},{"diffs":[[0," bloba', state='"],[-1,"active"],[1,"open"],[0,"')\n        domai"]],"start1":17048,"start2":17048,"length1":38,"length2":36}]],"length":77208,"saved":false}
{"ts":1378987440876,"patch":[[{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17071,"start2":17071,"length1":35,"length2":33}]],"length":77206,"saved":false}
{"ts":1378987487914,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=user"]],"start1":17125,"start2":17125,"length1":38,"length2":37},{"diffs":[[0,"tore_key, agent="],[-1,"user"],[1,"agent"],[0,"_key, action='cr"]],"start1":17142,"start2":17142,"length1":36,"length2":37},{"diffs":[[0,"ate="],[-1,"domain.state, log=domain)\n        object_log.put()\n        role = Role(namespace=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        user_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role"],[1,"store.state, log=store)\n        object_log"],[0,".put"]],"start1":17188,"start2":17188,"length1":474,"length2":50}]],"length":76782,"saved":false}
{"ts":1378987570656,"patch":[[{"diffs":[[0,"azurira "],[-1,"postojecu domenu"],[1,"i store"],[0,".\n    @n"]],"start1":17263,"start2":17263,"length1":32,"length2":23},{"diffs":[[0,"dozvolu 'update-"],[-1,"Domain"],[1,"Store"],[0,"'. ***\n        #"]],"start1":17392,"start2":17392,"length1":38,"length2":37},{"diffs":[[0,"ctive'.\n        "],[-1,"domain"],[1,"store"],[0,".name = 'promenj"]],"start1":17483,"start2":17483,"length1":38,"length2":37},{"diffs":[[0,"ane "],[-1,"administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps"],[1,"korisnika'\n        store.logo = blob_key"],[0,"\n   "]],"start1":17534,"start2":17534,"length1":219,"length2":48},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17579,"start2":17579,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":17633,"start2":17633,"length1":38,"length2":37},{"diffs":[[0,"'update', state="],[-1,"domain"],[1,"store"],[0,".state, log=doma"]],"start1":17684,"start2":17684,"length1":38,"length2":37},{"diffs":[[0,"tore.state, log="],[-1,"domain"],[1,"store"],[0,")\n        object"]],"start1":17701,"start2":17701,"length1":38,"length2":37}]],"length":76595,"saved":false}
{"ts":1378987974154,"patch":[[{"diffs":[[0,"me='"],[-1,"deskriptivno ime po zelji kreatora', logo='referenca kljuca do bloba'"],[1,"Store Name', logo=blob_key"],[0,", st"]],"start1":16982,"start2":16982,"length1":77,"length2":34}]],"length":76552,"saved":false}
{"ts":1378988065093,"patch":[[{"diffs":[[0,"   \n"],[-1,"    # *** mozda treba zameniti dozvole za upravljanje domenom sa jednom dozvolom 'manage-Domain' ili tome slicno!\n    \n"],[0,"    "]],"start1":4445,"start2":4445,"length1":127,"length2":8},{"diffs":[[0,"ra novu domenu.\n"],[1,""],[0,"    @ndb.transac"]],"start1":4470,"start2":4470,"length1":32,"length2":32},{"diffs":[[0,"'update-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":5474,"start2":5474,"length1":36,"length2":32},{"diffs":[[0,"suspend-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":6213,"start2":6213,"length1":36,"length2":32},{"diffs":[[0,"def activate():\n"],[1,""],[0,"        # ovu ak"]],"start1":6761,"start2":6761,"length1":32,"length2":32},{"diffs":[[0,"ctivate-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":6858,"start2":6858,"length1":36,"length2":32},{"diffs":[[0," 'create-Store'."],[-1," ***"],[0,"\n        # akcij"]],"start1":16735,"start2":16735,"length1":36,"length2":32},{"diffs":[[0,"-Store'."],[-1," ***"],[0,"\n       "]],"start1":17229,"start2":17229,"length1":20,"length2":16}]],"length":76413,"saved":false}
{"ts":1378988145986,"patch":[[{"diffs":[[0,"ame="],[-1,"'Store N"],[1,"var_n"],[0,"ame"],[-1,"'"],[0,", logo="],[1,"var_"],[0,"blob"]],"start1":16846,"start2":16846,"length1":27,"length2":27}]],"length":76413,"saved":false}
{"ts":1378988159483,"patch":[[{"diffs":[[0,"ogo=var_"],[-1,"b"],[0,"lo"],[-1,"b_key"],[1,"go"],[0,", state="]],"start1":16861,"start2":16861,"length1":24,"length2":20}]],"length":76409,"saved":false}
{"ts":1378988204356,"patch":[[{"diffs":[[0,"e = "],[-1,"'promenjeno ime od strane korisnika'"],[1,"var_name"],[0,"\n   "]],"start1":17322,"start2":17322,"length1":44,"length2":16},{"diffs":[[0,"o = "],[-1,"blob_key"],[1,"var_logo"],[0,"\n   "]],"start1":17352,"start2":17352,"length1":16,"length2":16}]],"length":76381,"saved":false}
{"ts":1378988237655,"patch":[[{"diffs":[[0,"ija "],[-1,"suspenduje aktivnu domenu"],[1,"zatvara otvoren store"],[0,". Ov"]],"start1":17553,"start2":17553,"length1":33,"length2":29},{"diffs":[[0,"i posledice "],[-1,"suspenzije"],[1,"zatvaranja..."],[0,"\n    @ndb.tr"]],"start1":17602,"start2":17602,"length1":34,"length2":37}]],"length":76380,"saved":false}
{"ts":1378988336250,"patch":[[{"diffs":[[0,"ctional\n    def "],[-1,"suspend"],[1,"close"],[0,"():\n        # ov"]],"start1":17643,"start2":17643,"length1":39,"length2":37},{"diffs":[[0,"ozvolu '"],[-1,"suspend-Domain"],[1,"close-Store"],[0,"'. ***\n "]],"start1":17740,"start2":17740,"length1":30,"length2":27},{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        domain"]],"start1":17819,"start2":17819,"length1":32,"length2":56},{"diffs":[[0,"domain.state = '"],[-1,"suspend"],[1,"clos"],[0,"ed'\n        doma"]],"start1":17869,"start2":17869,"length1":39,"length2":36}]],"length":76396,"saved":false}
{"ts":1378988351919,"patch":[[{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        store."]],"start1":17287,"start2":17287,"length1":32,"length2":56}]],"length":76420,"saved":false}
{"ts":1378988429936,"patch":[[{"diffs":[[0,"'open'.\n        "],[-1,"domain"],[1,"store"],[0,".state = 'closed"]],"start1":17877,"start2":17877,"length1":38,"length2":37},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17916,"start2":17916,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":17970,"start2":17970,"length1":38,"length2":37},{"diffs":[[0,"nt_key, action='"],[-1,"suspend"],[1,"close"],[0,"', state=domain."]],"start1":18006,"start2":18006,"length1":39,"length2":37},{"diffs":[[0,"='close', state="],[-1,"domain"],[1,"store"],[0,".state, message="]],"start1":18020,"start2":18020,"length1":38,"length2":37}]],"length":76413,"saved":false}
{"ts":1378988517703,"patch":[[{"diffs":[[0,"-Store'."],[-1," ***"],[0,"\n       "]],"start1":17777,"start2":17777,"length1":20,"length2":16},{"diffs":[[0,"ija "],[-1,"aktivira suspendovanu domenu"],[1,"otvara zatvoreni store"],[0,". Ov"]],"start1":18225,"start2":18225,"length1":36,"length2":30},{"diffs":[[0,"i posledice "],[-1,"aktivacije"],[1,"otvaranja..."],[0,"\n    @ndb.tr"]],"start1":18275,"start2":18275,"length1":34,"length2":36},{"diffs":[[0,"nal\n    def "],[-1,"activate"],[1,"open"],[0,"():\n        "]],"start1":18319,"start2":18319,"length1":32,"length2":28},{"diffs":[[0,"lu '"],[-1,"activate-Domain'. ***"],[1,"open-Store'."],[0,"\n   "]],"start1":18415,"start2":18415,"length1":29,"length2":20},{"diffs":[[0,"omain.state == '"],[-1,"suspend"],[1,"active' i store.state == 'clos"],[0,"ed'.\n        dom"]],"start1":18478,"start2":18478,"length1":39,"length2":62}]],"length":76415,"saved":false}
{"ts":1378988547480,"patch":[[{"diffs":[[0,"losed'.\n        "],[-1,"domain"],[1,"store"],[0,".state = 'active"]],"start1":18521,"start2":18521,"length1":38,"length2":37},{"diffs":[[0," store.state = '"],[-1,"active"],[1,"open"],[0,"'\n        domain"]],"start1":18536,"start2":18536,"length1":38,"length2":36},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":18558,"start2":18558,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":18612,"start2":18612,"length1":38,"length2":37},{"diffs":[[0,"ey, action='"],[-1,"activate"],[1,"open"],[0,"', state=dom"]],"start1":18652,"start2":18652,"length1":32,"length2":28},{"diffs":[[0,"n='open', state="],[-1,"domain"],[1,"store"],[0,".state, message="]],"start1":18661,"start2":18661,"length1":38,"length2":37}]],"length":76404,"saved":false}
{"ts":1378988776066,"patch":[[{"diffs":[[0,"for caching)"],[1," (namespace Domain)"],[0,"\n    # compo"]],"start1":19807,"start2":19807,"length1":24,"length2":43}]],"length":76423,"saved":false}
{"ts":1378988895240,"patch":[[{"diffs":[[0,"   \n    _KIND = "],[-1,"3"],[1,"0"],[0,"\n    \n    OBJECT"]],"start1":3511,"start2":3511,"length1":33,"length2":33},{"diffs":[[0,"_KIND = "],[-1,"6"],[1,"0"],[0,"\n    \n  "]],"start1":7929,"start2":7929,"length1":17,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"7"],[1,"0"],[0,"\n    \n  "]],"start1":10611,"start2":10611,"length1":17,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"3"],[1,"0"],[0,"\n    \n  "]],"start1":15677,"start2":15677,"length1":17,"length2":17},{"diffs":[[0,"r Store (Catalog"],[-1," -"],[0," for caching) (n"]],"start1":19788,"start2":19788,"length1":34,"length2":32},{"diffs":[[0," required=True)\n"],[-1,""],[0,"    sequence = n"]],"start1":19967,"start2":19967,"length1":32,"length2":32},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira i store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":20021,"start2":20021,"length1":32,"length2":3216}]],"length":79605,"saved":false}
{"ts":1378988968109,"patch":[[{"diffs":[[0," = '"],[-1,"active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        }"],[1,"none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3"],[0,",\n  "]],"start1":20086,"start2":20086,"length1":855,"length2":103},{"diffs":[[0,"reira novi store"],[1," content"],[0,".\n    @ndb.trans"]],"start1":20216,"start2":20216,"length1":32,"length2":40}]],"length":78861,"saved":false}
{"ts":1378989289379,"patch":[[{"diffs":[[0,"lu 'create-Store"],[1,"Content"],[0,"'.\n        # akc"]],"start1":20359,"start2":20359,"length1":32,"length2":39},{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        store "]],"start1":20438,"start2":20438,"length1":32,"length2":56}]],"length":78892,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378996521512,"patch":[[{"diffs":[[0,"g.put()\n\n# done!"],[1," mozda napraviti DomainUser u kojem je repeated prop. Roles, i onda u Expando od User modela dodati struct prop Roles(Domain, Roles)?"],[0,"\nclass Role(ndb."]],"start1":7275,"start2":7275,"length1":32,"length2":165},{"diffs":[[0," akcija azurira "],[-1,""],[0,""],[1,"postojec"],[0,"i store.\n    @nd"]],"start1":17206,"start2":17206,"length1":32,"length2":40},{"diffs":[[0,"tore"],[-1," = Store(name=var_name, logo=var_logo, state='open'"],[1,"_content = StoreContent(title=var_title, body=var_body, sequence=var_sequence"],[0,")\n  "]],"start1":20630,"start2":20630,"length1":59,"length2":85},{"diffs":[[0,")\n        store_"],[1,"content_"],[0,"key = store.put("]],"start1":20711,"start2":20711,"length1":32,"length2":40},{"diffs":[[0,"tent_key = store"],[1,"_content"],[0,".put()\n        o"]],"start1":20730,"start2":20730,"length1":32,"length2":40},{"diffs":[[0,"og(parent=store_"],[1,"content_"],[0,"key, agent=agent"]],"start1":20789,"start2":20789,"length1":32,"length2":40},{"diffs":[[0,"ate', state="],[-1,"store.state"],[1,"'none'"],[0,", log=store)"]],"start1":20846,"start2":20846,"length1":35,"length2":30},{"diffs":[[0,"none', log=store"],[1,"_content"],[0,")\n        object"]],"start1":20859,"start2":20859,"length1":32,"length2":40},{"diffs":[[0,"azurira "],[-1,"i "],[0,"store"],[1," content"],[0,".\n    @n"]],"start1":20932,"start2":20932,"length1":23,"length2":29},{"diffs":[[0,"lu 'update-Store"],[1,"Content"],[0,"'.\n        # akc"]],"start1":21072,"start2":21072,"length1":32,"length2":39},{"diffs":[[0,"       store"],[-1,".nam"],[1,"_content.titl"],[0,"e = var_"],[-1,"nam"],[1,"titl"],[0,"e\n        st"]],"start1":21194,"start2":21194,"length1":39,"length2":49},{"diffs":[[0,"   store"],[-1,".logo = var_logo"],[1,"_content.body = var_body\n        store_content.sequence = var_sequence"],[0,"\n       "]],"start1":21238,"start2":21238,"length1":32,"length2":86},{"diffs":[[0,"e\n        store_"],[1,"content_"],[0,"key = store.put("]],"start1":21315,"start2":21315,"length1":32,"length2":40},{"diffs":[[0,"tent_key = store"],[1,"_content"],[0,".put()\n        o"]],"start1":21334,"start2":21334,"length1":32,"length2":40},{"diffs":[[0,"og(parent=store_"],[1,"content_"],[0,"key, agent=agent"]],"start1":21393,"start2":21393,"length1":32,"length2":40},{"diffs":[[0,"ate', state="],[-1,"store.state"],[1,"'none'"],[0,", log=store)"]],"start1":21450,"start2":21450,"length1":35,"length2":30},{"diffs":[[0,"none', log=store"],[1,"_content"],[0,")\n        object"]],"start1":21463,"start2":21463,"length1":32,"length2":40},{"diffs":[[0,"ija "],[-1,"zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x"],[1,"brise store content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_content_key.delete()\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi store shipping exclusion.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion = StoreShippingExclusion(country=var_country)\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='create', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija azurira store shipping exclusion.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion.country = var_country\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='update', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija brise store shipping exclusion.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_shipping_exclusion_key.delete()\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novu taxu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Tax'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store_shipping_exclusion = StoreShippingExclusion(country=var_country)\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='create', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija azurira store shipping exclusion.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion.country = var_country\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='update', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija brise store shipping exclusion.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_shipping_exclusion_key.delete()"],[0,"\n\n# "]],"start1":21532,"start2":21532,"length1":2343,"length2":5177}]],"length":82024,"saved":false}
{"ts":1378996629631,"patch":[[{"diffs":[[0,"    "],[-1,"store_shipping_exclusion = StoreShippingExclusion(country=var_country"],[1,"tax = Tax(name=var_name, sequence=var_sequence, amount=var_amount, location_exclusion=var_location_exclusion, active=True"],[0,")\n  "]],"start1":25301,"start2":25301,"length1":77,"length2":129}]],"length":82076,"saved":false}
{"ts":1378996786919,"patch":[[{"diffs":[[0,"    "],[-1,"store_shipping_exclusion_key = store_shipping_exclusion"],[1,"tax_key = tax"],[0,".put"]],"start1":25432,"start2":25432,"length1":63,"length2":21},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":25490,"start2":25490,"length1":32,"length2":11},{"diffs":[[0,"log="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,")\n  "]],"start1":25551,"start2":25551,"length1":32,"length2":11},{"diffs":[[0,"ira "],[-1,"store shipping exclusion"],[1,"taxu"],[0,".\n  "]],"start1":25611,"start2":25611,"length1":32,"length2":12},{"diffs":[[0,"'update-"],[-1,"StoreShippingExclusion"],[1,"Tax"],[0,"'.\n     "]],"start1":25741,"start2":25741,"length1":38,"length2":19},{"diffs":[[0,"ive'"],[-1," i store.state == 'open'.\n        store_shipping_exclusion.c"],[1,".\n        tax.name = var_name\n        tax.sequence = var_sequence\n        tax.am"],[0,"ount"],[-1,"ry"],[0," = var_"],[-1,"c"],[1,"am"],[0,"ount"],[-1,"ry"],[0,"\n   "]],"start1":25820,"start2":25820,"length1":88,"length2":105},{"diffs":[[0,"    "],[-1,"store_shipping_exclusion_key = store_shipping_exclusion"],[1,"tax.location_exclusion = var_location_exclusion\n        tax.active = var_active\n        tax_key = tax"],[0,".put"]],"start1":25926,"start2":25926,"length1":63,"length2":109},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26072,"start2":26072,"length1":32,"length2":11},{"diffs":[[0,"log="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,")\n  "]],"start1":26133,"start2":26133,"length1":32,"length2":11}]],"length":81974,"saved":false}
{"ts":1378996831945,"patch":[[{"diffs":[[0,"'delete-"],[-1,"StoreShippingExclusion"],[1,"Tax"],[0,"'.\n     "]],"start1":26341,"start2":26341,"length1":38,"length2":19},{"diffs":[[0,"ive'"],[-1," i store.state == 'open'"],[0,".\n  "]],"start1":26420,"start2":26420,"length1":32,"length2":8},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26460,"start2":26460,"length1":32,"length2":11},{"diffs":[[0,"    "],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26550,"start2":26550,"length1":32,"length2":11}]],"length":81889,"saved":false}
{"ts":1378998190330,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi carrier.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier = Carrier(name=var_name, active=True)\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='create', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija azurira carrier.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier.name = var_name\n        carrier.active = var_active\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='update', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija brise carrier.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=tax_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        tax_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":26946,"start2":26946,"length1":32,"length2":1546}]],"length":83403,"saved":false}
{"ts":1378998199309,"patch":[[{"diffs":[[0,"ise "],[-1,"store shipping exclusion"],[1,"taxu"],[0,".\n  "]],"start1":26191,"start2":26191,"length1":32,"length2":12}]],"length":83383,"saved":false}
{"ts":1378998339580,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"tax"],[1,"carrier"],[0,"_key, agent=agen"]],"start1":28334,"start2":28334,"length1":35,"length2":39},{"diffs":[[0,"g.put()\n        "],[-1,"tax"],[1,"carrier"],[0,"_key.delete()\n\n#"]],"start1":28428,"start2":28428,"length1":35,"length2":39}]],"length":83391,"saved":false}
{"ts":1378998416649,"patch":[[{"diffs":[[0,"(Catalog"],[1,","],[0," for cac"]],"start1":19937,"start2":19937,"length1":16,"length2":17},{"diffs":[[0,"(Catalog"],[-1," -"],[1,","],[0," for cac"]],"start1":22036,"start2":22036,"length1":18,"length2":17},{"diffs":[[0,"caching)"],[1," (namespace Domain)"],[0,"\n    # o"]],"start1":22050,"start2":22050,"length1":16,"length2":35},{"diffs":[[0,"mit 300x"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi carrier.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier = Carrier(name=var_name, active=True)\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='create', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija azurira carrier.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier.name = var_name\n        carrier.active = var_active\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='update', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija brise carrier.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        carrier_key.delete()"],[0,"\n\n# done"]],"start1":29206,"start2":29206,"length1":16,"length2":1538}]],"length":84932,"saved":false}
{"ts":1378998468422,"patch":[[{"diffs":[[0," Carrier"],[1," (namespace Domain)"],[0,"\n    # h"]],"start1":28544,"start2":28544,"length1":16,"length2":35}]],"length":84951,"saved":false}
{"ts":1378998497453,"patch":[[{"diffs":[[0,"ira novi carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":29414,"start2":29414,"length1":32,"length2":37},{"diffs":[[0," 'create-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":29556,"start2":29556,"length1":32,"length2":36}]],"length":84960,"saved":false}
{"ts":1378998570369,"patch":[[{"diffs":[[0,"\n        carrier"],[1,"_line"],[0," = Carrier(name="]],"start1":29649,"start2":29649,"length1":32,"length2":37},{"diffs":[[0,"r_line = Carrier"],[1,"Line"],[0,"(name=var_name, "]],"start1":29664,"start2":29664,"length1":32,"length2":36},{"diffs":[[0,"e(name=var_name,"],[1," sequence=var_sequence, location_exclusion=var_location_exclusion,"],[0," active=True)\n  "]],"start1":29683,"start2":29683,"length1":32,"length2":98}]],"length":85035,"saved":false}
{"ts":1378998742243,"patch":[[{"diffs":[[0,"        carrier_"],[1,"line_"],[0,"key = carrier.pu"]],"start1":29779,"start2":29779,"length1":32,"length2":37},{"diffs":[[0,"ne_key = carrier"],[1,"_line"],[0,".put()\n        o"]],"start1":29797,"start2":29797,"length1":32,"length2":37},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":29855,"start2":29855,"length1":32,"length2":37},{"diffs":[[0,"ne', log=carrier"],[1,"_line"],[0,")\n        object"]],"start1":29924,"start2":29924,"length1":32,"length2":37},{"diffs":[[0," azurira carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":29993,"start2":29993,"length1":32,"length2":37},{"diffs":[[0," 'update-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":30135,"start2":30135,"length1":32,"length2":36},{"diffs":[[0,"\n        carrier"],[1,"_line"],[0,".name = var_name"]],"start1":30228,"start2":30228,"length1":32,"length2":37},{"diffs":[[0,"\n        carrier"],[1,"_line.sequence = var_sequence\n        carrier_line.location_exclusion = var_location_exclusion\n        carrier_line"],[0,".active = var_ac"]],"start1":30265,"start2":30265,"length1":32,"length2":147},{"diffs":[[0,"        carrier_"],[1,"line_"],[0,"key = carrier.pu"]],"start1":30417,"start2":30417,"length1":32,"length2":37},{"diffs":[[0,"ne_key = carrier"],[1,"_line"],[0,".put()\n        o"]],"start1":30435,"start2":30435,"length1":32,"length2":37},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":30493,"start2":30493,"length1":32,"length2":37},{"diffs":[[0,"ne', log=carrier"],[1,"_line"],[0,")\n        object"]],"start1":30562,"start2":30562,"length1":32,"length2":37},{"diffs":[[0,"ja brise carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":30629,"start2":30629,"length1":32,"length2":37},{"diffs":[[0," 'delete-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":30771,"start2":30771,"length1":32,"length2":36},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":30895,"start2":30895,"length1":32,"length2":37},{"diffs":[[0,"\n        carrier"],[-1,""],[0,""],[1,"_line"],[0,"_key.delete()\n\n#"]],"start1":30993,"start2":30993,"length1":32,"length2":37}]],"length":85223,"saved":false}
{"ts":1378998810724,"patch":[[{"diffs":[[0,"feedback"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira postojeci store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done"]],"start1":32627,"start2":32627,"length1":16,"length2":3208}]],"length":88415,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379251225782,"patch":[[{"diffs":[[0,"Content("],[-1,""],[0,""],[1,"parent=store_key, "],[0,"title=va"]],"start1":20651,"start2":20651,"length1":16,"length2":34},{"diffs":[[0,"clusion("],[-1,""],[0,""],[1,"parent=store_key, "],[0,"country="]],"start1":22664,"start2":22664,"length1":16,"length2":34},{"diffs":[[0,"bject_log.put()\n"],[1,"        carrier_lines = CarrierLine.query(ancestor=carrier_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog carrier_line entiteta, pa se trebati ustvari pozivati CarrierLine.delete() sa listom kljuceva.\n        # CarrierLine.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog Carrier entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(carrier_lines)\n"],[0,"        carrier_"]],"start1":28475,"start2":28475,"length1":32,"length2":532},{"diffs":[[0,"ierLine("],[-1,""],[0,""],[1,"parent=carrier_key, "],[0,"name=var"]],"start1":30213,"start2":30213,"length1":16,"length2":36},{"diffs":[[0,"te-ova\n        '"],[-1,"open"],[1,"unpublished"],[0,"' : (1, ),\n     "]],"start1":33692,"start2":33692,"length1":36,"length2":43},{"diffs":[[0,"),\n        '"],[-1,"closed' : (2"],[1,"locked' : (2, ),\n        'published' : (3, ),\n        'discontinued' : (4"],[0,", ),\n    }\n "]],"start1":33727,"start2":33727,"length1":36,"length2":97},{"diffs":[[0," 2,\n       '"],[-1,"close"],[1,"lock' : 3,\n       'publish"],[0,"' : "],[-1,"3"],[1,"4"],[0,",\n       'op"]],"start1":33889,"start2":33889,"length1":34,"length2":55},{"diffs":[[0," 4,\n       '"],[-1,"open"],[1,"discontinue"],[0,"' : "],[-1,"4"],[1,"5"],[0,",\n    }\n    "]],"start1":33930,"start2":33930,"length1":33,"length2":40},{"diffs":[[0,"NS = {\n        '"],[-1,"open"],[1,"lock"],[0,"' : {\n          "]],"start1":33991,"start2":33991,"length1":36,"length2":36},{"diffs":[[0,"     'from' : ('"],[-1,"clos"],[1,"unpublish"],[0,"ed',),\n         "]],"start1":34024,"start2":34024,"length1":36,"length2":41},{"diffs":[[0,"   'to' : ('"],[-1,"open"],[1,"locked',),\n         },\n        'publish' : {\n           'from' : ('locked"],[0,"',"],[1," "],[0,"),\n "],[1,"          'to'   : ('published',),\n"],[0,"        },\n "]],"start1":34065,"start2":34065,"length1":34,"length2":139},{"diffs":[[0,"    },\n        '"],[-1,"clos"],[1,"discontinu"],[0,"e' : {\n         "]],"start1":34196,"start2":34196,"length1":36,"length2":42},{"diffs":[[0,"     'from' : ('"],[-1,"open"],[1,"published"],[0,"', ),\n          "]],"start1":34235,"start2":34235,"length1":36,"length2":41},{"diffs":[[0,"     'to'   : ('"],[-1,"clos"],[1,"discontinu"],[0,"ed',),\n        }"]],"start1":34272,"start2":34272,"length1":36,"length2":42},{"diffs":[[0,"stor Catalog"],[-1,""],[0,""],[1," (namespace Domain)"],[0,"\n    # compo"]],"start1":36658,"start2":36658,"length1":24,"length2":43},{"diffs":[[0,"sequence"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija dodaje novu sliku u catalog.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_image = CatalogImage(parent=catalog_key, image=var_image, content_type=var_content_type, size=var_size, width=var_width, height=var_height, sequence=var_sequence)\n        catalog_image_key = catalog_image.put()\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='create', state='none', log=catalog_image)\n        object_log.put()\n    \n    # Ova akcija menja raspored slike u catalog-u.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_image.sequence = var_sequence\n        catalog_image_key = catalog_image.put()\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='update', state='none', log=catalog_image)\n        object_log.put()\n    \n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete()"],[0,"\n\n# done"]],"start1":36728,"start2":36728,"length1":16,"length2":1838},{"diffs":[[0," Catalog"],[-1,""],[0,""],[1," (namespace Domain)"],[0,"\n    pro"]],"start1":38621,"start2":38621,"length1":16,"length2":35},{"diffs":[[0," ProductInstance"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija dodaje novi pricetag na catalog.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_pricetag = CatalogPricetag(parent=catalog_key, product_template=var_product_template, container_image=var_container_image, source_width=var_source_width, source_height=var_source_height, source_position_top=var_source_position_top, source_position_left=var_source_position_left, value=var_value)\n        catalog_pricetag_key = catalog_pricetag.put()\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='create', state='none', log=catalog_pricetag)\n        object_log.put()\n    \n    # Ova akcija azurira pricetag na catalog-u.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_pricetag.product_template = var_product_template\n        catalog_pricetag.container_image = var_container_image\n        catalog_pricetag.source_width = var_source_width\n        catalog_pricetag.source_height = var_source_height\n        catalog_pricetag.source_position_top = var_source_position_top\n        catalog_pricetag.source_position_left = var_source_position_left\n        catalog_pricetag.value = var_value\n        catalog_pricetag_key = catalog_pricetag.put()\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='update', state='none', log=catalog_pricetag)\n        object_log.put()\n    \n    # Ova akcija brise pricetag sa catalog-a.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_pricetag_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":39332,"start2":39332,"length1":32,"length2":2428},{"diffs":[[0,"ue)\n"],[-1,"    state = ndb.IntegerProperty('6', required=True, indexed=False)\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n"],[0,"    "]],"start1":42249,"start2":42249,"length1":494,"length2":8},{"diffs":[[0,"odlucimo"],[1,"\n    # product_instance_count = ndb.IntegerProperty('12') cuvanje ovog podatka moze biti od koristi zbog prakticnog limita broja instanci na sistemu\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n       'generate_product_instances' : 4,\n    }\n    \n    # Ova akcija kreira novi product template.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_template = ProductTemplate(parent=catalog_key, product_category=var_product_category, name=var_name, description=var_description, product_uom=var_product_uom, unit_price=var_unit_price)\n        product_template_key = product_template.put()\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='create', state='none', log=product_template)\n        object_log.put()\n    \n    # Ova akcija azurira product template.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_template.product_category = var_product_category\n        product_template.name = var_name\n        product_template.description = var_description\n        product_template.product_uom = var_product_uom\n        product_template.unit_price = var_unit_price\n        product_template.state = var_state\n        product_template_key = product_template.put()\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state='none', log=product_template)\n        object_log.put()\n    \n    # Ova akcija brise product template.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_instance entiteta, pa se trebati ustvari pozivati ProductInstance.delete() sa listom kljuceva.\n        # ProductInstance.delete() nije za sada opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductTemplate entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_instances)\n        product_template_key.delete()\n    \n    # Ova akcija generise product instance.\n    @ndb.transactional\n    def generate_product_instances():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'generate_product_instances-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_instances)\n        \n        \n        \n        \n        variants []\n        for key in product_template_variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] = product_template_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n        variants = [\n            {'name': 'Color', 'options': ['Red', 'Green', 'Blue'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Size', 'options': ['Small', 'Medium', 'Large'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Fabric', 'options': ['Silk', 'Cotton'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Motif', 'options': ['Lace', 'Smooth', 'ZigZag', 'Butterfly'], 'position': 0, 'increment': False, 'reset': False},\n        ]\n                \n        variant_signatures = []\n        stay = True\n        while stay:\n            iterator = 0\n            for item in variants:\n                if (item['increment']):\n                    variants[iterator]['position'] += 1\n                    variants[iterator]['increment'] = False\n                if (item['reset']):\n                    variants[iterator]['position'] = 0\n                    variants[iterator]['reset'] = False\n                iterator += 1\n            dic = {}\n            iterator = 0\n            for item in variants:\n                dic[item['name']] = item['options'][item['position']]\n                if (iterator == 0):\n                    if (len(item['options']) == item['position'] + 1):\n                        variants[iterator]['reset'] = True\n                        variants[iterator + 1]['increment'] = True\n                    else:\n                        variants[iterator]['increment'] = True\n                elif not (len(variants) == iterator + 1):\n                    if (len(item['options']) == item['position'] + 1):\n                        if (variants[iterator - 1]['reset']):\n                            variants[iterator]['reset'] = True\n                            variants[iterator + 1]['increment'] = True\n                elif (len(variants) == iterator + 1):\n                    if (len(item['options']) == item['position'] + 1):\n                        if (variants[iterator - 1]['reset']):\n                            stay = False\n                            break\n                iterator += 1\n            variant_signatures.append(dic)\n        \n        variant_signatures = [\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        ]\n        \n            # ako nakon ove variante ima jos varianti onda mi treba broj option-sa u varianti i prvi option iz variante, \n            # ali treba zapamtiti redni broj option-a koji je trenutno izabran\n            \n            # \n            # treba mi index ucatne variante i treba mi ukupan broj varianti\n            # ako iza ove \n            for option in product_template_variant.options:\n                \n                \n                \n                \n                \n        product_instance = ProductInstance(parent=product_template_key, code=var_code, state=var_state)\n        product_instance_key = product_instance.put()\n        object_log = ObjectLog(parent=product_instance_key, agent=agent_key, action='create', state='none', log=product_instance)\n        object_log.put()"],[0,"\n\n# done"]],"start1":42925,"start2":42925,"length1":16,"length2":8018},{"diffs":[[0," to Cart"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'update' : 1,\n       'update_inventory' : 2,\n    }\n    \n    # Ova akcija azurira product instance.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductInstance'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        # u slucaju da je catalog.state == 'published' onda je moguce editovanje samo product_instance.state i product_instance.low_stock_quantity\n        product_instance.code = var_code\n        product_instance.state = var_state\n        product_instance_key = product_instance.put()\n        object_log = ObjectLog(parent=product_instance_key, agent=agent_key, action='update', state=product_instance.state, log=product_instance)\n        object_log.put()"],[0,"\n\n# done"]],"start1":53526,"start2":53526,"length1":16,"length2":914},{"diffs":[[0," ProductInstance"],[1," (namespace Domain)"],[0,"\n    # not logge"]],"start1":55212,"start2":55212,"length1":32,"length2":51},{"diffs":[[0,"    # not logged"],[1," ?"],[0,"\n    adjusted = "]],"start1":55248,"start2":55248,"length1":32,"length2":34},{"diffs":[[0,", indexed=False)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n    }\n    \n    # Ova akcija azurira product inventory.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductInventoryAdjustment'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'published'. - mozda budemo dozvolili adjustment bez obzira na catalog.state\n        product_inventory_adjustment = ProductInventoryAdjustment(parent=product_instance_key, agent=agent_key, quantity=var_quantity, comment=var_comment)\n        product_inventory_adjustment_key = product_inventory_adjustment.put()\n        object_log = ObjectLog(parent=product_inventory_adjustment_key, agent=agent_key, action='create', state='none', log=product_inventory_adjustment)\n        object_log.put()\n        # ovo bi trebalo ici preko task queue\n        # idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n        product_inventory_log = ProductInventoryLog.query().order(-ProductInventoryLog.logged).fetch(1)\n        new_product_inventory_log = ProductInventoryLog(parent=product_instance_key, reference=product_inventory_adjustment_key, quantity=product_inventory_adjustment.quantity, balance=product_inventory_log.balance + product_inventory_adjustment.quantity)\n        new_product_inventory_log.put()"],[0,"\n\n# done!\nclass "]],"start1":55563,"start2":55563,"length1":32,"length2":1479},{"diffs":[[0,"g (future - root"],[-1," / "],[1,") ("],[0,"namespace Domain"]],"start1":57095,"start2":57095,"length1":35,"length2":35},{"diffs":[[0,"Cart"],[-1," \n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product variant.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductVariant'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_variant = ProductVariant(parent=catalog_key, name=var_name, description=var_description, options=var_options, allow_custom_value=var_allow_custom_value)\n        product_variant_key = product_variant.put()\n        object_log = ObjectLog(parent=product_variant_key, agent=agent_key, action='create', state='none', log=product_variant)\n        object_log.put()\n    \n    # Ova akcija azurira product variant.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductVariant'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_variant.name = var_name\n        product_variant.description = var_description\n        product_variant.options = var_options\n        product_variant.allow_custom_value = var_allow_custom_value\n        product_variant_key = product_variant.put()\n        object_log = ObjectLog(parent=product_variant_key, agent=agent_key, action='update', state='none', log=product_variant)\n        object_log.put()\n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root) (namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product content.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content = ProductContent(parent=catalog_key, title=var_title, body=var_body)\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='create', state='none', log=product_content)\n        object_log.put()\n    \n    # Ova akcija azurira product content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content.title = var_title\n        product_content.body = var_body\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='update', state='none', log=product_content)\n        object_log.put("],[0,")\n\n#"]],"start1":57604,"start2":57604,"length1":256,"length2":3087}]],"length":106163,"saved":false}
{"ts":1379251882975,"patch":[[{"diffs":[[0," 1,\n"],[-1,"       'update_inventory' : 2,\n"],[0,"    "]],"start1":53638,"start2":53638,"length1":39,"length2":8}]],"length":106132,"saved":false}
{"ts":1379251995722,"patch":[[{"diffs":[[0,"sistemu\n"],[1,"    # default_product_instance_state = ndb.IntegerProperty('13') ovo sluzi samo da bi se state-ovi na instancama setovali na ovaj value\n"],[0,"    \n   "]],"start1":43074,"start2":43074,"length1":16,"length2":152}]],"length":106268,"saved":false}
{"ts":1379252073541,"patch":[[{"diffs":[[0,"se state"],[-1,"-ovi"],[1," na instancama setovao na ovaj value\n    # default_product_instance_low_stock_quantity = DecimalProperty('14') ovo sluzi samo da bi se low_stock_quantity"],[0," na inst"]],"start1":43168,"start2":43168,"length1":20,"length2":169},{"diffs":[[0,"a setova"],[-1,"li"],[1,"o"],[0," na ovaj"]],"start1":43342,"start2":43342,"length1":18,"length2":17}]],"length":106416,"saved":false}
{"ts":1379252178180,"patch":[[{"diffs":[[0," required=True)\n"],[1,"    state = ndb.IntegerProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n"],[0,"    _default_ind"]],"start1":42237,"start2":42237,"length1":32,"length2":571}]],"length":106955,"saved":false}
{"ts":1379252188422,"patch":[[{"diffs":[[0,"ntegerProperty('"],[-1,"2"],[1,"6"],[0,"', required=True"]],"start1":42270,"start2":42270,"length1":33,"length2":33}]],"length":106955,"saved":false}
{"ts":1379252316515,"patch":[[{"diffs":[[0,"quired=True)\n   "],[1," _default_indexed = False\n    pass\n    # Expando\n    #"],[0," state = ndb.Int"]],"start1":52819,"start2":52819,"length1":32,"length2":86},{"diffs":[[0,"lse)"],[-1,"# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando"],[1," overide state vrednosti sa product_template-a, inventory se uvek prati na nivou instanci, state je stavljen na template kako bi se olaksala kontrola state-ova. "],[0,"\n   "]],"start1":52948,"start2":52948,"length1":532,"length2":169}]],"length":106646,"saved":false}
{"ts":1379252389496,"patch":[[{"diffs":[[0,"  # "],[-1,"default_product_instance_state = ndb.IntegerProperty('13') ovo sluzi samo da bi se state na instancama"],[1,"low_stock_quantity = DecimalProperty('7', default=0.00)# notify"],[0," s"],[-1,"e"],[0,"to"],[-1,"vao na ovaj value\n    # default_product_instance_low_stock_quantity = DecimalProperty('14') ovo sluzi samo da bi se low_stock_quantity na instancama setovao na ovaj value"],[1,"re manager when qty drops below X quantity"],[0,"\n   "]],"start1":43623,"start2":43623,"length1":285,"length2":117}]],"length":106478,"saved":false}
{"ts":1379252410443,"patch":[[{"diffs":[[0,"ecimalProperty('"],[-1,"7"],[1,"13"],[0,"', default=0.00)"]],"start1":43649,"start2":43649,"length1":33,"length2":34}]],"length":106479,"saved":false}
{"ts":1379257278533,"patch":[[{"diffs":[[0,"ode\n"],[-1,"        product_instance.state = var_state\n"],[0,"    "]],"start1":54477,"start2":54477,"length1":51,"length2":8}]],"length":106436,"saved":false}
{"ts":1379257561808,"patch":[[{"diffs":[[0,"ec odlucimo\n"],[1,"    # low_stock_quantity = DecimalProperty('12', default=0.00)# notify store manager when qty drops below X quantity\n"],[0,"    # produc"]],"start1":43461,"start2":43461,"length1":24,"length2":141},{"diffs":[[0,"perty('1"],[-1,"2"],[1,"3"],[0,"') cuvan"]],"start1":43635,"start2":43635,"length1":17,"length2":17},{"diffs":[[0,"emu\n"],[-1,"    # low_stock_quantity = DecimalProperty('13', default=0.00)# notify store manager when qty drops below X quantity\n"],[0,"    "]],"start1":43734,"start2":43734,"length1":125,"length2":8}]],"length":106436,"saved":false}
{"ts":1379257726360,"patch":[[{"diffs":[[0,"it_price"],[1,", state=var_state"],[0,")\n      "]],"start1":44428,"start2":44428,"length1":16,"length2":33}]],"length":106453,"saved":false}
{"ts":1379257762825,"patch":[[{"diffs":[[0,"uired=True)\n    "],[1,"_default_indexed = False\n    pass\n    # Expando\n    #"],[0,"state = ndb.Inte"]],"start1":42241,"start2":42241,"length1":32,"length2":85},{"diffs":[[0,"824\n"],[-1,"    _default_indexed = False\n    pass\n    # Expando\n"],[0,"    "]],"start1":42841,"start2":42841,"length1":60,"length2":8}]],"length":106454,"saved":false}
{"ts":1379257768870,"patch":[[{"diffs":[[0,"do\n    #"],[1," "],[0,"state = "]],"start1":42302,"start2":42302,"length1":16,"length2":17}]],"length":106455,"saved":false}
{"ts":1379257802763,"patch":[[{"diffs":[[0,"s\n    # Expando\n"],[1,"    \n"],[0,"    # state = nd"]],"start1":42289,"start2":42289,"length1":32,"length2":37},{"diffs":[[0,"2473824\n"],[1,"    \n"],[0,"    # mo"]],"start1":42843,"start2":42843,"length1":16,"length2":21}]],"length":106465,"saved":false}
{"ts":1379257852124,"patch":[[{"diffs":[[0,"\n   "],[-1," _default_indexed = False\n    pass\n    # Expando\n    \n    #"],[0," sta"]],"start1":42252,"start2":42252,"length1":67,"length2":8},{"diffs":[[0,"2473824\n    "],[1,"_default_indexed = False\n    pass\n    # Expando"],[0,"\n    # mozda"]],"start1":42784,"start2":42784,"length1":24,"length2":71}]],"length":106453,"saved":false}
{"ts":1379257885871,"patch":[[{"diffs":[[0,"'create', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_te"]],"start1":44593,"start2":44593,"length1":38,"length2":54}]],"length":106469,"saved":false}
{"ts":1379257995819,"patch":[[{"diffs":[[0,"'update', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_te"]],"start1":45428,"start2":45428,"length1":38,"length2":54}]],"length":106485,"saved":false}
{"ts":1379258056185,"patch":[[{"diffs":[[0,"'delete', state="],[-1,"'none'"],[1,"product_template.state"],[0,")\n        object"]],"start1":45895,"start2":45895,"length1":38,"length2":54}]],"length":106501,"saved":false}
{"ts":1379258093792,"patch":[[{"diffs":[[0,"eta, pa se treba"],[-1,"ti"],[0," ustvari pozivat"]],"start1":46144,"start2":46144,"length1":34,"length2":32}]],"length":106499,"saved":false}
{"ts":1379258105454,"patch":[[{"diffs":[[0,"umvea da su svi "],[-1,"potomci"],[1,"children"],[0," izbrisani!!\n   "]],"start1":46414,"start2":46414,"length1":39,"length2":40}]],"length":106500,"saved":false}
{"ts":1379258206619,"patch":[[{"diffs":[[0,"es)\n"],[-1,"        \n        \n        \n        \n"],[0,"    "]],"start1":47015,"start2":47015,"length1":44,"length2":8},{"diffs":[[0," for key in "],[1,"product_template."],[0,"product_temp"]],"start1":47046,"start2":47046,"length1":24,"length2":41}]],"length":106481,"saved":false}
{"ts":1379258232003,"patch":[[{"diffs":[[0,"?\n    # "],[-1,"product_template_"],[0,"variants"]],"start1":42888,"start2":42888,"length1":33,"length2":16},{"diffs":[[0,"x\n    # "],[-1,"product_template_"],[0,"contents"]],"start1":42979,"start2":42979,"length1":33,"length2":16},{"diffs":[[0,"x\n    # "],[-1,"product_template_"],[0,"images ="]],"start1":43070,"start2":43070,"length1":33,"length2":16}]],"length":106430,"saved":false}
{"ts":1379258467120,"patch":[[{"diffs":[[0," 'unpublished'.\n"],[1,"        # brisemo postojece product instance\n"],[0,"        product_"]],"start1":46805,"start2":46805,"length1":32,"length2":77},{"diffs":[[0,"    "],[-1,"variants []\n        for key in product_template.product_template_variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] ="],[1,"# pripremamo listu varianti za"],[0," product"],[-1,"_"],[1," "],[0,"template"],[-1,"_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n       "],[1,"\n        # primer:\n        '''"],[0," var"]],"start1":47017,"start2":47017,"length1":422,"length2":85},{"diffs":[[0,"alse},\n        ]"],[1,"'''\n        variants []\n        for key in product_template.variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] = product_template_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n        "],[0,"\n               "]],"start1":47596,"start2":47596,"length1":32,"length2":442}]],"length":106548,"saved":false}
{"ts":1379258491175,"patch":[[{"diffs":[[0,"    ]'''"],[1," "],[0,"\n       "]],"start1":47607,"start2":47607,"length1":16,"length2":17}]],"length":106549,"saved":false}
{"ts":1379258494965,"patch":[[{"diffs":[[0,"    ]'''"],[-1," "],[0,"\n       "]],"start1":47607,"start2":47607,"length1":17,"length2":16}]],"length":106548,"saved":false}
{"ts":1379258555985,"patch":[[{"diffs":[[0,"        "],[-1,"'''"],[1,"\"\"\""],[0," variant"]],"start1":47087,"start2":47087,"length1":19,"length2":19},{"diffs":[[0,"       ]"],[-1,"'''"],[1,"\"\"\""],[0,"\n       "]],"start1":47604,"start2":47604,"length1":19,"length2":19}]],"length":106548,"saved":false}
{"ts":1379258604026,"patch":[[{"diffs":[[0,"        "],[-1,"\"\"\""],[1,"#"],[0," variant"]],"start1":47087,"start2":47087,"length1":19,"length2":17},{"diffs":[[0," = [\n           "],[1," #"],[0," {'name': 'Color"]],"start1":47105,"start2":47105,"length1":32,"length2":34},{"diffs":[[0,"se},\n           "],[1," #"],[0," {'name': 'Size'"]],"start1":47226,"start2":47226,"length1":32,"length2":34},{"diffs":[[0,"se},\n           "],[1," #"],[0," {'name': 'Fabri"]],"start1":47350,"start2":47350,"length1":32,"length2":34},{"diffs":[[0,"        "],[1," #"],[0," {'name'"]],"start1":47474,"start2":47474,"length1":16,"length2":18},{"diffs":[[0,"    "],[-1,"]\"\"\""],[1,"# ]"],[0,"\n   "]],"start1":47613,"start2":47613,"length1":12,"length2":11}]],"length":106553,"saved":false}
{"ts":1379258656996,"patch":[[{"diffs":[[0,"e},\n"],[-1,"            # {'name': 'Motif', 'options': ['Lace', 'Smooth', 'ZigZag', 'Butterfly'], 'position': 0, 'increment': False, 'reset': False},\n"],[0,"    "]],"start1":47467,"start2":47467,"length1":146,"length2":8}]],"length":106415,"saved":false}
{"ts":1379258770662,"patch":[[{"diffs":[[0,"    "],[-1,"\n        \n                "],[1,"# generisemo sve moguce kombinacije variacija koje product instance moze imati"],[0,"\n   "]],"start1":47876,"start2":47876,"length1":34,"length2":86},{"diffs":[[0,"y:\n            i"],[-1,"terator"],[0,""],[1,""],[0," = 0\n           "]],"start1":48028,"start2":48028,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['position'] +="]],"start1":48137,"start2":48137,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['increment'] ="]],"start1":48186,"start2":48186,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['posit"]],"start1":48283,"start2":48283,"length1":23,"length2":16},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['reset'] = Fal"]],"start1":48323,"start2":48323,"length1":39,"length2":32},{"diffs":[[0,"               i"],[-1,"terator"],[0," += 1\n          "]],"start1":48359,"start2":48359,"length1":39,"length2":32},{"diffs":[[0,"       i"],[-1,"terator"],[0," = 0\n   "]],"start1":48407,"start2":48407,"length1":23,"length2":16},{"diffs":[[0,"   if (i"],[-1,"terator"],[0,""],[1,""],[0," == 0):\n"]],"start1":48537,"start2":48537,"length1":23,"length2":16},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['reset'] = Tru"]],"start1":48642,"start2":48642,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0," + 1]['increment"]],"start1":48694,"start2":48694,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['incre"]],"start1":48788,"start2":48788,"length1":23,"length2":16},{"diffs":[[0,"n(variants) == i"],[-1,"terator"],[0," + 1):\n         "]],"start1":48846,"start2":48846,"length1":39,"length2":32},{"diffs":[[0,"  if (variants[i"],[-1,"terator"],[0," - 1]['reset']):"]],"start1":48962,"start2":48962,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['reset"]],"start1":49025,"start2":49025,"length1":23,"length2":16},{"diffs":[[0,"riants[i"],[-1,"terator"],[0," + 1]['i"]],"start1":49081,"start2":49081,"length1":23,"length2":16},{"diffs":[[0,"ts) == i"],[-1,"terator"],[0," + 1):\n "]],"start1":49147,"start2":49147,"length1":23,"length2":16},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,""],[1,""],[0," - 1]['r"]],"start1":49263,"start2":49263,"length1":23,"length2":16},{"diffs":[[0,"   i"],[-1,"terator"],[0,""],[1,""],[0," += "]],"start1":49376,"start2":49376,"length1":15,"length2":8}]],"length":106341,"saved":false}
{"ts":1379259031916,"patch":[[{"diffs":[[0,"e imati\n"],[1,"        # primer:\n        # variant_signatures = [\n            # {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            # {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        # ]\n"],[0,"        "]],"start1":47951,"start2":47951,"length1":16,"length2":1333},{"diffs":[[0,"    "],[-1,"variant_signatures = [\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        ]"],[0,"\n   "]],"start1":50759,"start2":50759,"length1":1258,"length2":8}]],"length":106408,"saved":false}
{"ts":1379259056172,"patch":[[{"diffs":[[0," primer:\n       "],[-1," #"],[0," variants = [\n  "]],"start1":47078,"start2":47078,"length1":34,"length2":32},{"diffs":[[0," = [\n           "],[-1," #"],[0," {'name': 'Color"]],"start1":47103,"start2":47103,"length1":34,"length2":32},{"diffs":[[0,"se},\n           "],[-1," #"],[0," {'name': 'Size'"]],"start1":47222,"start2":47222,"length1":34,"length2":32},{"diffs":[[0,"        "],[-1," #"],[0," {'name'"]],"start1":47352,"start2":47352,"length1":18,"length2":16},{"diffs":[[0," False},\n       "],[-1," #"],[0," ]\n        varia"]],"start1":47454,"start2":47454,"length1":34,"length2":32}]],"length":106398,"saved":false}
{"ts":1379259120170,"patch":[[{"diffs":[[0,"   \n"],[-1,"        \n        \n            # ako nakon ove variante ima jos varianti onda mi treba broj option-sa u varianti i prvi option iz variante, \n            # ali treba zapamtiti redni broj option-a koji je trenutno izabran\n            \n            # \n            # treba mi index ucatne variante i treba mi ukupan broj varianti\n            # ako iza ove \n            for option in product_template_variant.options:\n                \n                \n                \n                \n                \n"],[0,"    "]],"start1":50741,"start2":50741,"length1":504,"length2":8}]],"length":105902,"saved":false}
{"ts":1379259209932,"patch":[[{"diffs":[[0,"primer:\n"],[-1,"        "],[0,"variants"]],"start1":47079,"start2":47079,"length1":24,"length2":16},{"diffs":[[0,"ariants = [\n"],[-1,"        "],[0,"    {'name':"]],"start1":47088,"start2":47088,"length1":32,"length2":24},{"diffs":[[0,"t': False},\n"],[-1,"        "],[0,"    {'name':"]],"start1":47199,"start2":47199,"length1":32,"length2":24},{"diffs":[[0,"False},\n"],[-1,"        "],[0,"    {'na"]],"start1":47317,"start2":47317,"length1":24,"length2":16},{"diffs":[[0,"False},\n"],[-1,"        "],[0,"]\n      "]],"start1":47423,"start2":47423,"length1":24,"length2":16},{"diffs":[[0,"    # ]\n"],[-1,"        "],[0,"variant_"]],"start1":49218,"start2":49218,"length1":24,"length2":16},{"diffs":[[0,"es = []\n"],[-1,"        "],[0,"stay = T"]],"start1":49242,"start2":49242,"length1":24,"length2":16},{"diffs":[[0," = True\n"],[-1,"        "],[0,"while st"]],"start1":49254,"start2":49254,"length1":24,"length2":16},{"diffs":[[0,"e stay:\n"],[-1,"        "],[0,"    i = "]],"start1":49266,"start2":49266,"length1":24,"length2":16},{"diffs":[[0,":\n    i = 0\n"],[-1,"        "],[0,"    for item"]],"start1":49272,"start2":49272,"length1":32,"length2":24},{"diffs":[[0,"ts:\n        "],[-1,"   "],[-1,"     "],[0,"if (item['in"]],"start1":49306,"start2":49306,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1,"     "],[0,"variants[i]["]],"start1":49342,"start2":49342,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[-1,"    "],[0,"variants[i]["]],"start1":49383,"start2":49383,"length1":32,"length2":24},{"diffs":[[0,"lse\n        "],[-1,"    "],[-1,"    "],[0,"if (item['re"]],"start1":49424,"start2":49424,"length1":32,"length2":24},{"diffs":[[0,"['reset']):\n"],[-1,"        "],[0,"            "]],"start1":49444,"start2":49444,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"     "],[-1,"   "],[0,"variants[i]["]],"start1":49496,"start2":49496,"length1":32,"length2":24},{"diffs":[[0,"t'] = False\n"],[-1,"        "],[0,"        i +="]],"start1":49525,"start2":49525,"length1":32,"length2":24},{"diffs":[[0,"     i += 1\n"],[-1,"        "],[0,"    dic = {}"]],"start1":49540,"start2":49540,"length1":32,"length2":24},{"diffs":[[0,"   dic = {}\n"],[-1,"        "],[0,"    i = 0\n  "]],"start1":49553,"start2":49553,"length1":32,"length2":24},{"diffs":[[0,"}\n    i = 0\n"],[-1,"        "],[0,"    for item"]],"start1":49563,"start2":49563,"length1":32,"length2":24},{"diffs":[[0,"n variants:\n"],[-1,"        "],[0,"        dic["]],"start1":49589,"start2":49589,"length1":32,"length2":24},{"diffs":[[0,"tion']]\n"],[-1,"        "],[0,"        "]],"start1":49655,"start2":49655,"length1":24,"length2":16},{"diffs":[[0,"            "],[-1,"        "],[0,"if (len(item"]],"start1":49684,"start2":49684,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"        "],[0,"variants[i]["]],"start1":49751,"start2":49751,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1," "],[-1,"       "],[0,"variants[i +"]],"start1":49795,"start2":49795,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"        "],[0,"else:\n  "]],"start1":49847,"start2":49847,"length1":24,"length2":16},{"diffs":[[0,"            "],[-1,"  "],[-1,"      "],[0,"variants[i]["]],"start1":49865,"start2":49865,"length1":32,"length2":24},{"diffs":[[0,"rue\n        "],[-1,"   "],[-1,"     "],[0,"elif not (le"]],"start1":49905,"start2":49905,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1,"     "],[0,"if (len(item"]],"start1":49952,"start2":49952,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"        "],[0,"if (variants"]],"start1":50019,"start2":50019,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[-1,"    "],[0,"variants[i]["]],"start1":50070,"start2":50070,"length1":32,"length2":24},{"diffs":[[0,"et'] = True\n"],[-1,"        "],[0,"            "]],"start1":50098,"start2":50098,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"     "],[-1,"   "],[0,"elif (le"]],"start1":50166,"start2":50166,"length1":24,"length2":16},{"diffs":[[0," == i + 1):\n"],[-1,"        "],[0,"            "]],"start1":50193,"start2":50193,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"      "],[-1,"  "],[0,"if (variants"]],"start1":50272,"start2":50272,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"        "],[0,"stay = F"]],"start1":50327,"start2":50327,"length1":24,"length2":16},{"diffs":[[0,"        "],[-1,"       "],[-1," "],[0,"break\n"],[-1,"        "],[0,"        "]],"start1":50360,"start2":50360,"length1":38,"length2":22},{"diffs":[[0,"     i += 1\n"],[-1,"        "],[0,"    variant_"]],"start1":50377,"start2":50377,"length1":32,"length2":24}]],"length":105590,"saved":false}
{"ts":1379259304950,"patch":[[{"diffs":[[0,"primer:\n"],[1,"        # "],[0,"variants"]],"start1":47079,"start2":47079,"length1":16,"length2":26},{"diffs":[[0,"ants = [\n   "],[1,"         #"],[0," {'name': 'C"]],"start1":47101,"start2":47101,"length1":24,"length2":34},{"diffs":[[0,"et': False},\n   "],[1,"         #"],[0," {'name': 'Size'"]],"start1":47218,"start2":47218,"length1":32,"length2":42},{"diffs":[[0,"se},\n   "],[1,"         #"],[0," {'name'"]],"start1":47350,"start2":47350,"length1":16,"length2":26},{"diffs":[[0,"False},\n"],[1,"        # "],[0,"]\n      "]],"start1":47463,"start2":47463,"length1":16,"length2":26},{"diffs":[[0,"    # ]\n"],[1,"        "],[0,"variant_"]],"start1":49268,"start2":49268,"length1":16,"length2":24},{"diffs":[[0,"es = []\n"],[1,"        "],[0,"stay = T"]],"start1":49300,"start2":49300,"length1":16,"length2":24},{"diffs":[[0," = True\n"],[1,"        "],[0,"while st"]],"start1":49320,"start2":49320,"length1":16,"length2":24},{"diffs":[[0,"e stay:\n"],[1,"        "],[0,"    i = "]],"start1":49340,"start2":49340,"length1":16,"length2":24},{"diffs":[[0,"          i = 0\n"],[1,"        "],[0,"    for item in "]],"start1":49350,"start2":49350,"length1":32,"length2":40},{"diffs":[[0,"riants:\n        "],[1,"   "],[1,"     "],[0,"if (item['increm"]],"start1":49392,"start2":49392,"length1":32,"length2":40},{"diffs":[[0,"]):\n            "],[1,"   "],[1,"     "],[0,"variants[i]['pos"]],"start1":49436,"start2":49436,"length1":32,"length2":40},{"diffs":[[0,"= 1\n            "],[1,"    "],[1,"    "],[0,"variants[i]['inc"]],"start1":49485,"start2":49485,"length1":32,"length2":40},{"diffs":[[0,"= False\n        "],[1,"    "],[1,"    "],[0,"if (item['reset'"]],"start1":49534,"start2":49534,"length1":32,"length2":40},{"diffs":[[0,"item['reset']):\n"],[1,"        "],[0,"            vari"]],"start1":49562,"start2":49562,"length1":32,"length2":40},{"diffs":[[0,"= 0\n            "],[1,"     "],[1,"   "],[0,"variants[i]['res"]],"start1":49622,"start2":49622,"length1":32,"length2":40},{"diffs":[[0,"reset'] = False\n"],[1,"        "],[0,"        i += 1\n "]],"start1":49659,"start2":49659,"length1":32,"length2":40},{"diffs":[[0,"     i += 1\n"],[1,"        "],[0,"    dic = {}"]],"start1":49686,"start2":49686,"length1":24,"length2":32},{"diffs":[[0,"   dic = {}\n"],[1,"        "],[0,"    i = 0\n  "]],"start1":49707,"start2":49707,"length1":24,"length2":32},{"diffs":[[0,"      i = 0\n"],[1,"        "],[0,"    for item"]],"start1":49725,"start2":49725,"length1":24,"length2":32},{"diffs":[[0,"em in variants:\n"],[1,"        "],[0,"        dic[item"]],"start1":49755,"start2":49755,"length1":32,"length2":40},{"diffs":[[0,"tion']]\n"],[1,"        "],[0,"        "]],"start1":49833,"start2":49833,"length1":16,"length2":24},{"diffs":[[0,"0):\n            "],[1,"        "],[0,"if (len(item['op"]],"start1":49866,"start2":49866,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"        "],[0,"variants[i]['res"]],"start1":49941,"start2":49941,"length1":32,"length2":40},{"diffs":[[0,"                "],[1," "],[1,"       "],[0,"variants[i + 1]["]],"start1":49993,"start2":49993,"length1":32,"length2":40},{"diffs":[[0,"        "],[1,"        "],[0,"else:\n  "]],"start1":50057,"start2":50057,"length1":16,"length2":24},{"diffs":[[0,"                "],[1,"  "],[1,"      "],[0,"variants[i]['inc"]],"start1":50079,"start2":50079,"length1":32,"length2":40},{"diffs":[[0,"rue\n        "],[1,"   "],[1,"     "],[0,"elif not (le"]],"start1":50131,"start2":50131,"length1":24,"length2":32},{"diffs":[[0,"1):\n            "],[1,"   "],[1,"     "],[0,"if (len(item['op"]],"start1":50182,"start2":50182,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"        "],[0,"if (variants[i -"]],"start1":50257,"start2":50257,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"    "],[1,"    "],[0,"variants[i]['res"]],"start1":50316,"start2":50316,"length1":32,"length2":40},{"diffs":[[0,"'reset'] = True\n"],[1,"        "],[0,"                "]],"start1":50352,"start2":50352,"length1":32,"length2":40},{"diffs":[[0,"rue\n        "],[1,"     "],[1,"   "],[0,"elif (len(va"]],"start1":50428,"start2":50428,"length1":24,"length2":32},{"diffs":[[0,"nts) == i + 1):\n"],[1,"        "],[0,"            if ("]],"start1":50463,"start2":50463,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"      "],[1,"  "],[0,"if (variants[i -"]],"start1":50550,"start2":50550,"length1":32,"length2":40},{"diffs":[[0,"            "],[1,"        "],[0,"stay = False"]],"start1":50613,"start2":50613,"length1":24,"length2":32},{"diffs":[[0,"                "],[1,"       "],[1," "],[0,"break\n"],[1,"        "],[0,"        i += 1\n "]],"start1":50650,"start2":50650,"length1":38,"length2":54},{"diffs":[[0,"     i += 1\n"],[1,"        "],[0,"    variant_"]],"start1":50691,"start2":50691,"length1":24,"length2":32}]],"length":105912,"saved":false}
{"ts":1379259355653,"patch":[[{"diffs":[[0,"'Silk'},"],[-1,"{'name"],[0,"\n       "]],"start1":48412,"start2":48412,"length1":22,"length2":16}]],"length":105906,"saved":false}
{"ts":1379259671184,"patch":[[{"diffs":[[0,"ic)\n        "],[1,"if (len(variant_signatures) > 1000):\n            "],[0,"\n        pro"]],"start1":50736,"start2":50736,"length1":24,"length2":73}]],"length":105955,"saved":false}
{"ts":1379259740407,"patch":[[{"diffs":[[0,"res.append(dic)\n"],[1,"        # postavljamo limit na broju product instanci koje mogu biti generisane\n"],[0,"        if (len("]],"start1":50724,"start2":50724,"length1":32,"length2":112}]],"length":106035,"saved":false}
{"ts":1379260490821,"patch":[[{"diffs":[[0,"            "],[-1,"\n"],[1,"product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n        else:\n            product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n            i = 0\n            for variant_signature in variant_signatures:\n                \n        "],[0,"        prod"]],"start1":50865,"start2":50865,"length1":25,"length2":756}]],"length":106766,"saved":false}
{"ts":1379260570769,"patch":[[{"diffs":[[0,"            "],[1,"code = product_template_key + \"-\" + i"],[0,"\n           "]],"start1":51588,"start2":51588,"length1":24,"length2":61}]],"length":106803,"saved":false}
{"ts":1379260603155,"patch":[[{"diffs":[[0,"            "],[1,"var_"],[0,"code = produ"]],"start1":51588,"start2":51588,"length1":24,"length2":28},{"diffs":[[0,"var_code"],[-1,", state=var_state"],[0,")\n      "]],"start1":51727,"start2":51727,"length1":33,"length2":16},{"diffs":[[0,"red=True"],[-1,", indexed=False"],[0,") overid"]],"start1":53115,"start2":53115,"length1":31,"length2":16}]],"length":106775,"saved":false}
{"ts":1379260677032,"patch":[[{"diffs":[[0,"r_code)\n"],[1,"        "],[0,"        "]],"start1":51729,"start2":51729,"length1":16,"length2":24},{"diffs":[[0,"_instance.put()\n"],[1,"        "],[0,"        object_l"]],"start1":51783,"start2":51783,"length1":32,"length2":40},{"diffs":[[0,"'create', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_in"]],"start1":51891,"start2":51891,"length1":38,"length2":54},{"diffs":[[0,"oduct_instance)\n"],[1,"        "],[0,"        object_l"]],"start1":51937,"start2":51937,"length1":32,"length2":40}]],"length":106815,"saved":false}
{"ts":1379260708257,"patch":[[{"diffs":[[0,"object_log.put()"],[1,"\n                i += 1"],[0,"\n\n# done!\nclass "]],"start1":51969,"start2":51969,"length1":32,"length2":55}]],"length":106838,"saved":false}
{"ts":1379260771421,"patch":[[{"diffs":[[0,"nerisane"],[1," i na osnovu limida odlucujemo da li pravimo instance ili samo pamtimo broj varijacija"],[0,"\n       "]],"start1":50811,"start2":50811,"length1":16,"length2":102}]],"length":106924,"saved":false}
{"ts":1379260833282,"patch":[[{"diffs":[[0," 'unpublished'.\n"],[1,"        # ova funkcija ce se u potpunosti oslanjati na task queue kako bi se resio problem velikog broja instanci.\n"],[0,"        # brisem"]],"start1":46805,"start2":46805,"length1":32,"length2":147}]],"length":107039,"saved":false}
{"ts":1379260952461,"patch":[[{"diffs":[[0,"nerisane"],[1,","],[0," i na os"]],"start1":50926,"start2":50926,"length1":16,"length2":17},{"diffs":[[0,"ovu limi"],[-1,"d"],[1,"t"],[0,"a odlucu"]],"start1":50944,"start2":50944,"length1":17,"length2":17},{"diffs":[[0,"rijacija"],[1," u product template"],[0,"\n       "]],"start1":51013,"start2":51013,"length1":16,"length2":35}]],"length":107059,"saved":false}
{"ts":1379260987126,"patch":[[{"diffs":[[0,"ic)\n"],[-1,"        # postavljamo limit na broju product instanci koje mogu biti generisane, i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template\n        if (len(variant_signatures) > 1000):\n    "],[0,"    "]],"start1":50851,"start2":50851,"length1":243,"length2":8},{"diffs":[[0,"atures)\n        "],[-1,"    "],[0,"product_template"]],"start1":50921,"start2":50921,"length1":36,"length2":32},{"diffs":[[0,"_template.put()\n"],[-1,"    "],[0,"        object_l"]],"start1":50967,"start2":50967,"length1":36,"length2":32},{"diffs":[[0,"mplate)\n        "],[-1,"    "],[0,"object_log.put()"]],"start1":51121,"start2":51121,"length1":36,"length2":32},{"diffs":[[0,"object_log.put()"],[1,"\n        # postavljamo limit na broju product instanci koje mogu biti generisane, i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template\n        if (len(variant_signatures) > 1000):\n            return"],[0,"\n        else:\n "]],"start1":51137,"start2":51137,"length1":32,"length2":282}]],"length":107062,"saved":false}
{"ts":1379261028991,"patch":[[{"diffs":[[0,"es) "],[-1,">"],[1,"<="],[0," 1000):\n"],[-1,"            return\n        else:\n            product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n"],[0,"    "]],"start1":51372,"start2":51372,"length1":365,"length2":18}]],"length":106715,"saved":false}
{"ts":1379261039793,"patch":[[{"diffs":[[0,"sane"],[-1,", i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template"],[0,"\n   "]],"start1":51229,"start2":51229,"length1":114,"length2":8}]],"length":106609,"saved":false}
{"ts":1379261184829,"patch":[[{"diffs":[[0,"uct instance"],[1," - ovde imamo onaj isti problem oko nelogiranja izbrisanih product-a kao i prilikom brisanja product_template-a"],[0,"\n        pro"]],"start1":46968,"start2":46968,"length1":24,"length2":135},{"diffs":[[0,"nt_key, action='"],[-1,"update"],[1,"generate_product_instances"],[0,"', state=product"]],"start1":51163,"start2":51163,"length1":38,"length2":58}]],"length":106740,"saved":false}
{"ts":1379261190011,"patch":[[{"diffs":[[0,"t-a kao "],[1,"sto je "],[0,"i prilik"]],"start1":47045,"start2":47045,"length1":16,"length2":23}]],"length":106747,"saved":false}
{"ts":1379261226307,"patch":[[{"diffs":[[0,"likog broja "],[1,"pravljenja/brisanja "],[0,"instanci.\n  "]],"start1":46914,"start2":46914,"length1":24,"length2":44}]],"length":106767,"saved":false}
{"ts":1379261598276,"patch":[[{"diffs":[[0,"ce -"],[-1," ovde"],[0," imamo "],[-1,"onaj isti problem oko"],[1,"problem sto se brisanje product instanci"],[0," ne"],[1," "],[0,"log"],[-1,"iranja izbrisanih product-a kao "],[1,"uje\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_instances)\n        # brisemo po"],[0,"sto"],[-1," "],[0,"je"],[-1," i prilikom"],[1,"ce product inventory logove - imamo problem sto se"],[0," brisanj"],[-1,"a"],[1,"e"],[0," product"],[-1,"_template-a"],[1," inventory logova ne loguje"],[0,"\n   "]],"start1":46998,"start2":46998,"length1":124,"length2":332},{"diffs":[[0,"      product_in"],[-1,"stance"],[1,"ventory_log"],[0,"s = ProductInsta"]],"start1":47329,"start2":47329,"length1":38,"length2":43},{"diffs":[[0,"logs = ProductIn"],[-1,"stance"],[1,"ventoryLog"],[0,".query(ancestor="]],"start1":47353,"start2":47353,"length1":38,"length2":42},{"diffs":[[0,"i(product_in"],[-1,"stances)"],[1,"ventory_logs)\n        # brisemo postojece product inventory adjustment-e - imamo problem sto se brisanje product inventory adjustment-a ne loguje"],[0,"\n        # p"]],"start1":47462,"start2":47462,"length1":32,"length2":169}]],"length":107121,"saved":false}
{"ts":1379261634659,"patch":[[{"diffs":[[0,"ent-a ne loguje\n"],[1,"        product_inventory_adjustments = ProductInventoryAdjustment.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_inventory_adjustments)\n"],[0,"        # pripre"]],"start1":47604,"start2":47604,"length1":32,"length2":214}]],"length":107303,"saved":false}
{"ts":1379262915684,"patch":[[{"diffs":[[0,"EFAULT_STATE = '"],[-1,"active"],[1,"unpublished"],[0,"'\n    \n    OBJEC"]],"start1":33228,"start2":33228,"length1":38,"length2":43}]],"length":107308,"saved":false}
{"ts":1379262981512,"patch":[[{"diffs":[[0,"EFAULT_STATE = '"],[-1,"active"],[1,"open"],[0,"'\n    \n    OBJEC"]],"start1":15837,"start2":15837,"length1":38,"length2":36}]],"length":107306,"saved":false}
{"ts":1379263429520,"patch":[[{"diffs":[[0,"    "],[-1,"cost = Decimal"],[1,"state = ndb.Integer"],[0,"Prop"]],"start1":32910,"start2":32910,"length1":22,"length2":27},{"diffs":[[0,"True"],[-1,", "],[1,")\n    _default_"],[0,"indexed"],[-1,"="],[1," = "],[0,"False"],[-1,")"],[0,"\n    "],[-1,"state = ndb.Integer"],[1,"pass\n    # Expando\n    # cost = Decimal"],[0,"Prop"]],"start1":32956,"start2":32956,"length1":48,"length2":82},{"diffs":[[0,"ecimalProperty('"],[-1,"7"],[1,"6"],[0,"', required=True"]],"start1":33028,"start2":33028,"length1":33,"length2":33},{"diffs":[[0,"True"],[-1,")\n    _default_"],[1,", "],[0,"indexed"],[-1," = "],[1,"="],[0,"False"],[-1,"\n    pass\n    # Expando"],[1,")"],[0,"\n   "]],"start1":33057,"start2":33057,"length1":61,"length2":24},{"diffs":[[0,"ija kreira novi "],[-1,"store"],[1,"catalog"],[0,".\n    @ndb.trans"]],"start1":34345,"start2":34345,"length1":37,"length2":39},{"diffs":[[0,"    "],[-1,"store = Store(name=var_name, logo=var_logo, state='open'"],[1,"catalog = Catalog(store=store_key, name=var_name, publish=var_publish, discontinue=var_discontinue, cover=var_cover, cost=var_cost"],[0,")\n  "]],"start1":34581,"start2":34581,"length1":64,"length2":138}]],"length":107384,"saved":false}
{"ts":1379263436984,"patch":[[{"diffs":[[0,"equired=True"],[-1,", indexed=False"],[0,")\n    # Sear"]],"start1":33049,"start2":33049,"length1":39,"length2":24}]],"length":107369,"saved":false}
{"ts":1379263700681,"patch":[[{"diffs":[[0,"dozvolu 'create-"],[-1,"Store"],[1,"Catalog"],[0,"'.\n        # akc"]],"start1":34467,"start2":34467,"length1":37,"length2":39},{"diffs":[[0,"er, "],[-1,"cost=var_cost)\n        store_key = store"],[1,"state='unpublished')\n        catalog_key = catalog"],[0,".put"]],"start1":34685,"start2":34685,"length1":48,"length2":58},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":34768,"start2":34768,"length1":37,"length2":39},{"diffs":[[0,"'create', state="],[-1,"store"],[1,"catalog"],[0,".state, log=stor"]],"start1":34821,"start2":34821,"length1":37,"length2":39},{"diffs":[[0,"alog.state, log="],[-1,"store"],[1,"catalog"],[0,")\n        object"]],"start1":34840,"start2":34840,"length1":37,"length2":39},{"diffs":[[0,"urira postojeci "],[-1,"store"],[1,"catalog"],[0,".\n    @ndb.trans"]],"start1":34914,"start2":34914,"length1":37,"length2":39},{"diffs":[[0,"dozvolu 'update-"],[-1,"Store"],[1,"Catalog"],[0,"'.\n        # akc"]],"start1":35051,"start2":35051,"length1":37,"length2":39},{"diffs":[[0,"e == 'active' i "],[-1,"store"],[1,"catalog"],[0,".state == 'open'"]],"start1":35133,"start2":35133,"length1":37,"length2":39},{"diffs":[[0,"== '"],[-1,"open'.\n        store.name = var_name\n        store.logo = var_logo"],[1,"unpublished'.\n        catalog.store = var_name\n        catalog.name = var_logo\n        catalog.publish = var_publish\n        catalog\n        catalog\n        "],[0,"\n   "]],"start1":35163,"start2":35163,"length1":74,"length2":165},{"diffs":[[0,"bject_log.put()\n"],[1,"        catalog.cover = \n"],[0,"    \n    # Ova a"]],"start1":38277,"start2":38277,"length1":32,"length2":57}]],"length":107509,"saved":false}
{"ts":1379263726295,"patch":[[{"diffs":[[0,"    "],[-1,"cover = blobstore.BlobKey"],[1,"state = ndb.Integer"],[0,"Prop"]],"start1":32818,"start2":32818,"length1":33,"length2":27},{"diffs":[[0,"rue)"],[-1,"# blob ce se implementirati na GCS\n    state = ndb.Integer"],[1,"\n    _default_indexed = False\n    pass\n    # Expando\n    # cover = blobstore.BlobKey"],[0,"Prop"]],"start1":32865,"start2":32865,"length1":66,"length2":92},{"diffs":[[0,"lobKeyProperty('"],[-1,"6"],[1,"5"],[0,"', required=True"]],"start1":32947,"start2":32947,"length1":33,"length2":33},{"diffs":[[0,"rue)"],[-1,"\n    _default_indexed = False\n    pass\n    # Expando"],[1,"# blob ce se implementirati na GCS"],[0,"\n   "]],"start1":32977,"start2":32977,"length1":60,"length2":42}]],"length":107511,"saved":false}
{"ts":1379263739459,"patch":[[{"diffs":[[0,"lobKeyProperty('"],[-1,"5"],[1,"6"],[0,"', required=True"]],"start1":32947,"start2":32947,"length1":33,"length2":33},{"diffs":[[0,"ecimalProperty('"],[-1,"6"],[1,"7"],[0,"', required=True"]],"start1":33030,"start2":33030,"length1":33,"length2":33}]],"length":107511,"saved":false}
{"ts":1379263818625,"patch":[[{"diffs":[[0,"nue,"],[-1," cover=var_cover,"],[0," sta"]],"start1":34669,"start2":34669,"length1":25,"length2":8},{"diffs":[[0,"log.store = var_"],[-1,"nam"],[1,"stor"],[0,"e\n        catalo"]],"start1":35178,"start2":35178,"length1":35,"length2":36},{"diffs":[[0,".name = var_"],[-1,"logo"],[1,"name"],[0,"\n        cat"]],"start1":35215,"start2":35215,"length1":28,"length2":28},{"diffs":[[0," catalog"],[-1,"\n        catalog"],[1,".discontinue = var_discontinue\n        catalog.state = var_state"],[0,"\n       "]],"start1":35277,"start2":35277,"length1":32,"length2":80}]],"length":107543,"saved":false}
{"ts":1379264150734,"patch":[[{"diffs":[[0,"    "],[-1,"\n        store_key = store"],[1,"catalog_key = catalog"],[0,".put"]],"start1":35354,"start2":35354,"length1":34,"length2":29},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":35408,"start2":35408,"length1":37,"length2":39},{"diffs":[[0,"'update', state="],[-1,"store"],[1,"catalog"],[0,".state, log=stor"]],"start1":35461,"start2":35461,"length1":37,"length2":39},{"diffs":[[0,"alog.state, log="],[-1,"store"],[1,"catalog"],[0,")\n        object"]],"start1":35480,"start2":35480,"length1":37,"length2":39},{"diffs":[[0,"alog"],[-1,".cover = "],[1,"_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()"],[0,"\n   "]],"start1":38339,"start2":38339,"length1":17,"length2":329}]],"length":107856,"saved":false}
{"ts":1379264246540,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    \n    # Ova a"]],"start1":37766,"start2":37766,"length1":32,"length2":369},{"diffs":[[0,"age_key.delete()"],[1,"\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":39432,"start2":39432,"length1":32,"length2":369}]],"length":108530,"saved":false}
{"ts":1379264293667,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno)\n"],[0,"        catalog_"]],"start1":37766,"start2":37766,"length1":32,"length2":105}]],"length":108603,"saved":false}
{"ts":1379264351191,"patch":[[{"diffs":[[0,"otrebno)"],[1," - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga"],[0,"\n       "]],"start1":37846,"start2":37846,"length1":16,"length2":112},{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n"],[0,"        catalog_"]],"start1":38818,"start2":38818,"length1":32,"length2":201}]],"length":108868,"saved":false}
{"ts":1379264360104,"patch":[[{"diffs":[[0,"ge_key.delete()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n"],[0,"        catalog_"]],"start1":39771,"start2":39771,"length1":32,"length2":201}]],"length":109037,"saved":false}
{"ts":1379264448570,"patch":[[{"diffs":[[0,"ut()"],[-1,"\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# "]],"start1":36173,"start2":36173,"length1":653,"length2":8}]],"length":108392,"saved":false}
{"ts":1379264496607,"patch":[[{"diffs":[[0,"kcija za"],[-1,"tvara otvoren store"],[1,"kljucava unpublished catalog"],[0,". Ovde c"]],"start1":35546,"start2":35546,"length1":35,"length2":44},{"diffs":[[0,"ctional\n    def "],[-1,"c"],[0,"lo"],[-1,"se"],[1,"ck"],[0,"():\n        # ov"]],"start1":35647,"start2":35647,"length1":37,"length2":36}]],"length":108400,"saved":false}
{"ts":1379264631008,"patch":[[{"diffs":[[0,"ic dozvolu '"],[-1,"close-Store"],[1,"publish-Catalog"],[0,"'.\n        #"]],"start1":35739,"start2":35739,"length1":35,"length2":39},{"diffs":[[0,"' i "],[-1,"store.state == 'open'."],[1,"catalog.state == 'unpublished'.\n        catalog.state = 'locked'\n        catalog_key = store.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n    "],[1,"\n"],[0,"    "],[-1,"store"],[1,"# Ova akcija objavljuje locked catalog. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def publish():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'publish-Catalog'.\n        # akcija se moze pozvati samo ako je domain"],[0,".state ="],[1,"="],[0," '"],[-1,"clos"],[1,"active' i catalog.state == 'unpublish"],[0,"ed'"],[1,"."],[0,"\n   "]],"start1":35837,"start2":35837,"length1":61,"length2":713},{"diffs":[[0,"ished'.\n        "],[-1,"store"],[1,"catalog.state = 'locked'\n        catalog"],[0,"_key = store.put"]],"start1":36539,"start2":36539,"length1":37,"length2":72},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":36636,"start2":36636,"length1":37,"length2":39},{"diffs":[[0,"nt_key, action='"],[-1,"c"],[0,"lo"],[-1,"se"],[1,"ck"],[0,"', state=store.s"]],"start1":36674,"start2":36674,"length1":37,"length2":36},{"diffs":[[0,"n='lock', state="],[-1,"store"],[1,"catalog"],[0,".state, message="]],"start1":36687,"start2":36687,"length1":37,"length2":39}]],"length":109094,"saved":false}
{"ts":1379264667971,"patch":[[{"diffs":[[0,"  catalog_key = "],[-1,"store"],[1,"catalog"],[0,".put()\n        o"]],"start1":35912,"start2":35912,"length1":37,"length2":39},{"diffs":[[0,"g.state == '"],[-1,"unpublish"],[1,"lock"],[0,"ed'.\n       "]],"start1":36523,"start2":36523,"length1":33,"length2":28},{"diffs":[[0,"atalog.state = '"],[-1,"lock"],[1,"publish"],[0,"ed'\n        cata"]],"start1":36553,"start2":36553,"length1":36,"length2":39},{"diffs":[[0,"talog_key = "],[-1,"store"],[1,"catalog"],[0,".put()\n     "]],"start1":36590,"start2":36590,"length1":29,"length2":31}]],"length":109096,"saved":false}
{"ts":1379264759301,"patch":[[{"diffs":[[0,"nt_key, action='"],[-1,"lock"],[1,"publish', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija prekida objavljen catalog. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def discontinue():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'discontinue-Catalog'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'published'.\n        catalog.state = 'discontinued'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='discontinue"],[0,"', state=catalog"]],"start1":36676,"start2":36676,"length1":36,"length2":734}]],"length":109794,"saved":false}
{"ts":1379264819978,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    \n    # Ova a"]],"start1":36192,"start2":36192,"length1":32,"length2":421}]],"length":110183,"saved":false}
{"ts":1379264850114,"patch":[[{"diffs":[[0,"d'.\n"],[-1,"        catalog.state = 'locked'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n"],[0,"    "]],"start1":35869,"start2":35869,"length1":343,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        # zakljucavamo catalog\n        catalog.state = 'locked'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        \n"],[0,"    \n    # Ova a"]],"start1":36246,"start2":36246,"length1":32,"length2":407}]],"length":110223,"saved":false}
{"ts":1379264947156,"patch":[[{"diffs":[[0,"cover-om"],[1," - ovde cemo verovatno raditi i presnimavanje entiteta iz store-a za koji je zakacen catalog, i svega ostalog sto je neophodno."],[0,"\n       "]],"start1":35916,"start2":35916,"length1":16,"length2":143}]],"length":110350,"saved":false}
{"ts":1379264991314,"patch":[[{"diffs":[[0,"t()\n    "],[-1,"    \n    "],[0,""],[1,""],[0,"\n    # O"]],"start1":36751,"start2":36751,"length1":25,"length2":16},{"diffs":[[0,"t()\n"],[-1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    "]],"start1":39082,"start2":39082,"length1":514,"length2":8},{"diffs":[[0,"    "],[-1,"    # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n    \n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete()\n        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put"],[1,"\n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete"],[0,"()\n\n"]],"start1":39632,"start2":39632,"length1":1460,"length2":448}]],"length":108823,"saved":false}
{"ts":1379265068396,"patch":[[{"diffs":[[0,", ),\n    }\n    \n"],[1,"    # nedostaju akcije za dupliciranje catalog-a, za clean-up, etc...\n"],[0,"    OBJECT_ACTIO"]],"start1":33804,"start2":33804,"length1":32,"length2":102}]],"length":108893,"saved":false}
{"ts":1379265101469,"patch":[[{"diffs":[[0,"nstance\n\n# done!"],[1," - ovde ce nam trebati kontrola"],[0,"\nclass Catalog(n"]],"start1":32393,"start2":32393,"length1":32,"length2":63}]],"length":108924,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379278251884,"patch":[[{"diffs":[[0,"!\nclass "],[-1,"Role"],[1,"Domain"],[0,"User(ndb"]],"start1":10397,"start2":10397,"length1":20,"length2":22},{"diffs":[[0,"  # "],[-1,"ancestor Role"],[1,"root"],[0," (na"]],"start1":10435,"start2":10435,"length1":21,"length2":12}]],"length":108917,"saved":false}
{"ts":1379278387920,"patch":[[{"diffs":[[0,"tor:"],[-1,"yes - user"],[1,"no - name\n    name = ndb.StringProperty('1', required=True)"],[0,"\n   "]],"start1":10585,"start2":10585,"length1":18,"length2":67},{"diffs":[[0,"db.KeyProperty('"],[-1,"1"],[1,"2"],[0,"', kind=User, re"]],"start1":10661,"start2":10661,"length1":33,"length2":33},{"diffs":[[0," required=True)\n"],[1,"    roles = ndb.KeyProperty('2', kind=Role, repeated=True)\n"],[0,"    state = ndb."]],"start1":10691,"start2":10691,"length1":32,"length2":91},{"diffs":[[0,"ntegerProperty('"],[-1,"2"],[1,"3"],[0,"', required=True"]],"start1":10783,"start2":10783,"length1":33,"length2":33}]],"length":109025,"saved":false}
{"ts":1379278505319,"patch":[[{"diffs":[[0,"quired=True)"],[1,"# ovo je deskriptiv koji administratoru sluzi kako bi lakse spoznao usera"],[0,"\n    user = "]],"start1":10636,"start2":10636,"length1":24,"length2":97},{"diffs":[[0,"EFAULT_STATE = '"],[-1,"none"],[1,"invited"],[0,"'\n    \n    OBJEC"]],"start1":10945,"start2":10945,"length1":36,"length2":39}]],"length":109101,"saved":false}
{"ts":1379279940595,"patch":[[{"diffs":[[0,"ainUser(ndb."],[-1,"Model"],[1,"Expando"],[0,"):\n    \n    "]],"start1":10408,"start2":10408,"length1":29,"length2":31},{"diffs":[[0,"db.KeyProperty('"],[-1,"2"],[1,"3"],[0,"', kind=Role, re"]],"start1":10795,"start2":10795,"length1":33,"length2":33},{"diffs":[[0,"ntegerProperty('"],[-1,"3"],[1,"4"],[0,"', required=True"]],"start1":10858,"start2":10858,"length1":33,"length2":33}]],"length":109103,"saved":false}
{"ts":1379279982432,"patch":[[{"diffs":[[0,"ccepted\n"],[1,"    _default_indexed = False\n    pass\n    #Expando\n"],[0,"    \n   "]],"start1":10903,"start2":10903,"length1":16,"length2":67}]],"length":109154,"saved":false}
{"ts":1379280086285,"patch":[[{"diffs":[[0,"'invite-"],[-1,"Role"],[1,"Domain"],[0,"User'.\n "]],"start1":11924,"start2":11924,"length1":20,"length2":22},{"diffs":[[0,"r = "],[-1,"RoleUser(parent=role_key, "],[1,"DomainUser("],[0,"id='"]],"start1":12032,"start2":12032,"length1":34,"length2":19},{"diffs":[[0,"472829',"],[1," name=var_name,"],[0," user='1"]],"start1":12057,"start2":12057,"length1":16,"length2":31}]],"length":109156,"saved":false}
{"ts":1379280098925,"patch":[[{"diffs":[[0,"e, user="],[-1,"'123673472829'"],[1,"var_user"],[0,", state="]],"start1":12078,"start2":12078,"length1":30,"length2":24}]],"length":109150,"saved":false}
{"ts":1379280151852,"patch":[[{"diffs":[[0,"ctive'.\n        "],[-1,"role"],[1,"domain"],[0,"_user = DomainUs"]],"start1":12008,"start2":12008,"length1":36,"length2":38},{"diffs":[[0,"(id="],[-1,"'123673472829'"],[1,"var_user.id()"],[0,", na"]],"start1":12048,"start2":12048,"length1":22,"length2":21}]],"length":109151,"saved":false}
{"ts":1379280358137,"patch":[[{"diffs":[[0,"a novog usera u "],[-1,"rol"],[1,"domen"],[0,"u\n    @ndb.trans"]],"start1":11783,"start2":11783,"length1":35,"length2":37},{"diffs":[[0,"vited')\n        "],[-1,"role"],[1,"domain"],[0,"_user_key = role"]],"start1":12108,"start2":12108,"length1":36,"length2":38},{"diffs":[[0,"main_user_key = "],[-1,"role"],[1,"domain"],[0,"_user.put()\n    "]],"start1":12126,"start2":12126,"length1":36,"length2":38},{"diffs":[[0,"bjectLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, agent"]],"start1":12182,"start2":12182,"length1":36,"length2":38},{"diffs":[[0,"'invite', state="],[-1,"role"],[1,"domain"],[0,"_user.state, log"]],"start1":12239,"start2":12239,"length1":36,"length2":38},{"diffs":[[0,"te, log="],[-1,"role"],[1,"domain"],[0,"_user)\n "]],"start1":12270,"start2":12270,"length1":20,"length2":22},{"diffs":[[0,"vanje u "],[-1,"Rol"],[1,"Domen"],[0,"u.\n    \n"]],"start1":12383,"start2":12383,"length1":19,"length2":21},{"diffs":[[0,"sera iz "],[-1,"rol"],[1,"domen"],[0,"e\n    @n"]],"start1":12430,"start2":12430,"length1":19,"length2":21},{"diffs":[[0,"'remove-"],[-1,"Role"],[1,"Domain"],[0,"User', i"]],"start1":12565,"start2":12565,"length1":20,"length2":22},{"diffs":[[0,"ran u entitetu ("],[-1,"role"],[1,"domain"],[0,"_user.user == ag"]],"start1":12613,"start2":12613,"length1":36,"length2":38},{"diffs":[[0,"bjectLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, agent"]],"start1":12867,"start2":12867,"length1":36,"length2":38},{"diffs":[[0,"'remove', state="],[-1,"role"],[1,"domain"],[0,"_user.state)\n   "]],"start1":12924,"start2":12924,"length1":36,"length2":38},{"diffs":[[0,"    "],[-1,"role_user_key.delete()\n        key = ndb.Key(namespace=domain_key, parent=role_user.user, str(role_key.id()))\n        # ovaj delete nece uspeti ukoliko entitet ne postoji, napr: ako je role_user.state == 'invited'\n        "],[1,"domain_user_"],[0,"key."]],"start1":12988,"start2":12988,"length1":230,"length2":20}]],"length":108965,"saved":false}
{"ts":1379280671536,"patch":[[{"diffs":[[0,"er_key.delete()\n"],[1,"        user = domain_user.user.get()\n        for role in domain_user.roles:\n            user.roles.remove(role)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()\n"],[0,"    \n    # Prihv"]],"start1":13001,"start2":13001,"length1":32,"length2":300}]],"length":109233,"saved":false}
{"ts":1379280732066,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        domain_user_key.delete()\n"],[0,"    "]],"start1":12980,"start2":12980,"length1":41,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        domain_user_key.delete()\n"],[0,"    \n    # Prihv"]],"start1":13236,"start2":13236,"length1":32,"length2":65}]],"length":109233,"saved":false}
{"ts":1379280766241,"patch":[[{"diffs":[[0,"e'.\n"],[-1,"        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n"],[0,"    "]],"start1":12841,"start2":12841,"length1":147,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n"],[0,"        domain_u"]],"start1":13097,"start2":13097,"length1":32,"length2":171}]],"length":109233,"saved":false}
{"ts":1379280817503,"patch":[[{"diffs":[[0,"ar_user,"],[1," roles=var_roles,"],[0," state='"]],"start1":12090,"start2":12090,"length1":16,"length2":33},{"diffs":[[0,"usera u "],[-1,"rol"],[1,"domen"],[0,"u\n    @n"]],"start1":13334,"start2":13334,"length1":19,"length2":21}]],"length":109252,"saved":false}
{"ts":1379280857684,"patch":[[{"diffs":[[0,"User(id="],[1,"str("],[0,"var_user"]],"start1":12046,"start2":12046,"length1":16,"length2":20},{"diffs":[[0,"ser.id()"],[1,")"],[0,", name=v"]],"start1":12063,"start2":12063,"length1":16,"length2":17}]],"length":109257,"saved":false}
{"ts":1379281002213,"patch":[[{"diffs":[[0,"titetu ("],[-1,"role"],[1,"domain"],[0,"_user.us"]],"start1":13466,"start2":13466,"length1":20,"length2":22},{"diffs":[[0,"e'.\n        "],[-1,"role"],[1,"domain"],[0,"_user.state "]],"start1":13569,"start2":13569,"length1":28,"length2":30},{"diffs":[[0,"cepted'\n        "],[-1,"role"],[1,"domain"],[0,"_user_key = role"]],"start1":13604,"start2":13604,"length1":36,"length2":38},{"diffs":[[0,"main_user_key = "],[-1,"role"],[1,"domain"],[0,"_user.put()\n    "]],"start1":13622,"start2":13622,"length1":36,"length2":38},{"diffs":[[0,"tLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, a"]],"start1":13682,"start2":13682,"length1":28,"length2":30},{"diffs":[[0,", state="],[-1,"role"],[1,"domain"],[0,"_user.st"]],"start1":13743,"start2":13743,"length1":20,"length2":22},{"diffs":[[0,"bject_log.put()\n"],[1,"        user = domain_user.user.get()\n        for role in domain_user.roles:\n            user.roles.append(role)\n"],[0,"        user_rol"]],"start1":13779,"start2":13779,"length1":32,"length2":145}]],"length":109382,"saved":false}
{"ts":1379281024154,"patch":[[{"diffs":[[0,"ser_"],[-1,"role = Role(parent=role_user.user, id=str(role_key.id()), name='~', permissions=['~',], readonly='True/False')\n        user_role"],[1,"key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log"],[0,".put"]],"start1":13917,"start2":13917,"length1":136,"length2":143}]],"length":109389,"saved":false}
{"ts":1379281118709,"patch":[[{"diffs":[[0,"user.user.get()\n"],[1,"        if (user.state == 'active'):\n    "],[0,"        for role"]],"start1":12889,"start2":12889,"length1":32,"length2":73},{"diffs":[[0,"es:\n            "],[1,"  "],[1,"  "],[0,"user.roles.remov"]],"start1":12981,"start2":12981,"length1":32,"length2":36},{"diffs":[[0,"e(role)\n        "],[1,"    "],[0,"user_key = user."]],"start1":13017,"start2":13017,"length1":32,"length2":36},{"diffs":[[0,"ey = user.put()\n"],[1,"    "],[0,"        object_l"]],"start1":13043,"start2":13043,"length1":32,"length2":36},{"diffs":[[0,"ate=user.state)\n"],[1,"    "],[0,"        object_l"]],"start1":13147,"start2":13147,"length1":32,"length2":36}]],"length":109446,"saved":false}
{"ts":1379281153699,"patch":[[{"diffs":[[0,"user.user.get()\n"],[1,"        if (user.state == 'active'):\n            for role in domain_user.roles:\n                user.roles.append(role)\n            user_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n        \n"],[0,"        for role"]],"start1":13874,"start2":13874,"length1":32,"length2":328}]],"length":109742,"saved":false}
{"ts":1379281172229,"patch":[[{"diffs":[[0,"ut()"],[-1,"\n        \n        for role in domain_user.roles:\n            user.roles.append(role)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()"],[0,"\n\n# "]],"start1":14172,"start2":14172,"length1":247,"length2":8}]],"length":109503,"saved":false}
{"ts":1379281195025,"patch":[[{"diffs":[[0,"ccept' : 3,\n"],[1,"       'update' : 4,\n"],[0,"    }\n    \n "]],"start1":11610,"start2":11610,"length1":24,"length2":45}]],"length":109524,"saved":false}
{"ts":1379281265736,"patch":[[{"diffs":[[0,"ct_log.put()"],[1,"\n    \n    # Azurira postojeceg usera u domeni\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'remove-DomainUser', ili agent koji je referenciran u entitetu (domain_user.user == agent).\n        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        user = domain_user.user.get()\n        if (user.state == 'active'):\n            for role in domain_user.roles:\n                user.roles.remove(role)\n            user_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n        domain_user_key.delete()"],[0,"\n\n# future i"]],"start1":14185,"start2":14185,"length1":24,"length2":966}]],"length":110466,"saved":false}
{"ts":1379281277910,"patch":[[{"diffs":[[0,"ecific dozvolu '"],[-1,"remov"],[1,"updat"],[0,"e-DomainUser', i"]],"start1":14348,"start2":14348,"length1":37,"length2":37},{"diffs":[[0,"ser'"],[-1,", ili agent koji je referenciran u entitetu (domain_user.user == agent)"],[0,".\n  "]],"start1":14378,"start2":14378,"length1":79,"length2":8}]],"length":110395,"saved":false}
{"ts":1379281295480,"patch":[[{"diffs":[[0,"r'.\n"],[-1,"        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom.\n"],[0,"    "]],"start1":14380,"start2":14380,"length1":125,"length2":8}]],"length":110278,"saved":false}
{"ts":1379281311669,"patch":[[{"diffs":[[0,"oze "],[-1,"izgu"],[0,"biti "],[-1,"dozvole za upravljanje"],[1,"izbacen iz"],[0," domen"],[-1,"om"],[1,"e"],[0,".\n  "]],"start1":12772,"start2":12772,"length1":47,"length2":30}]],"length":110261,"saved":false}
{"ts":1379281340846,"patch":[[{"diffs":[[0,"z domene"],[1," i izgubiti dozvole za upravljanje domenom"],[0,".\n      "]],"start1":12790,"start2":12790,"length1":16,"length2":58}]],"length":110303,"saved":false}
{"ts":1379281494973,"patch":[[{"diffs":[[0,"te == 'active'.\n"],[1,"        old_roles = domain_user.roles\n        new_roles = var_roles\n        domain_user.name = var_name\n        domain_user.roles = var_roles\n        domain_user_key = domain_user.put()\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='update', state=domain_user.state)\n        object_log.put()\n"],[0,"        user = d"]],"start1":14464,"start2":14464,"length1":32,"length2":357},{"diffs":[[0,"user.user.get()\n"],[-1,""],[0,"        if (user"]],"start1":14827,"start2":14827,"length1":32,"length2":32},{"diffs":[[0,"ate=user.state)\n"],[1,""],[0,"            obje"]],"start1":15085,"start2":15085,"length1":32,"length2":32},{"diffs":[[0,"ut()"],[-1,"\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n        domain_user_key.delete()"],[0,"\n\n# "]],"start1":15125,"start2":15125,"length1":180,"length2":8}]],"length":110456,"saved":false}
{"ts":1379281532419,"patch":[[{"diffs":[[0,"for role in "],[-1,"domain_user."],[1,"old_roles:\n                user.roles.remove(role)\n            for role in new_"],[0,"roles:\n     "]],"start1":14892,"start2":14892,"length1":36,"length2":103},{"diffs":[[0,"     user.roles."],[-1,"remove"],[1,"append"],[0,"(role)\n         "]],"start1":15001,"start2":15001,"length1":38,"length2":38}]],"length":110523,"saved":false}
{"ts":1379281625153,"patch":[[{"diffs":[[0,"    "],[-1,"old_roles = domain_user.roles"],[1,"# cuvamo stare role korisnika kako bi ih prvo sve izbacili iz liste user-ovih rola\n        old_roles = domain_user.roles\n        # cuvamo nove role korisnika kako bi ih posle sve ubacili u listu user-ovih rola"],[0,"\n   "]],"start1":14484,"start2":14484,"length1":37,"length2":217}]],"length":110703,"saved":false}
{"ts":1379282320179,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n        object"]],"start1":14942,"start2":14942,"length1":32,"length2":49}]],"length":110720,"saved":false}
{"ts":1379282353697,"patch":[[{"diffs":[[0,"    "],[-1,"# cuvamo stare role korisnika kako bi ih prvo sve izbacili iz liste user-ovih rola\n        old_roles = domain_user.roles\n        # cuvamo nove role korisnika kako bi ih posle sve ubacili u listu user-ovih rola"],[1,"old_roles = domain_user.roles"],[0,"\n   "]],"start1":14484,"start2":14484,"length1":217,"length2":37}]],"length":110540,"saved":false}
{"ts":1379282424808,"patch":[[{"diffs":[[0,"les\n"],[-1,"        new_roles = var_roles\n"],[0,"    "]],"start1":14514,"start2":14514,"length1":38,"length2":8},{"diffs":[[0,"role in "],[-1,"new_"],[1,"domain_user."],[0,"roles:\n "]],"start1":14958,"start2":14958,"length1":20,"length2":28}]],"length":110518,"saved":false}
{"ts":1379282467007,"patch":[[{"diffs":[[0,"?\nclass "],[1,"Domain"],[0,"Role(ndb"]],"start1":7423,"start2":7423,"length1":16,"length2":22}]],"length":110524,"saved":false}
{"ts":1379282502753,"patch":[[{"diffs":[[0,"ctive'.\n        "],[1,"domain_"],[0,"role = "],[1,"Domain"],[0,"Role(name='Store"]],"start1":8440,"start2":8440,"length1":39,"length2":52},{"diffs":[[0,"d Roles\n        "],[1,"domain_"],[0,"role_key = role."]],"start1":8608,"start2":8608,"length1":32,"length2":39},{"diffs":[[0,"main_role_key = "],[1,"domain_"],[0,"role.put()\n     "]],"start1":8626,"start2":8626,"length1":32,"length2":39},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":8682,"start2":8682,"length1":32,"length2":39},{"diffs":[[0,"ate='none', log="],[1,"domain_"],[0,"role)\n        ob"]],"start1":8751,"start2":8751,"length1":32,"length2":39}]],"length":110565,"saved":false}
{"ts":1379282515083,"patch":[[{"diffs":[[0,"one!"],[-1," mozda napraviti DomainUser u kojem je repeated prop. Roles, i onda u Expando od User modela dodati struct prop Roles(Domain, Roles)?"],[0,"\ncla"]],"start1":7287,"start2":7287,"length1":141,"length2":8}]],"length":110432,"saved":false}
{"ts":1379282611083,"patch":[[{"diffs":[[0,"vi novu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n   "]],"start1":8095,"start2":8095,"length1":16,"length2":23},{"diffs":[[0,"olu 'create-"],[-1,""],[0,""],[1,"Domain"],[0,"Role'. \n    "]],"start1":8231,"start2":8231,"length1":24,"length2":30},{"diffs":[[0,"urira postojecu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n    @ndb.tr"]],"start1":8698,"start2":8698,"length1":32,"length2":39},{"diffs":[[0,"'update-"],[1,"Domain"],[0,"Role'.\n "]],"start1":8846,"start2":8846,"length1":16,"length2":22},{"diffs":[[0,"e'.\n        "],[1,"domain_"],[0,"role.name = "]],"start1":8934,"start2":8934,"length1":24,"length2":31},{"diffs":[[0,"rs'\n        "],[1,"domain_"],[0,"role.permiss"]],"start1":8982,"start2":8982,"length1":24,"length2":31},{"diffs":[[0,"tore',]\n        "],[1,"domain_"],[0,"role_key = role."]],"start1":9030,"start2":9030,"length1":32,"length2":39},{"diffs":[[0,"main_role_key = "],[1,"domain_"],[0,"role.put()\n     "]],"start1":9048,"start2":9048,"length1":32,"length2":39},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":9104,"start2":9104,"length1":32,"length2":39},{"diffs":[[0,"e', log="],[1,"domain_"],[0,"role)\n  "]],"start1":9181,"start2":9181,"length1":16,"length2":23},{"diffs":[[0,"_log"],[-1,".put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        # ovo uraditi sa taskletima u async radi optimizacije\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            user_role = key.get()\n            user_role.name = role.name\n            user_role.permissions = role.permissions\n            user_role"],[0,".put"]],"start1":9216,"start2":9216,"length1":437,"length2":8},{"diffs":[[0,"'delete-"],[1,"Domain"],[0,"Role'.\n "]],"start1":9379,"start2":9379,"length1":16,"length2":22}]],"length":110077,"saved":false}
{"ts":1379283056158,"patch":[[{"diffs":[[0,"stojecu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n   "]],"start1":9246,"start2":9246,"length1":16,"length2":23},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":9500,"start2":9500,"length1":32,"length2":39},{"diffs":[[0,"t()\n        "],[-1,"role"],[1,"# projection=[DomainUser.user,]\n        domain"],[0,"_users = Rol"]],"start1":9602,"start2":9602,"length1":28,"length2":70},{"diffs":[[0,"users = "],[-1,"Role"],[1,"Domain"],[0,"User.que"]],"start1":9661,"start2":9661,"length1":20,"length2":22},{"diffs":[[0,"ery("],[-1,"ancestor=role_key).fetch(projection=[RoleUser.user,]"],[1,"roles == domain_role_key).fetch("],[0,")\n  "]],"start1":9682,"start2":9682,"length1":60,"length2":40},{"diffs":[[0,"    for "],[-1,"role"],[1,"domain"],[0,"_user in"]],"start1":9743,"start2":9743,"length1":20,"length2":22},{"diffs":[[0,"user in "],[-1,"role"],[1,"domain"],[0,"_users:\n"]],"start1":9758,"start2":9758,"length1":20,"length2":22},{"diffs":[[0,"    "],[-1,"key = ndb.Key(namespace=domain_key, parent=role_user, str("],[1,"domain_user.roles.remove(domain_"],[0,"role_key"],[-1,".id())"],[0,")\n  "]],"start1":9788,"start2":9788,"length1":80,"length2":48},{"diffs":[[0,"    "],[-1,"roles.append(key)\n        ndb.delete_multi(roles)\n        ndb.delete_multi(role_users"],[1,"user = domain_user.get()\n            user.roles.remove(domain_role_key)\n            domain_user.put()\n            user.put("],[0,")\n  "]],"start1":9842,"start2":9842,"length1":93,"length2":131},{"diffs":[[0,"r.put()\n        "],[1,"domain_"],[0,"role_key.delete("]],"start1":9963,"start2":9963,"length1":32,"length2":39}]],"length":110132,"saved":false}
{"ts":1379283300882,"patch":[[{"diffs":[[0,"  # "],[-1,"projection=[DomainUser.user,]"],[0,"\n   "]],"start1":9612,"start2":9612,"length1":37,"length2":8},{"diffs":[[0,"fetch()\n"],[1,"        user_keys = DomainUser.query(roles == domain_role_key).fetch(projection=[DomainUser.user,])\n        users = ndb.get_multi(user_keys)\n"],[0,"        "]],"start1":9683,"start2":9683,"length1":16,"length2":157}]],"length":110244,"saved":false}
{"ts":1379283451160,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        # \n"],[0,"    "]],"start1":9602,"start2":9602,"length1":19,"length2":8},{"diffs":[[0,"s = "],[-1,"D"],[1,"[]\n        for d"],[0,"omain"],[-1,"User.query(roles == domain_role_key).fetch(projection=[D"],[1,"_user in domain_users:\n            domain_user.roles.remove(domain_role_key)\n            user_keys.append(d"],[0,"omain"],[-1,"U"],[1,"_u"],[0,"ser.user"],[-1,",]"],[1,")\n            domain_user.put("],[0,")\n  "]],"start1":9696,"start2":9696,"length1":86,"length2":181},{"diffs":[[0,"    "],[-1,"roles = []\n        for domain_"],[1,"for "],[0,"user in "],[-1,"domain_"],[0,"user"]],"start1":9920,"start2":9920,"length1":53,"length2":20},{"diffs":[[0,"user"],[-1," = domain_user.get()\n            user.roles.remove(domain_role_key"],[1,"_keys.append(domain_user.user"],[0,")\n  "]],"start1":10009,"start2":10009,"length1":74,"length2":37},{"diffs":[[0,"    "],[-1,"    user.put()"],[1,""],[0,"\n   "]],"start1":10078,"start2":10078,"length1":22,"length2":8}]],"length":110244,"saved":false}
{"ts":1379283505478,"patch":[[{"diffs":[[0,"omain_role_key)\n"],[1,"            domain_user.put()\n"],[0,"            user"]],"start1":9782,"start2":9782,"length1":32,"length2":62},{"diffs":[[0,"er)\n"],[-1,"            domain_user.put()\n"],[0,"    "]],"start1":9871,"start2":9871,"length1":38,"length2":8},{"diffs":[[0,"rs:\n            "],[-1,"domain_"],[0,"user.roles.remov"]],"start1":9939,"start2":9939,"length1":39,"length2":32},{"diffs":[[0,"user"],[-1,"_keys.append(domain_user.user)\n            domain_user.put()\n        "],[1,".put()"],[0,"\n   "]],"start1":10002,"start2":10002,"length1":77,"length2":14}]],"length":110174,"saved":false}
{"ts":1379283638461,"patch":[[{"diffs":[[0,"     domain_user"],[1,"_key = domain_user.put()\n            object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='update', state=domain_user.state)\n            object_log"],[0,".put()\n         "]],"start1":9805,"start2":9805,"length1":32,"length2":197},{"diffs":[[0,"        user"],[-1,".put()"],[1,"_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n            "],[0,"\n        dom"]],"start1":10159,"start2":10159,"length1":30,"length2":187}]],"length":110496,"saved":false}
{"ts":1379283727188,"patch":[[{"diffs":[[0,"r in users:\n"],[1,"            if (user.state == 'active'):\n"],[0,"            "]],"start1":10096,"start2":10096,"length1":24,"length2":65}]],"length":110537,"saved":false}
{"ts":1379283733878,"patch":[[{"diffs":[[0,"'):\n            "],[1,"    "],[0,"user.roles.remov"]],"start1":10145,"start2":10145,"length1":32,"length2":36},{"diffs":[[0,"ey)\n            "],[1,"    "],[0,"user_key = user."]],"start1":10196,"start2":10196,"length1":32,"length2":36},{"diffs":[[0,"ey = user.put()\n"],[1,"    "],[0,"            obje"]],"start1":10222,"start2":10222,"length1":32,"length2":36},{"diffs":[[0,"ate=user.state)\n"],[1,"    "],[0,"            obje"]],"start1":10330,"start2":10330,"length1":32,"length2":36}]],"length":110553,"saved":false}
{"ts":1379283795745,"patch":[[{"diffs":[[0,"te == 'active'.\n"],[1,"        user = var_user.get()\n        if (user.state == 'active'):\n    "],[0,"        domain_u"]],"start1":12058,"start2":12058,"length1":32,"length2":103},{"diffs":[[0,"vited')\n        "],[1,"    "],[0,"domain_user_key "]],"start1":12257,"start2":12257,"length1":32,"length2":36},{"diffs":[[0,"r.put()\n        "],[1,"  "],[1,"  "],[0,"object_log = Obj"]],"start1":12305,"start2":12305,"length1":32,"length2":36},{"diffs":[[0,"n_user)\n        "],[1,"    "],[0,"object_log.put()"]],"start1":12440,"start2":12440,"length1":32,"length2":36},{"diffs":[[0,"bject_log.put()\n"],[1,"    "],[0,"        # salje "]],"start1":12461,"start2":12461,"length1":32,"length2":36}]],"length":110640,"saved":false}
{"ts":1379284173255,"patch":[[{"diffs":[[0,"ati kontrola"],[1," - treba odluciti konvenciju imenovanja objekata!"],[0,"\nclass Domai"]],"start1":3169,"start2":3169,"length1":24,"length2":73}]],"length":110689,"saved":false}
{"ts":1379284250614,"patch":[[{"diffs":[[0,"ame="],[-1,"'deskriptivno ime po zelji kreatora'"],[1,"var_name"],[0,", pr"]],"start1":4675,"start2":4675,"length1":44,"length2":16},{"diffs":[[0,"e = "],[-1,"'promenjeno ime od strane administratora domene'"],[1,"var_name"],[0,"\n   "]],"start1":5601,"start2":5601,"length1":56,"length2":16}]],"length":110621,"saved":false}
{"ts":1379284737224,"patch":[[{"diffs":[[0,"        "],[1,"domain_"],[0,"role = "],[1,"Domain"],[0,"Role(nam"]],"start1":4905,"start2":4905,"length1":23,"length2":36},{"diffs":[[0,"ue)\n        "],[1,"domain_"],[0,"role_key = r"]],"start1":5013,"start2":5013,"length1":24,"length2":31},{"diffs":[[0,"_role_key = "],[1,"domain_"],[0,"role.put()\n "]],"start1":5031,"start2":5031,"length1":24,"length2":31},{"diffs":[[0,"    "],[-1,"role"],[1,"domain"],[0,"_user = "],[-1,"RoleUser(parent=role_key, user=user_key"],[1,"DomainUser(namespace=domain_key, id=str(user_key.id()), name='Administrator', user=user_key, roles=[domain_role_key,]"],[0,", st"]],"start1":5065,"start2":5065,"length1":59,"length2":139},{"diffs":[[0,"        "],[-1,"role"],[1,"domain"],[0,"_user_ke"]],"start1":5220,"start2":5220,"length1":20,"length2":22},{"diffs":[[0,"r_key = "],[-1,"role"],[1,"domain"],[0,"_user.pu"]],"start1":5238,"start2":5238,"length1":20,"length2":22},{"diffs":[[0,"    "],[-1,"user_role = Role(namespace"],[1,"object_log = ObjectLog(parent"],[0,"=domain_"],[1,"user_"],[0,"key, "],[-1,"par"],[1,"ag"],[0,"ent="],[-1,"role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role.put()"],[1,"agent_key, action='accept', state=domain_user.state)\n        object_log.put()\n        user = user_key.get()\n        user.roles.append(domain_role_key)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()\n        "],[0,"\n   "]],"start1":5268,"start2":5268,"length1":173,"length2":375}]],"length":110934,"saved":false}
{"ts":1379284944766,"patch":[[{"diffs":[[0,"main_role.put()\n"],[1,"        object_log = ObjectLog(parent=domain_role_key, agent=agent_key, action='create', state='none', log=domain_role)\n        object_log.put()\n"],[0,"        domain_u"]],"start1":5045,"start2":5045,"length1":32,"length2":177}]],"length":111079,"saved":false}
{"ts":1379285052526,"patch":[[{"diffs":[[0,"role_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='cr"]],"start1":5106,"start2":5106,"length1":37,"length2":36},{"diffs":[[0,"user_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='ac"]],"start1":5453,"start2":5453,"length1":37,"length2":36},{"diffs":[[0,"user_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='up"]],"start1":5687,"start2":5687,"length1":37,"length2":36}]],"length":111076,"saved":false}
{"ts":1379285101386,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n        object"]],"start1":5503,"start2":5503,"length1":32,"length2":49}]],"length":111093,"saved":false}
{"ts":1379285113604,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n        object"]],"start1":5747,"start2":5747,"length1":32,"length2":42}]],"length":111103,"saved":false}
{"ts":1379285180077,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n            ob"]],"start1":10409,"start2":10409,"length1":32,"length2":49},{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n              "]],"start1":10808,"start2":10808,"length1":32,"length2":42}]],"length":111130,"saved":false}
{"ts":1379285207914,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":13803,"start2":13803,"length1":32,"length2":42}]],"length":111140,"saved":false}
{"ts":1379285216585,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":14798,"start2":14798,"length1":32,"length2":42}]],"length":111150,"saved":false}
{"ts":1379285237902,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":15777,"start2":15777,"length1":32,"length2":42}]],"length":111160,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379333300309,"patch":[[{"diffs":[[0,"ategory,"],[-1,"stat"],[1,"activ"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":20,"length2":21},{"diffs":[[0," required=True)\n"],[1,"    active = ndb.BooleanProperty('6', default=False)\n"],[0,"    state = ndb."]],"start1":103116,"start2":103116,"length1":32,"length2":85},{"diffs":[[0,"ublished"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product content.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content = ProductContent(parent=catalog_key, title=var_title, body=var_body)\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='create', state='none', log=product_content)\n        object_log.put()\n    \n    # Ova akcija azurira product content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content.title = var_title\n        product_content.body = var_body\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='update', state='none', log=product_content)\n        object_log.put()"],[0,"\n\n# done"]],"start1":103251,"start2":103251,"length1":16,"length2":1331}]],"length":112529,"saved":false}
{"ts":1379333354590,"patch":[[{"diffs":[[0,"ategory,"],[-1,"activ"],[1,"stat"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":21,"length2":20},{"diffs":[[0,"ue)\n"],[-1,"    active = ndb.BooleanProperty('6', default=False)\n"],[0,"    "]],"start1":103127,"start2":103127,"length1":61,"length2":8}]],"length":112475,"saved":false}
{"ts":1379333483756,"patch":[[{"diffs":[[0,"ategory,"],[-1,"stat"],[1,"activ"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":20,"length2":21},{"diffs":[[0,"ue)\n    "],[-1,"stat"],[1,"activ"],[0,"e = ndb."],[-1,"Integer"],[1,"Boolean"],[0,"Property"]],"start1":103128,"start2":103128,"length1":35,"length2":36},{"diffs":[[0,"6', "],[-1,"required=True)# published/unpublished"],[1,"default=False)"],[0,"\n   "]],"start1":103166,"start2":103166,"length1":45,"length2":22},{"diffs":[[0,"kreira novi "],[-1,"product "],[0,"content.\n   "]],"start1":103341,"start2":103341,"length1":32,"length2":24}]],"length":112446,"saved":false}
{"ts":1379333505603,"patch":[[{"diffs":[[0,"  'update' : 2,\n"],[1,"       'delete' : 3,\n"],[0,"    }\n    \n    #"]],"start1":103297,"start2":103297,"length1":32,"length2":53}]],"length":112467,"saved":false}
{"ts":1379333582091,"patch":[[{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'cr"]],"start1":103467,"start2":103467,"length1":39,"length2":32},{"diffs":[[0,"ate-"],[-1,"ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished"],[1,"Content"],[0,"'.\n "]],"start1":103500,"start2":103500,"length1":126,"length2":15}]],"length":112349,"saved":false}
{"ts":1379333633183,"patch":[[{"diffs":[[0,"t = "],[-1,"Product"],[0,"Content("],[-1,"parent=catalog_key, title=var_title, body=var_body"],[1,"title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_active"],[0,")\n  "]],"start1":103536,"start2":103536,"length1":73,"length2":111}]],"length":112387,"saved":false}
{"ts":1379333803307,"patch":[[{"diffs":[[0,"t'.\n        "],[-1,"product_"],[0,"content = Co"]],"start1":103510,"start2":103510,"length1":32,"length2":24},{"diffs":[[0,"ve)\n        "],[-1,"product_"],[0,"content_key "]],"start1":103633,"start2":103633,"length1":32,"length2":24},{"diffs":[[0,"ntent_key = "],[-1,"product_"],[0,"content.put("]],"start1":103647,"start2":103647,"length1":32,"length2":24},{"diffs":[[0,"tLog(parent="],[-1,"product_"],[0,"content_key,"]],"start1":103699,"start2":103699,"length1":32,"length2":24},{"diffs":[[0,"'none', log="],[-1,"product_"],[0,"content)\n   "]],"start1":103764,"start2":103764,"length1":32,"length2":24},{"diffs":[[0,"ija azurira "],[-1,"product "],[0,"content.\n   "]],"start1":103828,"start2":103828,"length1":32,"length2":24},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'up"]],"start1":103933,"start2":103933,"length1":39,"length2":32},{"diffs":[[0,"dozvolu 'update-"],[-1,"Product"],[0,"Content'.\n      "]],"start1":103954,"start2":103954,"length1":39,"length2":32},{"diffs":[[0,"    "],[-1,"# akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'."],[1,"content.title = var_title\n        content.category = var_category\n        content.body = var_body"],[0,"\n   "]],"start1":103984,"start2":103984,"length1":103,"length2":105},{"diffs":[[0,"    "],[-1,"product_"],[0,"content."],[-1,"titl"],[1,"sequenc"],[0,"e = var_"],[-1,"titl"],[1,"sequenc"],[0,"e\n  "]],"start1":104090,"start2":104090,"length1":40,"length2":38},{"diffs":[[0,"    "],[-1,"product_"],[0,"content."],[-1,"body"],[1,"active"],[0," = var_"],[-1,"body"],[1,"active"],[0,"\n   "]],"start1":104130,"start2":104130,"length1":39,"length2":35},{"diffs":[[0,"ive\n        "],[-1,"product_"],[0,"content_key "]],"start1":104158,"start2":104158,"length1":32,"length2":24},{"diffs":[[0,"ntent_key = "],[-1,"product_"],[0,"content.put("]],"start1":104172,"start2":104172,"length1":32,"length2":24},{"diffs":[[0,"tLog(parent="],[-1,"product_"],[0,"content_key,"]],"start1":104224,"start2":104224,"length1":32,"length2":24},{"diffs":[[0,"'none', log="],[-1,"product_"],[0,"content)\n   "]],"start1":104289,"start2":104289,"length1":32,"length2":24},{"diffs":[[0,"  object_log.put"],[1,"()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Content'.\n        object_log = ObjectLog(parent=tax_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        tax_key.delete"],[0,"()\n\n# done!\nclas"]],"start1":104316,"start2":104316,"length1":32,"length2":352}]],"length":112609,"saved":false}
{"ts":1379333821816,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"tax"],[1,"content"],[0,"_key, agent=agen"]],"start1":104532,"start2":104532,"length1":35,"length2":39},{"diffs":[[0,"g.put()\n        "],[-1,"tax"],[1,"content"],[0,"_key.delete()\n\n#"]],"start1":104626,"start2":104626,"length1":35,"length2":39}]],"length":112617,"saved":false}
{"ts":1379334048412,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi country.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-Country'.\n        country = Country(code=var_code, name=var_name, active=var_active)\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='create', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija azurira country.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Country'.\n        country.code = var_code\n        country.name = var_name\n        country.active = var_active\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='update', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Country'.\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        content_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":105832,"start2":105832,"length1":32,"length2":1380}]],"length":113965,"saved":false}
{"ts":1379334176327,"patch":[[{"diffs":[[0,"uired=True)\n    "],[-1,"state"],[1,"availability"],[0," = ndb.IntegerPr"]],"start1":46098,"start2":46098,"length1":37,"length2":44},{"diffs":[[0,"  # "],[-1,"states"],[1,"availability"],[0,": - "]],"start1":46239,"start2":46239,"length1":14,"length2":20},{"diffs":[[0,"ce, "],[-1,"state=var_state"],[1,"availability=var_availability"],[0,")\n  "]],"start1":48253,"start2":48253,"length1":23,"length2":37},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":48434,"start2":48434,"length1":38,"length2":22},{"diffs":[[0,"emplate."],[-1,"state = var_state"],[1,"availability = var_availability"],[0,"\n       "]],"start1":49081,"start2":49081,"length1":33,"length2":47},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":49267,"start2":49267,"length1":38,"length2":22}]],"length":113974,"saved":false}
{"ts":1379334350876,"patch":[[{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,")\n      "]],"start1":49718,"start2":49718,"length1":38,"length2":22},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":55619,"start2":55619,"length1":38,"length2":22},{"diffs":[[0,"ate="],[-1,"product_template.state"],[1,"'none'"],[0,", lo"]],"start1":56202,"start2":56202,"length1":30,"length2":14},{"diffs":[[0,"o\n    # "],[-1,"state"],[1,"availability"],[0," = ndb.I"]],"start1":57415,"start2":57415,"length1":21,"length2":28},{"diffs":[[0,"overide "],[-1,"state"],[1,"availability"],[0," vrednos"]],"start1":57478,"start2":57478,"length1":21,"length2":28},{"diffs":[[0,"nstance."],[-1,"state"],[1,"availability"],[0," i produ"]],"start1":59087,"start2":59087,"length1":21,"length2":28},{"diffs":[[0,"ate="],[-1,"product_instance.state"],[1,"'none'"],[0,", lo"]],"start1":59337,"start2":59337,"length1":30,"length2":14}]],"length":113931,"saved":false}
{"ts":1379334416455,"patch":[[{"diffs":[[0,"ectLog(parent=co"],[-1,"ntent"],[1,"untry"],[0,"_key, agent=agen"]],"start1":107034,"start2":107034,"length1":37,"length2":37},{"diffs":[[0,"put()\n        co"],[-1,"ntent"],[1,"untry"],[0,"_key.delete()\n\n#"]],"start1":107128,"start2":107128,"length1":37,"length2":37}]],"length":113931,"saved":false}
{"ts":1379334793689,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi country subdivision.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-CountrySubdivision'.\n        country_subdivision = CountrySubdivision(parent=country_key, parent_record=var_parent_record, code=var_code, name=var_name, type=var_type, active=var_active)\n        country_subdivision_key = country_subdivision.put()\n        object_log = ObjectLog(parent=country_subdivision_key, agent=agent_key, action='create', state='none', log=country_subdivision)\n        object_log.put()\n    \n    # Ova akcija azurira country.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Country'.\n        country.code = var_code\n        country.name = var_name\n        country.active = var_active\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='update', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Country'.\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        country_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":107988,"start2":107988,"length1":32,"length2":1542}]],"length":115441,"saved":false}
{"ts":1379334911619,"patch":[[{"diffs":[[0," azurira country"],[-1,""],[0,""],[1," subdivision"],[0,".\n    @ndb.trans"]],"start1":108765,"start2":108765,"length1":32,"length2":44},{"diffs":[[0," 'update-Country"],[1,"Subdivision"],[0,"'.\n        count"]],"start1":108907,"start2":108907,"length1":32,"length2":43},{"diffs":[[0,"\n        country"],[1,"_subdivision.parent_record = var_parent_record\n        country_subdivision"],[0,".code = var_code"]],"start1":108936,"start2":108936,"length1":32,"length2":106},{"diffs":[[0,"\n        country"],[1,"_subdivision"],[0,".name = var_name"]],"start1":109042,"start2":109042,"length1":32,"length2":44},{"diffs":[[0,"\n        country"],[1,"_subdivision.type = var_type\n        country_subdivision"],[0,".active = var_ac"]],"start1":109086,"start2":109086,"length1":32,"length2":88},{"diffs":[[0,"        country_"],[1,"subdivision_"],[0,"key = country.pu"]],"start1":109179,"start2":109179,"length1":32,"length2":44},{"diffs":[[0,"on_key = country"],[1,"_subdivision"],[0,".put()\n        o"]],"start1":109204,"start2":109204,"length1":32,"length2":44},{"diffs":[[0,"(parent=country_"],[1,"subdivision_"],[0,"key, agent=agent"]],"start1":109269,"start2":109269,"length1":32,"length2":44},{"diffs":[[0,"ne', log=country"],[1,"_subdivision"],[0,")\n        object"]],"start1":109345,"start2":109345,"length1":32,"length2":44},{"diffs":[[0," 'delete-Country"],[1,"Subdivision"],[0,"'.\n        objec"]],"start1":109556,"start2":109556,"length1":32,"length2":43},{"diffs":[[0,"(parent=country_"],[1,"subdivision_"],[0,"key, agent=agent"]],"start1":109616,"start2":109616,"length1":32,"length2":44},{"diffs":[[0,"        country_"],[1,"subdivision_"],[0,"key.delete()\n\n# "]],"start1":109722,"start2":109722,"length1":32,"length2":44}]],"length":115689,"saved":false}
{"ts":1379335025173,"patch":[[{"diffs":[[0," akcija brise co"],[-1,"ntent"],[1,"untry"],[0,".\n    @ndb.trans"]],"start1":106849,"start2":106849,"length1":37,"length2":37},{"diffs":[[0," akcija brise co"],[1,"u"],[0,"nt"],[-1,"ent"],[1,"ry subdivision"],[0,".\n    @ndb.trans"]],"start1":109414,"start2":109414,"length1":37,"length2":49}]],"length":115701,"saved":false}
{"ts":1379335159244,"patch":[[{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":104422,"start2":104422,"length1":39,"length2":32},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":106949,"start2":106949,"length1":39,"length2":32},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":109519,"start2":109519,"length1":39,"length2":32}]],"length":115680,"saved":false}
{"ts":1379335577759,"patch":[[{"diffs":[[0,"cestor:no - stat"],[-1,"e"],[1,"us"],[0,",name\n    parent"]],"start1":110632,"start2":110632,"length1":33,"length2":34},{"diffs":[[0,"n query\n    stat"],[-1,"e"],[1,"us"],[0," = ndb.IntegerPr"]],"start1":110890,"start2":110890,"length1":33,"length2":34},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductCategory'.\n        product_category = ProductCategory(parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status)\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='create', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija azurira product category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductCategory'.\n        product_category.parent_record = var_parent_record\n        product_category.name = var_name\n        product_category.complete_name = var_complete_name\n        product_category.status = var_status\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='update', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija brise product category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductCategory'.\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_category_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":110934,"start2":110934,"length1":32,"length2":1686}]],"length":117336,"saved":false}
{"ts":1379335863569,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        country_subdivisions = CountrySubdivision.query(ancestor=country_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog country_subdivision entiteta, pa se trebati ustvari pozivati CountrySubdivision.delete() sa listom kljuceva.\n        # CountrySubdivision.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog Country entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(country_subdivisions)\n"],[0,"        country_"]],"start1":107104,"start2":107104,"length1":32,"length2":574},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductCategory'.\n        product_category = ProductCategory(parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status)\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='create', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija azurira product category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductCategory'.\n        product_category.parent_record = var_parent_record\n        product_category.name = var_name\n        product_category.complete_name = var_complete_name\n        product_category.status = var_status\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='update', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija brise product category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductCategory'.\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_category_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":113469,"start2":113469,"length1":32,"length2":1686}]],"length":119532,"saved":false}
{"ts":1379336043951,"patch":[[{"diffs":[[0,"ra novi product "],[-1,""],[0,""],[1,"uom "],[0,"category.\n    @n"]],"start1":113667,"start2":113667,"length1":32,"length2":36},{"diffs":[[0," 'create-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":113809,"start2":113809,"length1":32,"length2":35},{"diffs":[[0,"        product_"],[1,"uom_"],[0,"category = Produ"]],"start1":113839,"start2":113839,"length1":32,"length2":36},{"diffs":[[0,"tegory = Product"],[1,"UOM"],[0,"Category(parent_"]],"start1":113861,"start2":113861,"length1":32,"length2":35},{"diffs":[[0,"ory("],[-1,"parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status"],[1,"name=var_name"],[0,")\n  "]],"start1":113885,"start2":113885,"length1":106,"length2":21},{"diffs":[[0,"        product_"],[1,"uom_"],[0,"category_key = p"]],"start1":113904,"start2":113904,"length1":32,"length2":36},{"diffs":[[0,"y_key = product_"],[1,"uom_"],[0,"category.put()\n "]],"start1":113931,"start2":113931,"length1":32,"length2":36},{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":113996,"start2":113996,"length1":32,"length2":36},{"diffs":[[0,"e', log=product_"],[1,"uom_"],[0,"category)\n      "]],"start1":114074,"start2":114074,"length1":32,"length2":36},{"diffs":[[0,"azurira product "],[1,"uom "],[0,"category.\n    @n"]],"start1":114151,"start2":114151,"length1":32,"length2":36},{"diffs":[[0," 'update-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":114293,"start2":114293,"length1":32,"length2":35},{"diffs":[[0,"uct_"],[-1,"category.parent_record = var_parent_record\n        product_category.name = var_name\n        product"],[1,"uom"],[0,"_cat"]],"start1":114335,"start2":114335,"length1":107,"length2":11},{"diffs":[[0,"om_category."],[-1,"complete_"],[0,"name = var_c"]],"start1":114340,"start2":114340,"length1":33,"length2":24},{"diffs":[[0,".name = var_"],[-1,"complete_"],[0,"name\n       "]],"start1":114351,"start2":114351,"length1":33,"length2":24},{"diffs":[[0,"uct_"],[-1,"category.status = var_status\n        product"],[1,"uom"],[0,"_cat"]],"start1":114380,"start2":114380,"length1":52,"length2":11},{"diffs":[[0,"y_key = product_"],[1,"uom_"],[0,"category.put()\n "]],"start1":114395,"start2":114395,"length1":32,"length2":36},{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":114460,"start2":114460,"length1":32,"length2":36},{"diffs":[[0,"e', log=product_"],[1,"uom_"],[0,"category)\n      "]],"start1":114538,"start2":114538,"length1":32,"length2":36},{"diffs":[[0,"a brise product "],[1,"uom "],[0,"category.\n    @n"]],"start1":114613,"start2":114613,"length1":32,"length2":36},{"diffs":[[0," 'delete-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":114755,"start2":114755,"length1":32,"length2":35}]],"length":119348,"saved":false}
{"ts":1379336282190,"patch":[[{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":114815,"start2":114815,"length1":32,"length2":36},{"diffs":[[0,"        product_"],[1,"uoms = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_"],[0,"category_key.del"]],"start1":114922,"start2":114922,"length1":32,"length2":554},{"diffs":[[0,"', default=True)"],[1,"\n    "],[0,"\n\n# done!\nclass "]],"start1":116633,"start2":116633,"length1":32,"length2":37}]],"length":119879,"saved":false}
{"ts":1379336449049,"patch":[[{"diffs":[[0,"ue)\n    "],[1,"\n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product uom category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductUOMCategory'.\n        product_uom = ProductUOM(parent=product_uom_category_key, name=var_name, symbol=var_symbol, rate=var_rate, factor=var_factor, rounding=var_rounding, digits=var_digits, active=var_active)\n        product_uom_category_key = product_uom_category.put()\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='create', state='none', log=product_uom_category)\n        object_log.put()\n    \n    # Ova akcija azurira product uom category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductUOMCategory'.\n        product_uom_category.name = var_name\n        product_uom_category_key = product_uom_category.put()\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='update', state='none', log=product_uom_category)\n        object_log.put()\n    \n    # Ova akcija brise product uom category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductUOMCategory'.\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_uoms = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_category_key.delete()"],[0,"\n\n# done"]],"start1":116646,"start2":116646,"length1":16,"length2":2137}]],"length":122000,"saved":false}
{"ts":1379336460853,"patch":[[{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":116838,"start2":116838,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        p"]],"start1":116971,"start2":116971,"length1":32,"length2":24}]],"length":121983,"saved":false}
{"ts":1379336774168,"patch":[[{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key = produc"]],"start1":117189,"start2":117189,"length1":33,"length2":24},{"diffs":[[0," product_uom"],[-1,"_category"],[0,".put()\n     "]],"start1":117206,"start2":117206,"length1":33,"length2":24},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":117263,"start2":117263,"length1":33,"length2":24},{"diffs":[[0,"=product_uom"],[-1,"_category"],[0,")\n        ob"]],"start1":117331,"start2":117331,"length1":33,"length2":24},{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":117399,"start2":117399,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        p"]],"start1":117532,"start2":117532,"length1":32,"length2":24},{"diffs":[[0," product_uom"],[-1,"_category"],[0,".name = var_"]],"start1":117554,"start2":117554,"length1":33,"length2":24},{"diffs":[[0,"_uom"],[-1,"_category_key = product_uom_category"],[1,".symbol = var_symbol\n        product_uom.rate = var_rate\n        product_uom.factor = var_factor\n        product_uom.rounding = var_rounding\n        product_uom.digits = var_digits\n        product_uom.active = var_active\n        product_uom_key = product_uom"],[0,".put"]],"start1":117598,"start2":117598,"length1":44,"length2":266},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":117905,"start2":117905,"length1":33,"length2":24},{"diffs":[[0,"=product_uom"],[-1,"_category"],[0,")\n        ob"]],"start1":117973,"start2":117973,"length1":33,"length2":24},{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":118039,"start2":118039,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        o"]],"start1":118172,"start2":118172,"length1":32,"length2":24},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":118225,"start2":118225,"length1":33,"length2":24},{"diffs":[[0,"_uom"],[-1,"s = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_category"],[0,"_key"]],"start1":118330,"start2":118330,"length1":535,"length2":8}]],"length":121572,"saved":false}
{"ts":1379336998217,"patch":[[{"diffs":[[0,", indexed=False)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi currency.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-Content'.\n        currency = Currency(title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_active)\n        content_key = content.put()\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='create', state='none', log=content)\n        object_log.put()\n    \n    # Ova akcija azurira content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Content'.\n        content.title = var_title\n        content.category = var_category\n        content.body = var_body\n        content.sequence = var_sequence\n        content.active = var_active\n        content_key = content.put()\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='update', state='none', log=content)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-Content'.\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        content_key.delete()"],[0,"\n\n# done!\n# osta"]],"start1":120152,"start2":120152,"length1":32,"length2":1506}]],"length":123046,"saved":false}
{"ts":1379337541431,"patch":[[{"diffs":[[0,"ozvolu 'create-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        curre"]],"start1":120474,"start2":120474,"length1":38,"length2":39},{"diffs":[[0,"ncy("],[-1,"title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_activ"],[1,"name=var_name, symbol=var_symbol, code=var_code, numeric_code=var_numeric_code, \n        rounding=var_rounding, digits=var_digits, active=var_active, grouping=var_grouping, decimal_separator=var_decimal_separator, \n        thousands_separator=var_thousands_separator, positive_sign_position=var_positive_sign_position, negative_sign_position=var_negative_sign_position,\n        positive_sign=var_positive_sign, negative_sign=var_negative_sign, positive_currency_symbol_precedes=var_positive_currency_symbol_precedes,\n        negative_currency_symbol_precedes=var_negative_currency_symbol_precedes, positive_separate_by_space=var_positive_separate_by_space, negative_separate_by_space=var_negative_separate_by_spac"],[0,"e)\n "]],"start1":120524,"start2":120524,"length1":102,"length2":721},{"diffs":[[0,"       c"],[-1,"ontent"],[1,"urrency"],[0,"_key = c"],[-1,"ontent"],[1,"urrency"],[0,".put()\n "]],"start1":121245,"start2":121245,"length1":36,"length2":38},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":121305,"start2":121305,"length1":38,"length2":39},{"diffs":[[0,"te='none', log=c"],[-1,"ontent"],[1,"urrency"],[0,")\n        object"]],"start1":121371,"start2":121371,"length1":38,"length2":39},{"diffs":[[0,"akcija azurira c"],[-1,"ontent"],[1,"urrency"],[0,".\n    @ndb.trans"]],"start1":121436,"start2":121436,"length1":38,"length2":39},{"diffs":[[0,"ozvolu 'update-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        conte"]],"start1":121567,"start2":121567,"length1":38,"length2":39},{"diffs":[[0,"       c"],[-1,"ontent"],[1,"urrency"],[0,"_key = c"],[-1,"ontent"],[1,"urrency"],[0,".put()\n "]],"start1":121776,"start2":121776,"length1":36,"length2":38},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":121836,"start2":121836,"length1":38,"length2":39},{"diffs":[[0,"te='none', log=c"],[-1,"ontent"],[1,"urrency"],[0,")\n        object"]],"start1":121902,"start2":121902,"length1":38,"length2":39},{"diffs":[[0,"a akcija brise c"],[-1,"ontent"],[1,"urrency"],[0,".\n    @ndb.trans"]],"start1":121965,"start2":121965,"length1":38,"length2":39},{"diffs":[[0,"ozvolu 'delete-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        objec"]],"start1":122096,"start2":122096,"length1":38,"length2":39},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":122145,"start2":122145,"length1":38,"length2":39},{"diffs":[[0,".put()\n        c"],[-1,"ontent"],[1,"urrency"],[0,"_key.delete()\n\n#"]],"start1":122240,"start2":122240,"length1":38,"length2":39}]],"length":123680,"saved":false}
{"ts":1379337786241,"patch":[[{"diffs":[[0,"urrency("],[1,")\n        currency."],[0,"name"],[-1,"="],[1," = "],[0,"var_name"],[-1,", "],[1,"\n        currency."],[0,"symbol"],[-1,"="],[1," = "],[0,"var_symb"]],"start1":120520,"start2":120520,"length1":38,"length2":77},{"diffs":[[0,"r_symbol"],[-1,", code=var_code, "],[1,"\n        currency.code = var_code\n        currency."],[0,"numeric_"]],"start1":120591,"start2":120591,"length1":33,"length2":67},{"diffs":[[0,"numeric_code"],[-1,"="],[1," = "],[0,"var_numeric_"]],"start1":120650,"start2":120650,"length1":25,"length2":27},{"diffs":[[0,"ric_code"],[-1,", "],[0,"\n       "]],"start1":120673,"start2":120673,"length1":18,"length2":16},{"diffs":[[0,"        "],[1,"currency."],[0,"rounding"],[-1,"="],[1," = "],[0,"var_roun"]],"start1":120682,"start2":120682,"length1":25,"length2":36},{"diffs":[[0,"var_rounding"],[-1,", "],[1,"\n        currency."],[0,"digits"],[-1,"="],[1," = "],[0,"var_digits, "]],"start1":120710,"start2":120710,"length1":33,"length2":51},{"diffs":[[0,"= var_digits"],[-1,", "],[1,"\n        currency."],[0,"active"],[-1,"="],[1," = "],[0,"var_active, "]],"start1":120747,"start2":120747,"length1":33,"length2":51},{"diffs":[[0,"tive"],[-1,", "],[1,"\n        currency."],[0,"grouping"],[-1,"="],[1," = "],[0,"var_"]],"start1":120792,"start2":120792,"length1":19,"length2":37},{"diffs":[[0,"grouping"],[-1,", "],[1,"\n        currency."],[0,"decimal_"]],"start1":120829,"start2":120829,"length1":18,"length2":34},{"diffs":[[0,"al_separator"],[-1,"="],[1," = "],[0,"var_decimal_"]],"start1":120860,"start2":120860,"length1":25,"length2":27},{"diffs":[[0,"eparator"],[-1,", "],[0,"\n       "]],"start1":120888,"start2":120888,"length1":18,"length2":16},{"diffs":[[0,"tor\n        "],[1,"currency."],[0,"thousands_se"]],"start1":120893,"start2":120893,"length1":24,"length2":33},{"diffs":[[0,"eparator"],[-1,"="],[1," = "],[0,"var_thou"]],"start1":120925,"start2":120925,"length1":17,"length2":19},{"diffs":[[0,"eparator"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":120951,"start2":120951,"length1":18,"length2":34},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":120987,"start2":120987,"length1":25,"length2":27},{"diffs":[[0,"position"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121020,"start2":121020,"length1":18,"length2":34},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_negative"]],"start1":121056,"start2":121056,"length1":25,"length2":27},{"diffs":[[0,"position"],[-1,","],[0,"\n       "]],"start1":121089,"start2":121089,"length1":17,"length2":16},{"diffs":[[0,"ion\n        "],[1,"currency."],[0,"positive_sig"]],"start1":121094,"start2":121094,"length1":24,"length2":33},{"diffs":[[0,"ositive_sign"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121116,"start2":121116,"length1":25,"length2":27},{"diffs":[[0,"ive_sign"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121140,"start2":121140,"length1":18,"length2":34},{"diffs":[[0,"ive_sign"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121171,"start2":121171,"length1":17,"length2":19},{"diffs":[[0,"ive_sign"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":121191,"start2":121191,"length1":18,"length2":34},{"diffs":[[0,"bol_precedes"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121238,"start2":121238,"length1":25,"length2":27},{"diffs":[[0,"precedes"],[-1,","],[0,"\n       "]],"start1":121282,"start2":121282,"length1":17,"length2":16},{"diffs":[[0,"des\n        "],[1,"currency."],[0,"negative_cur"]],"start1":121287,"start2":121287,"length1":24,"length2":33},{"diffs":[[0,"precedes"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121333,"start2":121333,"length1":17,"length2":19},{"diffs":[[0,"precedes"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":121373,"start2":121373,"length1":18,"length2":34},{"diffs":[[0,"ate_by_space"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121413,"start2":121413,"length1":25,"length2":27},{"diffs":[[0,"by_space"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121450,"start2":121450,"length1":18,"length2":34},{"diffs":[[0,"by_space"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121494,"start2":121494,"length1":17,"length2":19},{"diffs":[[0,"by_space"],[-1,")"],[0,"\n       "]],"start1":121527,"start2":121527,"length1":17,"length2":16},{"diffs":[[0,"   c"],[-1,"ontent.title = var_title\n        content.category = var_category\n        content.body = var_body\n        content.sequence = var_sequence\n        content.active = var_active"],[1,"urrency.name=var_name\n        currency.symbol=var_symbol\n        currency.code=var_code\n        currency.numeric_code=var_numeric_code\n        currency.rounding=var_rounding\n        currency.digits=var_digits\n        currency.active=var_active\n        currency.grouping=var_grouping\n        currency.decimal_separator=var_decimal_separator\n        currency.thousands_separator=var_thousands_separator\n        currency.positive_sign_position=var_positive_sign_position\n        currency.negative_sign_position=var_negative_sign_position\n        currency.positive_sign=var_positive_sign\n        currency.negative_sign=var_negative_sign\n        currency.positive_currency_symbol_precedes=var_positive_currency_symbol_precedes\n        currency.negative_currency_symbol_precedes=var_negative_currency_symbol_precedes\n        currency.positive_separate_by_space=var_positive_separate_by_space\n        currency.negative_separate_by_space=var_negative_separate_by_space\n        \n        "],[0,"\n   "]],"start1":121890,"start2":121890,"length1":180,"length2":986}]],"length":124778,"saved":false}
{"ts":1379337805124,"patch":[[{"diffs":[[0,"urrency.name"],[-1,"="],[1," = "],[0,"var_name\n   "]],"start1":121894,"start2":121894,"length1":25,"length2":27},{"diffs":[[0,"rency.symbol"],[-1,"="],[1," = "],[0,"var_symbol\n "]],"start1":121929,"start2":121929,"length1":25,"length2":27},{"diffs":[[0,"urrency.code"],[-1,"="],[1," = "],[0,"var_code\n   "]],"start1":121964,"start2":121964,"length1":25,"length2":27},{"diffs":[[0,"numeric_code"],[-1,"="],[1," = "],[0,"var_numeric_"]],"start1":122005,"start2":122005,"length1":25,"length2":27},{"diffs":[[0,"urrency.rounding"],[-1,"="],[1," = "],[0,"var_rounding\n   "]],"start1":122046,"start2":122046,"length1":33,"length2":35},{"diffs":[[0,"rency.digits"],[-1,"="],[1," = "],[0,"var_digits\n "]],"start1":122089,"start2":122089,"length1":25,"length2":27},{"diffs":[[0,"rency.active"],[-1,"="],[1," = "],[0,"var_active\n "]],"start1":122126,"start2":122126,"length1":25,"length2":27},{"diffs":[[0,"grouping"],[-1,"="],[1," = "],[0,"var_grou"]],"start1":122169,"start2":122169,"length1":17,"length2":19},{"diffs":[[0,"al_separator"],[-1,"="],[1," = "],[0,"var_decimal_"]],"start1":122215,"start2":122215,"length1":25,"length2":27},{"diffs":[[0,"eparator"],[-1,"="],[1," = "],[0,"var_thou"]],"start1":122280,"start2":122280,"length1":17,"length2":19},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122342,"start2":122342,"length1":25,"length2":27},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_negative"]],"start1":122411,"start2":122411,"length1":25,"length2":27},{"diffs":[[0,"ositive_sign"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122471,"start2":122471,"length1":25,"length2":27},{"diffs":[[0,"ive_sign"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122526,"start2":122526,"length1":17,"length2":19},{"diffs":[[0,"bol_precedes"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122593,"start2":122593,"length1":25,"length2":27},{"diffs":[[0,"precedes"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122688,"start2":122688,"length1":17,"length2":19},{"diffs":[[0,"ate_by_space"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122768,"start2":122768,"length1":25,"length2":27},{"diffs":[[0,"by_space"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122849,"start2":122849,"length1":17,"length2":19},{"diffs":[[0,"ace\n"],[-1,"        \n        \n"],[0,"    "]],"start1":122887,"start2":122887,"length1":26,"length2":8}]],"length":124796,"saved":false}
{"ts":1379338152264,"patch":[[{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'open'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'sending' : (1, ),\n        'sent' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira postojeci store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n##############"]],"start1":123654,"start2":123654,"length1":32,"length2":3223}]],"length":127987,"saved":false}
{"ts":1379338488253,"patch":[[{"diffs":[[0,"   '"],[-1,"send"],[1,"prepare' : (1, ),\n        'process"],[0,"ing' : ("],[-1,"1"],[1,"2"],[0,", ),"]],"start1":124181,"start2":124181,"length1":21,"length2":51},{"diffs":[[0,"   '"],[-1,"sent"],[1,"completed"],[0,"' : ("],[-1,"2"],[1,"3"],[0,", ),"]],"start1":124238,"start2":124238,"length1":18,"length2":23},{"diffs":[[0,"   '"],[-1,"update' : 2,\n       'close' : 3,\n       'open"],[1,"complete"],[0,"' : "],[-1,"4"],[1,"2"],[0,",\n  "]],"start1":124321,"start2":124321,"length1":58,"length2":21},{"diffs":[[0,"NS = {\n        '"],[-1,"open"],[1,"process"],[0,"' : {\n          "]],"start1":124371,"start2":124371,"length1":36,"length2":39},{"diffs":[[0,"     'from' : ('"],[-1,"closed"],[1,"preparation"],[0,"',),\n           "]],"start1":124407,"start2":124407,"length1":38,"length2":43},{"diffs":[[0,"       'to' : ('"],[-1,"open"],[1,"processing"],[0,"',),\n         },"]],"start1":124444,"start2":124444,"length1":36,"length2":42},{"diffs":[[0,"ija kreira novi "],[-1,"stor"],[1,"messag"],[0,"e.\n    @ndb.tran"]],"start1":124607,"start2":124607,"length1":36,"length2":38},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'cr"]],"start1":124716,"start2":124716,"length1":39,"length2":32},{"diffs":[[0,"dozvolu 'create-"],[-1,"Stor"],[1,"Messag"],[0,"e'.\n        # ak"]],"start1":124737,"start2":124737,"length1":36,"length2":38},{"diffs":[[0,"    "],[-1,"# akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='ope"],[1,"message = Message(outlet=var_outlet, group=var_group, state='preparatio"],[0,"n')\n"]],"start1":124767,"start2":124767,"length1":133,"length2":79},{"diffs":[[0,"        "],[-1,"stor"],[1,"messag"],[0,"e_key = "],[-1,"stor"],[1,"messag"],[0,"e.put()\n"]],"start1":124846,"start2":124846,"length1":32,"length2":36},{"diffs":[[0,"bjectLog(parent="],[-1,"stor"],[1,"messag"],[0,"e_key, agent=age"]],"start1":124904,"start2":124904,"length1":36,"length2":38},{"diffs":[[0,"'create', state="],[-1,"stor"],[1,"messag"],[0,"e.state, log=sto"]],"start1":124957,"start2":124957,"length1":36,"length2":38},{"diffs":[[0,"sage.state, "],[-1,"log=store"],[1,"message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!'"],[0,")\n        ob"]],"start1":124976,"start2":124976,"length1":33,"length2":159},{"diffs":[[0,"urira postojeci "],[-1,"stor"],[1,"messag"],[0,"e.\n    @ndb.tran"]],"start1":125174,"start2":125174,"length1":36,"length2":38}]],"length":128078,"saved":false}
{"ts":1379338504433,"patch":[[{"diffs":[[0,"   },\n        'c"],[-1,"los"],[1,"omplet"],[0,"e' : {\n         "]],"start1":124481,"start2":124481,"length1":35,"length2":38},{"diffs":[[0,"     'from' : ('"],[-1,"open"],[1,"processing"],[0,"', ),\n          "]],"start1":124516,"start2":124516,"length1":36,"length2":42},{"diffs":[[0,"    'to'   : ('c"],[-1,"los"],[1,"omplet"],[0,"ed',),\n        }"]],"start1":124555,"start2":124555,"length1":35,"length2":38}]],"length":128090,"saved":false}
{"ts":1379346272109,"patch":[[{"diffs":[[0,"   '"],[-1,"prepare"],[1,"composing"],[0,"' : "]],"start1":124181,"start2":124181,"length1":15,"length2":17},{"diffs":[[0,"om' : ('"],[-1,"preparation"],[1,"composing"],[0,"',),\n   "]],"start1":124417,"start2":124417,"length1":27,"length2":25},{"diffs":[[0,"te='"],[-1,"preparation"],[1,"composing"],[0,"')\n "]],"start1":124840,"start2":124840,"length1":19,"length2":17}]],"length":128088,"saved":false}
{"ts":1379346276165,"patch":[[{"diffs":[[0,"       '"],[-1,"process"],[1,"send"],[0,"' : {\n  "]],"start1":124381,"start2":124381,"length1":23,"length2":20}]],"length":128085,"saved":false}
{"ts":1379346354697,"patch":[[{"diffs":[[0,"dozvolu 'update-"],[-1,"Stor"],[1,"Messag"],[0,"e'.\n        # ak"]],"start1":125318,"start2":125318,"length1":36,"length2":38},{"diffs":[[0," je "],[-1,"domain.state == 'active' i stor"],[1,"messag"],[0,"e.st"]],"start1":125385,"start2":125385,"length1":39,"length2":14},{"diffs":[[0,"ssage.state == '"],[-1,"open"],[1,"composing"],[0,"'.\n        store"]],"start1":125391,"start2":125391,"length1":36,"length2":41}]],"length":128067,"saved":false}
{"ts":1379346458869,"patch":[[{"diffs":[[0,"d' : (3, ),\n"],[1,"        'canceled' : (4, ),\n"],[0,"    }\n    \n "]],"start1":124252,"start2":124252,"length1":24,"length2":52},{"diffs":[[0,"',),\n        },\n"],[1,"        'cancel' : {\n           'from' : ('composing', ),\n           'to'   : ('canceled',),\n        },\n"],[0,"    }\n    \n    #"]],"start1":124604,"start2":124604,"length1":32,"length2":136}]],"length":128199,"saved":false}
{"ts":1379346471756,"patch":[[{"diffs":[[0,"processing',"],[-1," "],[0,"),\n         "]],"start1":124557,"start2":124557,"length1":25,"length2":24},{"diffs":[[0,"'composing',"],[-1," "],[0,"),\n         "]],"start1":124661,"start2":124661,"length1":25,"length2":24}]],"length":128197,"saved":false}
{"ts":1379346499678,"patch":[[{"diffs":[[0,"g'.\n"],[-1,"        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n"],[0,"    "]],"start1":125545,"start2":125545,"length1":100,"length2":8},{"diffs":[[0,"bjectLog(parent="],[-1,"stor"],[1,"messag"],[0,"e_key, agent=age"]],"start1":125571,"start2":125571,"length1":36,"length2":38},{"diffs":[[0,"nt_key, action='"],[-1,"upd"],[1,"cre"],[0,"ate', state=stor"]],"start1":125609,"start2":125609,"length1":35,"length2":35},{"diffs":[[0,"'create', state="],[-1,"stor"],[1,"messag"],[0,"e.state, log=sto"]],"start1":125624,"start2":125624,"length1":36,"length2":38},{"diffs":[[0,"sage.state, "],[-1,"log=store"],[1,"message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!'"],[0,")\n        ob"]],"start1":125643,"start2":125643,"length1":33,"length2":159}]],"length":128235,"saved":false}
{"ts":1379346512672,"patch":[[{"diffs":[[0,"nt_key, action='"],[-1,"cre"],[1,"upd"],[0,"ate', state=mess"]],"start1":125609,"start2":125609,"length1":35,"length2":35}]],"length":128235,"saved":false}
{"ts":1379346609667,"patch":[[{"diffs":[[0," akcija "],[-1,"zatvara otvoren store"],[1,"salje poruku"],[0,". Ovde c"]],"start1":125831,"start2":125831,"length1":37,"length2":28},{"diffs":[[0,"ctional\n    def "],[-1,"clo"],[0,"se"],[1,"nd"],[0,"():\n        # ov"]],"start1":125916,"start2":125916,"length1":37,"length2":36},{"diffs":[[0,"ic dozvolu '"],[-1,"close-Stor"],[1,"send-Messag"],[0,"e'.\n        "]],"start1":126008,"start2":126008,"length1":34,"length2":35},{"diffs":[[0," je "],[-1,"domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[1,"message.state == 'composing'."],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"# Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain"],[1,"message"],[0,".state ="],[-1,"="],[0," '"],[-1,"active' i store.state == 'closed'.\n        store.state = 'open"],[1,"processing"],[0,"'\n  "]],"start1":126076,"start2":126076,"length1":733,"length2":73},{"diffs":[[0,"        "],[-1,"stor"],[1,"messag"],[0,"e_key = "],[-1,"stor"],[1,"messag"],[0,"e.put()\n"]],"start1":126147,"start2":126147,"length1":32,"length2":36},{"diffs":[[0,"bjectLog(parent="],[-1,"stor"],[1,"messag"],[0,"e_key, agent=age"]],"start1":126205,"start2":126205,"length1":36,"length2":38},{"diffs":[[0,"nt_key, action='"],[-1,"open"],[1,"close"],[0,"', state=store.s"]],"start1":126243,"start2":126243,"length1":36,"length2":37},{"diffs":[[0,"ate="],[-1,"store.state, message='poruka od agenta - obavezno polje!'"],[1,"message.state"],[0,", no"]],"start1":126269,"start2":126269,"length1":65,"length2":21}]],"length":127529,"saved":false}
{"ts":1379346763865,"patch":[[{"diffs":[[0,"nt_key, action='"],[-1,"clos"],[1,"send', state=message.state, note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija oznacava poruku kao poslanu. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def complete():\n        # Ovu akciju poziva sistem sa eventualnim izvestajem sta je uradjeno.\n        # akcija se moze pozvati samo ako je message.state == 'processing'.\n        message.state = 'completed'\n        message_key = message.put()\n        object_log = ObjectLog(parent=message_key, agent=agent_key, action='complet"],[0,"e', state=messag"]],"start1":126243,"start2":126243,"length1":36,"length2":627}]],"length":128120,"saved":false}
{"ts":1379346796172,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        # ovde se dalje inicira distribucija poruke preko task queue....\n"],[0,"    \n    # Ova a"]],"start1":126387,"start2":126387,"length1":32,"length2":105}]],"length":128193,"saved":false}
{"ts":1379346809621,"patch":[[{"diffs":[[0,"isati posledice "],[-1,"zatvar"],[1,"sl"],[0,"anja...\n    @ndb"]],"start1":125871,"start2":125871,"length1":38,"length2":34}]],"length":128189,"saved":false}
{"ts":1379346848134,"patch":[[{"diffs":[[0,"queue..."],[-1,"."],[0,"\n    \n  "]],"start1":126462,"start2":126462,"length1":17,"length2":16}]],"length":128188,"saved":false}
{"ts":1379346985326,"patch":[[{"diffs":[[0,"i posledice "],[-1,"zatvaranja"],[1,"oznacavanja poruke kao poslane"],[0,"...\n    @ndb"]],"start1":126544,"start2":126544,"length1":34,"length2":54},{"diffs":[[0,"      # "],[-1,"O"],[1,"o"],[0,"vu akcij"]],"start1":126635,"start2":126635,"length1":17,"length2":17},{"diffs":[[0,"a sistem"],[1,"ski agent"],[0," sa even"]],"start1":126659,"start2":126659,"length1":16,"length2":25},{"diffs":[[0,"avezno polje!')\n"],[-1,""],[0,"        object_l"]],"start1":127051,"start2":127051,"length1":32,"length2":32},{"diffs":[[0,"object_log.put()"],[1,"\n    \n    # Ova akcija obustavlja poruku. Ovde cemo dalje opisati posledice obustavljanja...\n    @ndb.transactional\n    def cancel():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'cancel-Message'.\n        # akcija se moze pozvati samo ako je message.state == 'composing'.\n        message.state = 'processing'\n        message_key = message.put()\n        object_log = ObjectLog(parent=message_key, agent=agent_key, action='cancel', state=message.state, note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # ovde se dalje inicira distribucija poruke preko task queue..."],[0,"\n\n##############"]],"start1":127075,"start2":127075,"length1":32,"length2":704}]],"length":128889,"saved":false}
{"ts":1379347020552,"patch":[[{"diffs":[[0,"ge.state = '"],[-1,"processing"],[1,"canceled"],[0,"'\n        me"]],"start1":127410,"start2":127410,"length1":34,"length2":32}]],"length":128887,"saved":false}
{"ts":1379347046163,"patch":[[{"diffs":[[0,"ut()"],[-1,"\n        # ovde se dalje inicira distribucija poruke preko task queue..."],[0,"\n\n##"]],"start1":127685,"start2":127685,"length1":80,"length2":8}]],"length":128815,"saved":false}
{"ts":1379347669994,"patch":[[{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'up"]],"start1":125420,"start2":125420,"length1":39,"length2":32},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'se"]],"start1":125972,"start2":125972,"length1":39,"length2":32},{"diffs":[[0,"ete():\n        #"],[1," ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'complete-Message'."],[0," ovu akciju pozi"]],"start1":126612,"start2":126612,"length1":32,"length2":114},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'ca"]],"start1":127336,"start2":127336,"length1":39,"length2":32}]],"length":128876,"saved":false}
{"ts":1379347811174,"patch":[[{"diffs":[[0,"EFAULT_STATE = '"],[-1,"open"],[1,"composing"],[0,"'\n    \n    OBJEC"]],"start1":123707,"start2":123707,"length1":36,"length2":41}]],"length":128881,"saved":false}
{"ts":1379348395796,"patch":[[{"diffs":[[0,"   '"],[-1,"complete' : 2"],[1,"update' : 2,\n       'send' : 3,\n       'complete' : 4,\n       'cancel' : 5"],[0,",\n  "]],"start1":124356,"start2":124356,"length1":21,"length2":82}]],"length":128942,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379417759477,"patch":[[{"diffs":[[0,"=False)\n\n# done!"],[1," mozda bude trebala kontrola i ovde"],[0,"\nclass Store(ndb"]],"start1":16551,"start2":16551,"length1":32,"length2":67},{"diffs":[[0,"ame="],[-1,"'Ho"],[1,"var_na"],[0,"me"],[-1,"'"],[0,", co"]],"start1":74654,"start2":74654,"length1":14,"length2":16},{"diffs":[[0,"try="],[-1,"'82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533'"],[1,"var_country, city=var_city, postal_code=var_postal_code, street_address=var_street_address, region=var_region"],[0,")\n  "]],"start1":74672,"start2":74672,"length1":116,"length2":117},{"diffs":[[0,"vrsiti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_addr"]],"start1":75098,"start2":75098,"length1":36,"length2":40},{"diffs":[[0,"e = "],[-1,"'Home in Miami'"],[1,"var_name"],[0,"\n   "]],"start1":75185,"start2":75185,"length1":23,"length2":16},{"diffs":[[0,"y = "],[-1,"'82736563'"],[1,"var_country"],[0,"\n   "]],"start1":75226,"start2":75226,"length1":18,"length2":19},{"diffs":[[0,"y = "],[-1,"'Miami'"],[1,"var_city"],[0,"\n   "]],"start1":75267,"start2":75267,"length1":15,"length2":16},{"diffs":[[0,"e = "],[-1,"'26547'"],[1,"var_postal_code"],[0,"\n   "]],"start1":75312,"start2":75312,"length1":15,"length2":23},{"diffs":[[0,"s = "],[-1,"'Second Street, 10'"],[1,"var_street_address"],[0,"\n   "]],"start1":75367,"start2":75367,"length1":27,"length2":26},{"diffs":[[0,"n = "],[-1,"'514133'"],[1,"var_region"],[0,"\n   "]],"start1":75417,"start2":75417,"length1":16,"length2":18},{"diffs":[[0,"vrsiti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_addr"]],"start1":75741,"start2":75741,"length1":36,"length2":40},{"diffs":[[0,"   notif"],[-1,"ications"],[1,"y"],[0," = ndb.B"]],"start1":76257,"start2":76257,"length1":24,"length2":17},{"diffs":[[0,"u ko"],[-1,"lekciju za korisnika"],[1,"risnikovu kolekciju"],[0,"\n   "]],"start1":76559,"start2":76559,"length1":28,"length2":27},{"diffs":[[0,"                "],[-1,"use"],[1,"va"],[0,"r_primary_email "]],"start1":76781,"start2":76781,"length1":35,"length2":34},{"diffs":[[0,"ame="],[-1,"'Favorites', notifications=True"],[1,"var_name, notify=var_notify"],[0,", pr"]],"start1":76915,"start2":76915,"length1":39,"length2":35},{"diffs":[[0,"y_email="],[-1,"use"],[1,"va"],[0,"r_primar"]],"start1":76954,"start2":76954,"length1":19,"length2":18},{"diffs":[[0,"ojecu ko"],[-1,"lekciju korisnika"],[1,"risnikovu kolekciju"],[0,"\n    @nd"]],"start1":77212,"start2":77212,"length1":33,"length2":35},{"diffs":[[0,"vrsiti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_coll"]],"start1":77309,"start2":77309,"length1":36,"length2":40},{"diffs":[[0,"e = "],[-1,"'Shoes'"],[1,"var_name"],[0,"\n   "]],"start1":77402,"start2":77402,"length1":15,"length2":16},{"diffs":[[0,"otif"],[-1,"ications = True"],[1,"y = var_notify"],[0,"\n   "]],"start1":77441,"start2":77441,"length1":23,"length2":22},{"diffs":[[0,"        "],[-1,"use"],[1,"va"],[0,"r_primar"]],"start1":77551,"start2":77551,"length1":19,"length2":18},{"diffs":[[0,"email = "],[-1,"use"],[1,"va"],[0,"r_primar"]],"start1":77649,"start2":77649,"length1":19,"length2":18},{"diffs":[[0,"u ko"],[-1,"lekciju korisnika"],[1,"risnikovu kolekciju"],[0,"\n   "]],"start1":77908,"start2":77908,"length1":25,"length2":27},{"diffs":[[0,"vrsiti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_coll"]],"start1":78001,"start2":78001,"length1":36,"length2":40},{"diffs":[[0,"ikov"],[-1,"u"],[1,"oj"],[0," list"],[-1,"u"],[1,"i"],[0," i o"]],"start1":78655,"start2":78655,"length1":15,"length2":16},{"diffs":[[0,"tvo u ko"],[-1,"lekcijama korisnik"],[1,"risnikovim kolekcijam"],[0,"a\n    @n"]],"start1":78685,"start2":78685,"length1":34,"length2":37},{"diffs":[[0,"ore="],[-1,"'7464536'"],[1,"var_store"],[0,", co"]],"start1":78904,"start2":78904,"length1":17,"length2":17},{"diffs":[[0,"ons="],[-1,"['1234']"],[1,"var_collections"],[0,")\n  "]],"start1":78927,"start2":78927,"length1":16,"length2":23},{"diffs":[[0,"u ko"],[-1,"lekcijama korisnik"],[1,"risnikovim kolekcijam"],[0,"a\n  "]],"start1":79289,"start2":79289,"length1":26,"length2":29},{"diffs":[[0,"vrsiti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_coll"]],"start1":79385,"start2":79385,"length1":36,"length2":40},{"diffs":[[0,"s = "],[-1,"['1234', '56433']"],[1,"var_collections"],[0,"\n   "]],"start1":79497,"start2":79497,"length1":25,"length2":23},{"diffs":[[0,"ti samo "],[-1,"entity owner"],[1,"vlasnik entiteta"],[0," (buyer_"]],"start1":79943,"start2":79943,"length1":28,"length2":32},{"diffs":[[0,"ser_key)"],[-1,""],[1,".fetch(keys_only=True)"],[0,")\n\n# don"]],"start1":80415,"start2":80415,"length1":16,"length2":38},{"diffs":[[0,"# ov"],[-1,"o moze biti dobra situacija za upotrebu MapReduce ??"],[1,"aj model bi se trebao ukinuti u korist MapReduce resenja, koje bi bilo superiornije od ovog"],[0,"\n   "]],"start1":80842,"start2":80842,"length1":60,"length2":99}]],"length":129069,"saved":false}
{"ts":1379417916641,"patch":[[{"diffs":[[0,"in)\n"],[-1,"    # ancestor User (for caching/optimization purposes) - Role(namespace=domain_key, parent=user_key, id=str(role_key.id()), ....)\n"],[0,"    "]],"start1":7815,"start2":7815,"length1":139,"length2":8}]],"length":128938,"saved":false}
{"ts":1379417926576,"patch":[[{"diffs":[[0,"in)\n"],[-1,"    # TREBA TESTIRATI DA LI RADE QUERY: Role.query(namespace=..., ancestor=..., id=....)\n"],[0,"    "]],"start1":7815,"start2":7815,"length1":97,"length2":8}]],"length":128849,"saved":false}
{"ts":1379418229724,"patch":[[{"diffs":[[0,"    "],[-1,"user = User(state='active', emails=['user@email.com',], "],[1,"var_"],[0,"iden"]],"start1":67344,"start2":67344,"length1":64,"length2":12},{"diffs":[[0,"entities"],[-1,"=["],[1," = "],[0,"UserIden"]],"start1":67354,"start2":67354,"length1":18,"length2":19},{"diffs":[[0,"ry=True)"],[1,"\n        user = User(state='active', emails=var_emails, identities=["],[0,",])\n    "]],"start1":67443,"start2":67443,"length1":16,"length2":84}]],"length":128866,"saved":false}
{"ts":1379418445879,"patch":[[{"diffs":[[0,"s = "],[-1,"UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True"],[1,"[]\n        var_emails = []\n        var_identities.append(UserIdentity(identity=var_identity, email=var_email, associated=True, primary=True))\n        var_emails.append(var_email"],[0,")\n  "]],"start1":67361,"start2":67361,"length1":93,"length2":185},{"diffs":[[0,"ies="],[-1,"[,]"],[1,"var_identities"],[0,")\n  "]],"start1":67606,"start2":67606,"length1":11,"length2":22}]],"length":128969,"saved":false}
{"ts":1379418597430,"patch":[[{"diffs":[[0,"    "],[-1,"state = ndb.IntegerProperty("],[1,"identities = ndb.StructuredProperty(UserIdentity, "],[0,"'1', re"],[-1,"quir"],[1,"peat"],[0,"ed=True)"],[1,"# soft limit 100x"],[0,"\n   "]],"start1":65691,"start2":65691,"length1":55,"length2":94},{"diffs":[[0,"    "],[-1,"identities = ndb.StructuredProperty(UserIdentity, "],[1,"state = ndb.IntegerProperty("],[0,"'3', re"],[-1,"peat"],[1,"quir"],[0,"ed=True)"],[-1,"# soft limit 100x"],[0,"\n   "]],"start1":65851,"start2":65851,"length1":94,"length2":55}]],"length":128969,"saved":false}
{"ts":1379418625578,"patch":[[{"diffs":[[0,"ser("],[-1,"state='active', emails=var_emails, identities=var_identities"],[1,"identities=var_identities, emails=var_emails, state='active'"],[0,")\n  "]],"start1":67560,"start2":67560,"length1":68,"length2":68}]],"length":128969,"saved":false}
{"ts":1379418734065,"patch":[[{"diffs":[[0," ip_address="],[-1,"'127.0.0.1'"],[1,"var_ip_address"],[0,")\n        us"]],"start1":67933,"start2":67933,"length1":35,"length2":38}]],"length":128972,"saved":false}
{"ts":1379418792947,"patch":[[{"diffs":[[0,"s = "],[-1,"['user@email.com',]"],[1,"var_emails"],[0,"\n   "]],"start1":68143,"start2":68143,"length1":27,"length2":18},{"diffs":[[0,"s = "],[-1,"[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]"],[1,"var_identities"],[0,"\n   "]],"start1":68180,"start2":68180,"length1":97,"length2":22}]],"length":128888,"saved":false}
{"ts":1379419567602,"patch":[[{"diffs":[[0,"user_key, agent="],[-1,"user"],[1,"agent"],[0,"_key, action='up"]],"start1":68267,"start2":68267,"length1":36,"length2":37},{"diffs":[[0,"user_key, agent="],[-1,"'"],[0,"agent_key', acti"]],"start1":70930,"start2":70930,"length1":33,"length2":32},{"diffs":[[0," agent=agent_key"],[-1,"'"],[0,", action='suspen"]],"start1":70939,"start2":70939,"length1":33,"length2":32}]],"length":128887,"saved":false}
{"ts":1379420599446,"patch":[[{"diffs":[[0,"ss\n    #Expando\n"],[1,"    # roles = ndb.KeyProperty('4', kind=DomainRole, repeated=True)\n"],[0,"    \n    _KIND ="]],"start1":65938,"start2":65938,"length1":32,"length2":99}]],"length":128954,"saved":false}
{"ts":1379420717337,"patch":[[{"diffs":[[0,"perty('3', kind="],[1,"Domain"],[0,"Role, repeated=T"]],"start1":11109,"start2":11109,"length1":32,"length2":38}]],"length":128960,"saved":false}
{"ts":1379420858877,"patch":[[{"diffs":[[0,"r.query("],[1,"DomainUser."],[0,"roles =="]],"start1":9881,"start2":9881,"length1":16,"length2":27}]],"length":128971,"saved":false}
{"ts":1379421202761,"patch":[[{"diffs":[[0,"d=True)\n    "],[1,"domain_"],[0,"roles = ndb."]],"start1":11090,"start2":11090,"length1":24,"length2":31}]],"length":128978,"saved":false}
{"ts":1379421263029,"patch":[[{"diffs":[[0,"(DomainUser."],[1,"domain_"],[0,"roles == dom"]],"start1":9888,"start2":9888,"length1":24,"length2":31},{"diffs":[[0,"domain_user."],[1,"domain_"],[0,"roles.remove"]],"start1":10017,"start2":10017,"length1":24,"length2":31},{"diffs":[[0,"           user."],[1,"domain_"],[0,"roles.remove(dom"]],"start1":10439,"start2":10439,"length1":32,"length2":39}]],"length":128999,"saved":false}
{"ts":1379421327130,"patch":[[{"diffs":[[0,"rs:\n"],[-1,"            if (user.state == 'active'):\n    "],[0,"    "]],"start1":10389,"start2":10389,"length1":53,"length2":8},{"diffs":[[0,"ey)\n            "],[-1,"    "],[0,"user_key = user."]],"start1":10443,"start2":10443,"length1":36,"length2":32},{"diffs":[[0,"ey = user.put()\n"],[-1,"    "],[0,"            obje"]],"start1":10465,"start2":10465,"length1":36,"length2":32},{"diffs":[[0,"tate, log=user)\n"],[-1,"    "],[0,"            obje"]],"start1":10579,"start2":10579,"length1":36,"length2":32}]],"length":128942,"saved":false}
{"ts":1379421331784,"patch":[[{"diffs":[[0,"t()\n"],[-1,"            \n"],[0,"    "]],"start1":10620,"start2":10620,"length1":21,"length2":8}]],"length":128929,"saved":false}
{"ts":1379421371853,"patch":[[{"diffs":[[0,"r_user, "],[1,"domain_"],[0,"roles=va"]],"start1":12468,"start2":12468,"length1":16,"length2":23},{"diffs":[[0,"n_roles=var_"],[1,"domain_"],[0,"roles, state"]],"start1":12481,"start2":12481,"length1":24,"length2":31}]],"length":128943,"saved":false}
{"ts":1379421445437,"patch":[[{"diffs":[[0," in domain_user."],[1,"domain_"],[0,"roles:\n         "]],"start1":13389,"start2":13389,"length1":32,"length2":39}]],"length":128950,"saved":false}
{"ts":1379421514025,"patch":[[{"diffs":[[0,"            for "],[1,"domain_"],[0,"role in domain_u"]],"start1":13369,"start2":13369,"length1":32,"length2":39},{"diffs":[[0,"           user."],[1,"domain_"],[0,"roles.remove(rol"]],"start1":13431,"start2":13431,"length1":32,"length2":39},{"diffs":[[0,"in_roles.remove("],[1,"domain_"],[0,"role)\n          "]],"start1":13451,"start2":13451,"length1":32,"length2":39}]],"length":128971,"saved":false}
{"ts":1379421742401,"patch":[[{"diffs":[[0,"            for "],[1,"domain_"],[0,"role in domain_u"]],"start1":14392,"start2":14392,"length1":32,"length2":39},{"diffs":[[0," in domain_user."],[1,"domain_"],[0,"roles:\n         "]],"start1":14419,"start2":14419,"length1":32,"length2":39},{"diffs":[[0,"           user."],[1,"domain_"],[0,"roles.append(rol"]],"start1":14454,"start2":14454,"length1":32,"length2":39},{"diffs":[[0,"in_roles.append("],[1,"domain_"],[0,"role)\n          "]],"start1":14474,"start2":14474,"length1":32,"length2":39},{"diffs":[[0,"        old_"],[1,"domain_"],[0,"roles = doma"]],"start1":14937,"start2":14937,"length1":24,"length2":31},{"diffs":[[0,"domain_user."],[1,"domain_"],[0,"roles\n      "]],"start1":14964,"start2":14964,"length1":24,"length2":31},{"diffs":[[0,"domain_user."],[1,"domain_"],[0,"roles = var_"]],"start1":15033,"start2":15033,"length1":24,"length2":31},{"diffs":[[0,"s = var_"],[1,"domain_"],[0,"roles\n  "]],"start1":15056,"start2":15056,"length1":16,"length2":23},{"diffs":[[0,"            for "],[1,"domain_"],[0,"role in old_role"]],"start1":15352,"start2":15352,"length1":32,"length2":39},{"diffs":[[0," in old_"],[1,"domain_"],[0,"roles:\n "]],"start1":15379,"start2":15379,"length1":16,"length2":23},{"diffs":[[0,"       user."],[1,"domain_"],[0,"roles.remove"]],"start1":15410,"start2":15410,"length1":24,"length2":31},{"diffs":[[0,".remove("],[1,"domain_"],[0,"role)\n  "]],"start1":15434,"start2":15434,"length1":16,"length2":23},{"diffs":[[0,"    for "],[1,"domain_"],[0,"role in "]],"start1":15463,"start2":15463,"length1":16,"length2":23},{"diffs":[[0,"domain_user."],[1,"domain_"],[0,"roles:\n     "]],"start1":15486,"start2":15486,"length1":24,"length2":31},{"diffs":[[0,"           user."],[1,"domain_"],[0,"roles.append(rol"]],"start1":15517,"start2":15517,"length1":32,"length2":39},{"diffs":[[0,".append("],[1,"domain_"],[0,"role)\n  "]],"start1":15545,"start2":15545,"length1":16,"length2":23}]],"length":129083,"saved":false}
{"ts":1379421944686,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        if (user.state == 'active'):\n    "],[0,"    "]],"start1":13328,"start2":13328,"length1":49,"length2":8},{"diffs":[[0,"es:\n            "],[-1,"  "],[-1,"  "],[0,"user.domain_role"]],"start1":13381,"start2":13381,"length1":36,"length2":32},{"diffs":[[0,"n_role)\n        "],[-1,"    "],[0,"user_key = user."]],"start1":13427,"start2":13427,"length1":36,"length2":32},{"diffs":[[0,"ey = user.put()\n"],[-1,"    "],[0,"        object_l"]],"start1":13449,"start2":13449,"length1":36,"length2":32},{"diffs":[[0,"tate, log=user)\n"],[-1,"    "],[0,"        object_l"]],"start1":13559,"start2":13559,"length1":36,"length2":32}]],"length":129026,"saved":false}
{"ts":1379422247648,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        if (user.state == 'active'):\n    "],[0,"    "]],"start1":14294,"start2":14294,"length1":49,"length2":8},{"diffs":[[0,"es:\n            "],[-1,"  "],[-1,"  "],[0,"user.domain_role"]],"start1":14347,"start2":14347,"length1":36,"length2":32},{"diffs":[[0,"n_role)\n        "],[-1,"    "],[0,"user_key = user."]],"start1":14393,"start2":14393,"length1":36,"length2":32},{"diffs":[[0,"ey = user.put()\n"],[-1,"    "],[0,"        object_l"]],"start1":14415,"start2":14415,"length1":36,"length2":32},{"diffs":[[0,"tate, log=user)\n"],[-1,"    "],[0,"        object_l"]],"start1":14525,"start2":14525,"length1":36,"length2":32}]],"length":128969,"saved":false}
{"ts":1379422272766,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        if (user.state == 'active'):\n    "],[0,"    "]],"start1":15197,"start2":15197,"length1":49,"length2":8},{"diffs":[[0,"es:\n            "],[-1,"    "],[0,"user.domain_role"]],"start1":15242,"start2":15242,"length1":36,"length2":32},{"diffs":[[0,"ve(domain_role)\n"],[-1,"    "],[0,"        for doma"]],"start1":15280,"start2":15280,"length1":36,"length2":32},{"diffs":[[0,"es:\n            "],[-1,"    "],[0,"user.domain_role"]],"start1":15345,"start2":15345,"length1":36,"length2":32},{"diffs":[[0,"n_role)\n        "],[-1,"    "],[0,"user_key = user."]],"start1":15391,"start2":15391,"length1":36,"length2":32},{"diffs":[[0,"ey = user.put()\n"],[-1,"    "],[0,"        object_l"]],"start1":15413,"start2":15413,"length1":36,"length2":32},{"diffs":[[0,"tate, log=user)\n"],[-1,"    "],[0,"        object_l"]],"start1":15523,"start2":15523,"length1":36,"length2":32}]],"length":128904,"saved":false}
{"ts":1379422301918,"patch":[[{"diffs":[[0,"ctive'):"],[1,"# da li uvoditi ovaj check jos negde ?"],[0,"\n       "]],"start1":12377,"start2":12377,"length1":16,"length2":54}]],"length":128942,"saved":false}
{"ts":1379422323105,"patch":[[{"diffs":[[0,"os negde"],[1,", ili ga izbaciti i odavde"],[0," ?"],[1," "],[0,"\n       "]],"start1":12413,"start2":12413,"length1":18,"length2":45}]],"length":128969,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380306262268,"patch":[[{"diffs":[[0,"ng=UTF-8"],[1,"\n# http://www.python.org/dev/peps/pep-0008/"],[0,"\n\n#MASTE"]],"start1":5,"start2":5,"length1":16,"length2":59},{"diffs":[[0,"mport *\n"],[-1,"\n"],[1,"import re\n\n# mozda ce nam trebati mehanizam da mozemo u constructoru supply keyword arguemnte kao napr:  digits=int(2), rounding=..."],[0,"\nclass D"]],"start1":2609,"start2":2609,"length1":17,"length2":148},{"diffs":[[0,"g.put()\n        "],[-1,"domain_"],[0,"role = DomainRol"]],"start1":5071,"start2":5071,"length1":39,"length2":32},{"diffs":[[0,"y=True)\n        "],[-1,"domain_"],[0,"role_key = domai"]],"start1":5176,"start2":5176,"length1":39,"length2":32},{"diffs":[[0,"     role_key = "],[-1,"domain_"],[0,"role.put()\n     "]],"start1":5187,"start2":5187,"length1":39,"length2":32},{"diffs":[[0,"bjectLog(parent="],[-1,"domain_"],[0,"role_key, agent="]],"start1":5236,"start2":5236,"length1":39,"length2":32},{"diffs":[[0,"ate='none', log="],[-1,"domain_"],[0,"role)\n        ob"]],"start1":5297,"start2":5297,"length1":39,"length2":32},{"diffs":[[0," roles=["],[-1,"domain_"],[0,"role_key"]],"start1":5458,"start2":5458,"length1":23,"length2":16},{"diffs":[[0,"oles.append("],[-1,"domain_"],[0,""],[1,""],[0,"role_key)\n  "]],"start1":5739,"start2":5739,"length1":31,"length2":24},{"diffs":[[0,"e'.\n        "],[-1,"domain_"],[0,"role = Domai"]],"start1":8692,"start2":8692,"length1":31,"length2":24},{"diffs":[[0,"ame="],[-1,"'Store Managers', permissions=['create_store', 'update_store',]"],[1,"var_name, permissions=var_permissions"],[0,", re"]],"start1":8723,"start2":8723,"length1":71,"length2":45},{"diffs":[[0,"d Roles\n        "],[-1,"domain_"],[0,"role_key = domai"]],"start1":8823,"start2":8823,"length1":39,"length2":32},{"diffs":[[0,"     role_key = "],[-1,"domain_"],[0,"role.put()\n     "]],"start1":8834,"start2":8834,"length1":39,"length2":32},{"diffs":[[0,"bjectLog(parent="],[-1,"domain_"],[0,"role_key, agent="]],"start1":8883,"start2":8883,"length1":39,"length2":32},{"diffs":[[0,"ate='none', log="],[-1,"domain_"],[0,"role)\n        ob"]],"start1":8945,"start2":8945,"length1":39,"length2":32},{"diffs":[[0,"e'.\n        "],[-1,"domain_"],[0,"role.name = "]],"start1":9241,"start2":9241,"length1":31,"length2":24},{"diffs":[[0,"e = "],[-1,"'New Store Managers'"],[1,"var_name"],[0,"\n   "]],"start1":9261,"start2":9261,"length1":28,"length2":16},{"diffs":[[0,"ame\n        "],[-1,"domain_"],[0,"role.permiss"]],"start1":9270,"start2":9270,"length1":31,"length2":24},{"diffs":[[0,"s = "],[-1,"['create_store',]"],[1,"var_permissions"],[0,"\n   "]],"start1":9297,"start2":9297,"length1":25,"length2":23},{"diffs":[[0,"issions\n        "],[-1,"domain_"],[0,"role_key = domai"]],"start1":9309,"start2":9309,"length1":39,"length2":32},{"diffs":[[0,"e_key = "],[-1,"domain_"],[0,"role.put"]],"start1":9328,"start2":9328,"length1":23,"length2":16},{"diffs":[[0,"bjectLog(parent="],[-1,"domain_"],[0,"role_key, agent="]],"start1":9369,"start2":9369,"length1":39,"length2":32},{"diffs":[[0,"e', log="],[-1,"domain_"],[0,"role)\n  "]],"start1":9439,"start2":9439,"length1":23,"length2":16},{"diffs":[[0,"(parent="],[-1,"domain_"],[0,"role_key"]],"start1":9759,"start2":9759,"length1":23,"length2":16},{"diffs":[[0,"(DomainUser."],[-1,"domain_"],[0,"roles == dom"]],"start1":9889,"start2":9889,"length1":31,"length2":24},{"diffs":[[0,"oles == "],[-1,"domain_"],[0,"role_key"]],"start1":9902,"start2":9902,"length1":23,"length2":16},{"diffs":[[0,"domain_user."],[-1,"domain_"],[0,"roles.remove"]],"start1":10004,"start2":10004,"length1":31,"length2":24},{"diffs":[[0,"er.roles.remove("],[-1,"domain_"],[0,"role_key)\n      "]],"start1":10013,"start2":10013,"length1":39,"length2":32},{"diffs":[[0,"           user."],[-1,"domain_"],[0,"roles.remove(dom"]],"start1":10367,"start2":10367,"length1":39,"length2":32},{"diffs":[[0,"oles.remove("],[-1,"domain_"],[0,"role_key)\n  "]],"start1":10384,"start2":10384,"length1":31,"length2":24},{"diffs":[[0,"d=True)\n    "],[-1,"domain_"],[0,"roles = ndb."]],"start1":11000,"start2":11000,"length1":31,"length2":24},{"diffs":[[0,", repeated=True)"],[1,"# vazno je osigurati da se u ovoj listi ne nadju duplikati rola, jer to onda predstavlja security issue!!"],[0,"\n    state = ndb"]],"start1":11056,"start2":11056,"length1":32,"length2":137},{"diffs":[[0,"r_user, "],[-1,"domain_"],[0,"roles=va"]],"start1":12590,"start2":12590,"length1":23,"length2":16},{"diffs":[[0,", roles=var_"],[-1,"domain_"],[0,"roles, state"]],"start1":12596,"start2":12596,"length1":31,"length2":24},{"diffs":[[0,"t()\n        for "],[-1,"domain_"],[0,"role in domain_u"]],"start1":13436,"start2":13436,"length1":39,"length2":32},{"diffs":[[0," in domain_user."],[-1,"domain_"],[0,"roles:\n         "]],"start1":13456,"start2":13456,"length1":39,"length2":32},{"diffs":[[0,"           user."],[-1,"domain_"],[0,"roles.remove(dom"]],"start1":13480,"start2":13480,"length1":39,"length2":32},{"diffs":[[0,"er.roles.remove("],[-1,"domain_"],[0,"role)\n        us"]],"start1":13493,"start2":13493,"length1":39,"length2":32},{"diffs":[[0,"t()\n        for "],[-1,"domain_"],[0,"role in domain_u"]],"start1":14374,"start2":14374,"length1":39,"length2":32},{"diffs":[[0," in domain_user."],[-1,"domain_"],[0,"roles:\n         "]],"start1":14394,"start2":14394,"length1":39,"length2":32},{"diffs":[[0,"           user."],[-1,"domain_"],[0,"roles.append(dom"]],"start1":14418,"start2":14418,"length1":39,"length2":32},{"diffs":[[0,"er.roles.append("],[-1,"domain_"],[0,"role)\n        us"]],"start1":14431,"start2":14431,"length1":39,"length2":32},{"diffs":[[0,"        old_"],[-1,"domain_"],[0,"roles = doma"]],"start1":14875,"start2":14875,"length1":31,"length2":24},{"diffs":[[0,"domain_user."],[-1,"domain_"],[0,"roles\n      "]],"start1":14895,"start2":14895,"length1":31,"length2":24},{"diffs":[[0,"domain_user."],[-1,"domain_"],[0,"roles = var_"]],"start1":14957,"start2":14957,"length1":31,"length2":24},{"diffs":[[0,"s = var_"],[-1,"domain_"],[0,"roles\n  "]],"start1":14973,"start2":14973,"length1":23,"length2":16},{"diffs":[[0,"t()\n        for "],[-1,"domain_"],[0,"role in old_doma"]],"start1":15221,"start2":15221,"length1":39,"length2":32},{"diffs":[[0," in old_"],[-1,"domain_"],[0,"roles:\n "]],"start1":15241,"start2":15241,"length1":23,"length2":16},{"diffs":[[0,"       user."],[-1,"domain_"],[0,"roles.remove"]],"start1":15261,"start2":15261,"length1":31,"length2":24},{"diffs":[[0,".remove("],[-1,"domain_"],[0,"role)\n  "]],"start1":15278,"start2":15278,"length1":23,"length2":16},{"diffs":[[0,"    for "],[-1,"domain_"],[0,"role in "]],"start1":15296,"start2":15296,"length1":23,"length2":16},{"diffs":[[0,"domain_user."],[-1,"domain_"],[0,"roles:\n     "]],"start1":15312,"start2":15312,"length1":31,"length2":24},{"diffs":[[0,"   user."],[-1,"domain_"],[0,"roles.ap"]],"start1":15340,"start2":15340,"length1":23,"length2":16},{"diffs":[[0,".append("],[-1,"domain_"],[0,"role)\n  "]],"start1":15353,"start2":15353,"length1":23,"length2":16},{"diffs":[[0,"!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Rule(ndb"]],"start1":15568,"start2":15568,"length1":16,"length2":22},{"diffs":[[0,"', kind="],[-1,""],[0,""],[1,"Domain"],[0,"Role, re"]],"start1":15929,"start2":15929,"length1":16,"length2":22},{"diffs":[[0,"!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Field(nd"]],"start1":16000,"start2":16000,"length1":16,"length2":22},{"diffs":[[0," ovde\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Store(ndb.Ex"]],"start1":16313,"start2":16313,"length1":24,"length2":30},{"diffs":[[0,"vo preskace "],[1,"/ tryton ima CountrySubdivision za skoro sve zemlje"],[0,"\n    # compa"]],"start1":16953,"start2":16953,"length1":24,"length2":75},{"diffs":[[0,"ovo preskace"],[1," / tryton ima CountrySubdivision za skoro sve zemlje"],[0,"\n    # compa"]],"start1":17112,"start2":17112,"length1":24,"length2":76},{"diffs":[[0,"it 120x\n"],[1,"    #\n    # Shipping Exclusion Settings\n    # Shipping everywhere except at the following locations: location_exclusion = False\n    # Shipping only at the following locations: location_exclusion = True\n    # location_exclusion = ndb.BooleanProperty('17', default=False)\n    \n"],[0,"    \n   "]],"start1":17889,"start2":17889,"length1":16,"length2":291},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"Store'.\n    "]],"start1":19234,"start2":19234,"length1":24,"length2":30},{"diffs":[[0,"store = "],[1,"Domain"],[0,"Store(na"]],"start1":19339,"start2":19339,"length1":16,"length2":22},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"Store'.\n    "]],"start1":19736,"start2":19736,"length1":24,"length2":30},{"diffs":[[0," 'close-"],[-1,""],[0,""],[1,"Domain"],[0,"Store'.\n"]],"start1":20298,"start2":20298,"length1":16,"length2":22},{"diffs":[[0,"u 'open-"],[-1,""],[0,""],[1,"Domain"],[0,"Store'.\n"]],"start1":20950,"start2":20950,"length1":16,"length2":22},{"diffs":[[0,"done!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"StoreFeedbac"]],"start1":21395,"start2":21395,"length1":24,"length2":30},{"diffs":[[0,"done!\nclass "],[1,"Domain"],[0,"StoreContent"]],"start1":22279,"start2":22279,"length1":24,"length2":30},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"Store (Catalog, "]],"start1":22326,"start2":22326,"length1":32,"length2":38},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"StoreContent"]],"start1":22917,"start2":22917,"length1":24,"length2":30},{"diffs":[[0,"ntent = "],[1,"Domain"],[0,"StoreCon"]],"start1":23061,"start2":23061,"length1":16,"length2":22},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"StoreContent"]],"start1":23519,"start2":23519,"length1":24,"length2":30},{"diffs":[[0,"olu 'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"StoreContent"]],"start1":24127,"start2":24127,"length1":24,"length2":30},{"diffs":[[0,"!\nclass "],[1,"Domain"],[0,"StoreShi"]],"start1":24427,"start2":24427,"length1":16,"length2":22},{"diffs":[[0,"ncestor "],[1,"Domain"],[0,"Store ("],[1,"Domain"],[0,"Catalog,"]],"start1":24487,"start2":24487,"length1":23,"length2":35},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"StoreShippin"]],"start1":24941,"start2":24941,"length1":24,"length2":30},{"diffs":[[0,"usion = "],[1,"Domain"],[0,"StoreShi"]],"start1":25106,"start2":25106,"length1":16,"length2":22},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"StoreShippin"]],"start1":25595,"start2":25595,"length1":24,"length2":30},{"diffs":[[0,"'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"StoreShi"]],"start1":26203,"start2":26203,"length1":16,"length2":22},{"diffs":[[0,"!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Tax(ndb."]],"start1":26531,"start2":26531,"length1":16,"length2":22},{"diffs":[[0,"', kind="],[-1,""],[0,""],[1,"Domain"],[0,"Carrier,"]],"start1":27392,"start2":27392,"length1":16,"length2":22},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"Tax'.\n      "]],"start1":27758,"start2":27758,"length1":24,"length2":30},{"diffs":[[0,"  tax = "],[1,"Domain"],[0,"Tax(name"]],"start1":27859,"start2":27859,"length1":16,"length2":22},{"diffs":[[0,"'update-"],[-1,""],[0,""],[1,"Domain"],[0,"Tax'.\n  "]],"start1":28303,"start2":28303,"length1":16,"length2":22},{"diffs":[[0,"'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"Tax'.\n  "]],"start1":28889,"start2":28889,"length1":16,"length2":22},{"diffs":[[0,"done!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Carrier(ndb."]],"start1":29128,"start2":29128,"length1":24,"length2":30},{"diffs":[[0,"olu 'create-"],[-1,""],[0,""],[1,"Domain"],[0,"Carrier'.\n  "]],"start1":29837,"start2":29837,"length1":24,"length2":30},{"diffs":[[0,"rrier = "],[-1,""],[0,""],[1,"Domain"],[0,"Carrier("]],"start1":29946,"start2":29946,"length1":16,"length2":22},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"Carrier'.\n  "]],"start1":30324,"start2":30324,"length1":24,"length2":30},{"diffs":[[0,"olu 'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"Carrier'.\n  "]],"start1":30817,"start2":30817,"length1":24,"length2":30},{"diffs":[[0,"lines = "],[1,"Domain"],[0,"CarrierL"]],"start1":31056,"start2":31056,"length1":16,"length2":22},{"diffs":[[0,"ozivati "],[1,"Domain"],[0,"CarrierL"]],"start1":31237,"start2":31237,"length1":16,"length2":22},{"diffs":[[0,"      # "],[1,"Domain"],[0,"CarrierL"]],"start1":31294,"start2":31294,"length1":16,"length2":22},{"diffs":[[0,"a samog "],[1,"Domain"],[0,"Carrier "]],"start1":31451,"start2":31451,"length1":16,"length2":22},{"diffs":[[0,"\n\n# done!\nclass "],[1,"Domain"],[0,"CarrierLine(ndb."]],"start1":31592,"start2":31592,"length1":32,"length2":38},{"diffs":[[0,"ncestor "],[1,"Domain"],[0,"Carrier "]],"start1":31652,"start2":31652,"length1":16,"length2":22},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"CarrierLine'"]],"start1":32674,"start2":32674,"length1":24,"length2":30},{"diffs":[[0,"_line = "],[1,"Domain"],[0,"CarrierL"]],"start1":32792,"start2":32792,"length1":16,"length2":22},{"diffs":[[0,"'update-"],[-1,""],[0,""],[1,"Domain"],[0,"CarrierL"]],"start1":33289,"start2":33289,"length1":16,"length2":22},{"diffs":[[0,"'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"CarrierL"]],"start1":33931,"start2":33931,"length1":16,"length2":22},{"diffs":[[0,"!\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"CarrierL"]],"start1":34200,"start2":34200,"length1":16,"length2":22},{"diffs":[[0,"trola\nclass "],[-1,""],[0,""],[1,"Domain"],[0,"Catalog(ndb."]],"start1":35052,"start2":35052,"length1":24,"length2":30},{"diffs":[[0,"perty('1', kind="],[-1,""],[0,""],[1,"Domain"],[0,"Store, required="]],"start1":35253,"start2":35253,"length1":32,"length2":38},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"Catalog'.\n  "]],"start1":37203,"start2":37203,"length1":24,"length2":30},{"diffs":[[0,"  catalog = "],[1,"Domain"],[0,"Catalog(stor"]],"start1":37308,"start2":37308,"length1":24,"length2":30},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"Catalog'.\n  "]],"start1":37782,"start2":37782,"length1":24,"length2":30},{"diffs":[[0,"ozvolu 'publish-"],[-1,""],[0,""],[1,"Domain"],[0,"Catalog'.\n      "]],"start1":38491,"start2":38491,"length1":32,"length2":38},{"diffs":[[0,"cover = "],[1,"Domain"],[0,"CatalogI"]],"start1":38822,"start2":38822,"length1":16,"length2":22},{"diffs":[[0,").order("],[1,"Domain"],[0,"CatalogI"]],"start1":38875,"start2":38875,"length1":16,"length2":22},{"diffs":[[0,"publish-"],[-1,""],[0,""],[1,"Domain"],[0,"Catalog'"]],"start1":39740,"start2":39740,"length1":16,"length2":22},{"diffs":[[0,"ontinue-"],[-1,""],[0,""],[1,"Domain"],[0,"Catalog'"]],"start1":40431,"start2":40431,"length1":16,"length2":22},{"diffs":[[0,"done!\nclass "],[1,"Domain"],[0,"CatalogImage"]],"start1":40908,"start2":40908,"length1":24,"length2":30},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"Catalog (namespa"]],"start1":40951,"start2":40951,"length1":32,"length2":38},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"CatalogImage"]],"start1":41369,"start2":41369,"length1":24,"length2":30},{"diffs":[[0,"image = "],[1,"Domain"],[0,"CatalogI"]],"start1":41522,"start2":41522,"length1":16,"length2":22},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"CatalogImage"]],"start1":42060,"start2":42060,"length1":24,"length2":30},{"diffs":[[0,"olu 'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"CatalogImage"]],"start1":42591,"start2":42591,"length1":24,"length2":30},{"diffs":[[0,"!\nclass "],[1,"Domain"],[0,"CatalogP"]],"start1":42900,"start2":42900,"length1":16,"length2":22},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"Catalog (namespa"]],"start1":42946,"start2":42946,"length1":32,"length2":38},{"diffs":[[0,"y('1', kind="],[1,"Domain"],[0,"ProductTempl"]],"start1":43032,"start2":43032,"length1":24,"length2":30},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"CatalogPrice"]],"start1":44027,"start2":44027,"length1":24,"length2":30},{"diffs":[[0,"cetag = "],[1,"Domain"],[0,"CatalogP"]],"start1":44186,"start2":44186,"length1":16,"length2":22},{"diffs":[[0,"'update-"],[-1,""],[0,""],[1,"Domain"],[0,"CatalogP"]],"start1":44867,"start2":44867,"length1":16,"length2":22},{"diffs":[[0,"'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"CatalogP"]],"start1":45814,"start2":45814,"length1":16,"length2":22},{"diffs":[[0,"done!\nclass "],[1,"Domain"],[0,"ProductTempl"]],"start1":46124,"start2":46124,"length1":24,"length2":30},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"Catalog (future "]],"start1":46176,"start2":46176,"length1":32,"length2":38},{"diffs":[[0,"y('7', kind="],[1,"Domain"],[0,"ProductVaria"]],"start1":47322,"start2":47322,"length1":24,"length2":30},{"diffs":[[0,"perty('8', kind="],[1,"Domain"],[0,"ProductContent, "]],"start1":47415,"start2":47415,"length1":32,"length2":38},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"ProductTempl"]],"start1":48464,"start2":48464,"length1":24,"length2":30},{"diffs":[[0,"_template = "],[1,"Domain"],[0,"ProductTempl"]],"start1":48619,"start2":48619,"length1":24,"length2":30},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductTempl"]],"start1":49216,"start2":49216,"length1":24,"length2":30},{"diffs":[[0,"olu 'delete-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductTempl"]],"start1":50053,"start2":50053,"length1":24,"length2":30},{"diffs":[[0,"uct_instances = "],[1,"Domain"],[0,"ProductInstance."]],"start1":50338,"start2":50338,"length1":32,"length2":38},{"diffs":[[0,"ri pozivati "],[1,"Domain"],[0,"ProductInsta"]],"start1":50538,"start2":50538,"length1":24,"length2":30},{"diffs":[[0,".\n        # "],[1,"Domain"],[0,"ProductInsta"]],"start1":50599,"start2":50599,"length1":24,"length2":30},{"diffs":[[0,"sanja samog "],[1,"Domain"],[0,"ProductTempl"]],"start1":50755,"start2":50755,"length1":24,"length2":30},{"diffs":[[0,"stances-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductT"]],"start1":51132,"start2":51132,"length1":16,"length2":22},{"diffs":[[0,"instances = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductInsta"]],"start1":51523,"start2":51523,"length1":24,"length2":30},{"diffs":[[0,"tory_logs = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductInven"]],"start1":51801,"start2":51801,"length1":24,"length2":30},{"diffs":[[0,"justments = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductInven"]],"start1":52107,"start2":52107,"length1":24,"length2":30},{"diffs":[[0,"tance = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductI"]],"start1":56583,"start2":56583,"length1":16,"length2":22},{"diffs":[[0,"\n\n# done!\nclass "],[1,"Domain"],[0,"ProductInstance("]],"start1":56912,"start2":56912,"length1":32,"length2":38},{"diffs":[[0," # ancestor "],[1,"Domain"],[0,"ProductTempl"]],"start1":56972,"start2":56972,"length1":24,"length2":30},{"diffs":[[0,")\n    # "],[-1,"product_instance_"],[0,"contents"]],"start1":58406,"start2":58406,"length1":33,"length2":16},{"diffs":[[0,"perty('5', kind="],[1,"Domain"],[0,"ProductContent, "]],"start1":58435,"start2":58435,"length1":32,"length2":38},{"diffs":[[0,"x\n    # "],[-1,"product_instance_"],[0,"images ="]],"start1":58503,"start2":58503,"length1":33,"length2":16},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductInsta"]],"start1":59463,"start2":59463,"length1":24,"length2":30},{"diffs":[[0,"queue\nclass "],[1,"Domain"],[0,"ProductInven"]],"start1":60110,"start2":60110,"length1":24,"length2":30},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"ProductInstance\n"]],"start1":60164,"start2":60164,"length1":32,"length2":38},{"diffs":[[0,"done!\nclass "],[1,"Domain"],[0,"ProductInven"]],"start1":60728,"start2":60728,"length1":24,"length2":30},{"diffs":[[0," # ancestor "],[1,"Domain"],[0,"ProductInsta"]],"start1":60793,"start2":60793,"length1":24,"length2":30},{"diffs":[[0,"olu 'create-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductInven"]],"start1":61456,"start2":61456,"length1":24,"length2":30},{"diffs":[[0,"djustment = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductInven"]],"start1":61696,"start2":61696,"length1":24,"length2":30},{"diffs":[[0,"inventory_log = "],[1,"Domain"],[0,"ProductInventory"]],"start1":62253,"start2":62253,"length1":32,"length2":38},{"diffs":[[0,".order(-"],[1,"Domain"],[0,"ProductI"]],"start1":62302,"start2":62302,"length1":16,"length2":22},{"diffs":[[0,"y_log = "],[1,"Domain"],[0,"ProductI"]],"start1":62381,"start2":62381,"length1":16,"length2":22},{"diffs":[[0,"done!\nclass "],[1,"Domain"],[0,"ProductVaria"]],"start1":62658,"start2":62658,"length1":24,"length2":30},{"diffs":[[0,"\n    # ancestor "],[1,"Domain"],[0,"Catalog (future "]],"start1":62707,"start2":62707,"length1":32,"length2":38},{"diffs":[[0,"olu 'create-"],[1,"Domain"],[0,"ProductVaria"]],"start1":63550,"start2":63550,"length1":24,"length2":30},{"diffs":[[0,"t_variant = "],[1,"Domain"],[0,"ProductVaria"]],"start1":63703,"start2":63703,"length1":24,"length2":30},{"diffs":[[0,"olu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductVaria"]],"start1":64232,"start2":64232,"length1":24,"length2":30},{"diffs":[[0,"\n\n# done!\nclass "],[1,"Domain"],[0,"ProductContent(n"]],"start1":64783,"start2":64783,"length1":32,"length2":38},{"diffs":[[0,"ncestor "],[1,"Domain"],[0,"Catalog "]],"start1":64844,"start2":64844,"length1":16,"length2":22},{"diffs":[[0,"dozvolu 'create-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductContent'."]],"start1":65341,"start2":65341,"length1":32,"length2":38},{"diffs":[[0,"ntent = "],[-1,""],[0,""],[1,"Domain"],[0,"ProductC"]],"start1":65502,"start2":65502,"length1":16,"length2":22},{"diffs":[[0,"dozvolu 'update-"],[-1,""],[0,""],[1,"Domain"],[0,"ProductContent'."]],"start1":65947,"start2":65947,"length1":32,"length2":38},{"diffs":[[0,"se ovo preskace "],[1,"/ tryton ima CountrySubdivision za skoro sve zemlje "],[0,"\n    # region = "]],"start1":74837,"start2":74837,"length1":32,"length2":84},{"diffs":[[0,"preskace"],[1," / tryton ima CountrySubdivision za skoro sve zemlje"],[0,"\n    # s"]],"start1":74997,"start2":74997,"length1":16,"length2":68},{"diffs":[[0,"amespace Domain)"],[1," ovaj koncept ne radi, morace da se promeni..."],[0,"\n    # http://hg"]],"start1":93249,"start2":93249,"length1":32,"length2":78},{"diffs":[[0,"le/tip/sale.py#l"],[-1,"28"],[1,"33"],[0,"\n    # http://hg"]],"start1":93354,"start2":93354,"length1":34,"length2":34},{"diffs":[[0," = False"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'cart'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'cart' : (1, ),# buyer can create order, add/update (quantity)/remove order lines;\n        'checkout' : (2, ),# buyer can cancel/request quotation/pay order;\n        'quotation_requested' : (3, ),# seller can edit discount on order lines, buyer can cancel order;\n        'quotation_completed' : (4, ),# buyer can cancel/pay order;\n        'processing' : (5, ),# no one can cancel/edit/delete order lines;\n        'completed' : (6, ),# no one can cancel/edit/delete order lines;\n        'canceled' : (7, ),# no one can cancel/edit/delete order lines;\n    }\n    \n    # nedostaju akcije za dupliciranje catalog-a, za clean-up, etc...\n    OBJECT_ACTIONS = {\n       'add_to_cart' : 1,\n       'update_cart' : 2,\n       'checkout' : 3,\n       'request_quotation' : 4,\n       'complete_quotation' : 5,\n       'pay' : 6,\n       'complete' : 7,\n       'cancel' : 8,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'checkout' : {\n            'from' : ('cart',),\n            'to' : ('checkout',),\n         },\n         'cancel' : {\n           'from' : ('checkout', 'quotation_requested', 'quotation_completed',),\n           'to'   : ('canceled',),\n        },\n        'request_quotation' : {\n           'from' : ('checkout', ),\n           'to'   : ('quotation_requested',),\n        },\n        'pay' : {\n           'from' : ('checkout', 'quotation_requested', 'quotation_completed',), # mozda zabraniti from: quotation_requested, dok se ne zavrsi quote?\n           'to'   : ('processing',),\n        },\n        'complete_quotation' : {\n           'from' : ('quotation_requested', ),\n           'to'   : ('quotation_completed',),\n        },\n        'complete' : {\n           'from' : ('processing', ),\n           'to'   : ('completed',),\n        },\n        \n    }\n    \n    @ndb.transactional\n    def add_to_cart():\n        # imamo na raspolaganju user_key, catalog_key, catalog_pricetag_key, domain_key, product_template_key, product_instance_key, variant_signature, custom_variants ?\n        catalog = catalog_key.get()\n        store = catalog.store.get()\n        shipping_exclusions = DomainStoreShippingExclusion.query(ancestor=catalog_key).fetch()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        # ako order postoji onda ne pravimo novi order\n        if (order):\n            # proveriti da li je order u state-u 'cart'\n            if (order.state != 'cart'):\n                # ukoliko je order u drugom state-u od 'cart' satate-a, onda ne praviti nikakve izmene\n                # zabranjeno je dodavati artikle u order koji nije shopping cart-a\n                return\n            else:\n                # proveriti da li je shipping dozvoljen, i nastaviti ukoliko jeste\n                buyer_addresses = []\n                buyer_addresses.append(order.shipping_address_reference.get())\n                shipping_addresses = get_shipping_addresses(buyer_addresses=buyer_addresses, shipping_exclusions=shipping_exclusions, store=store)\n                if not (shipping_addresses['shipping_addresses']):\n                    # zabranjeno je dodavati artikle iz store-a koji ne dozvoljava shipping na makar jednu adresu korisnika,\n                    # bez obizra da li je order prethodno napravljen ili ne.\n                    # postojeci order se moze jedino cancel u tom slucaju, \n                    # ili kupac mora napraviti adresu na koju se moze shipping raditi, kako bi bio u stanju da update-a order\n                    return\n                # proveriti da li postoji order line (sto podrazumeva da order postoji u state-u 'cart') sa proizvodom koji se dodaje u order\n                order_line_id = str(catalog_key.namespace()) + '-' + \n                                str(catalog_key.id()) + '-' + \n                                str(product_template_key.id()) + '-' + \n                                str(product_instance_key.id())\n                line_exists = False\n                for line in order.lines:\n                    # ukoliko order line postoji (sto podrazumeva da order postoji u state-u 'cart'), \n                    # update postojeceg order line sa kolicinom proizvoda (quantity), \n                    # i update postojeceg order-a sa novim vrednostima\n                    if (order_line_id == str(line.key.id())):\n                        # ako order line postoji u order-u, radimo update quantity tako sto ga uvecavamo za 1\n                        quantity = DecTools.form(line.quantity) + DecTools.form('1', line.product_uom)\n                        order_line = update_order_line(user_key=user_key, order=order, order_line=line, order_line_quantity=quantity)\n                        # ovde moramo nekako ovaj update-ovani order_line uguramo u order.lines, a da stari iz njih izbacimo.\n                        line_exists = True\n                        break\n                # ukoliko order line ne postoji (a order postoji u state-u 'cart'), \n                # napraviti novi order line sa vrednostima koje se prepisuju iz proizvoda i ostalim vrednostima (tax...), \n                # i uraditi update postojeceg order-a sa novim vrednostima\n                if not (line_exists):\n                    # ako order line jos uvek ne postoji u order-u, pravimo novi order\n                    product_template = product_template_key.get()\n                    product_instance = product_instance_key.get()\n                    taxes = DomainTax.query(namespace=catalog_key.namespace).order(DomainTax.sequence).fetch()\n                    # ne znam da li ce ovde ici location=order.shipping_address ili location=order.billing_address\n                    valid_taxes = get_taxes(taxes=taxes, location=order.shipping_address, product_template=product_template)\n                    order_line = update_order_line(\n                        user_key=user_key, \n                        catalog=catalog, \n                        catalog_pricetag_key=catalog_pricetag_key, \n                        product_template=product_template, \n                        product_instance=product_instance, \n                        order=order, \n                        variant_signature=variant_signature, \n                        custom_variants=custom_variants, \n                        valid_taxes=valid_taxes)\n                    # u postojeci order dodajemo novu liniju\n                    order.lines.append(order_line)\n                # radimo update ordera kako bi se keshirani amount-ovi update-ovali\n                order = update_order(order=order)\n                # preostaje da se jos u radi update carrier-a sa novim vrednostima, one se u ovoj fazi koriste samo u view, \n                # sve dok se carrier ne prenese kao novi order line..\n        # ukoliko order ne postoji, napraviti novi order, i potom uraditi korak 5.\n        else:\n            # proveriti da li je shipping dozvoljen, i nastaviti ukoliko jeste\n            buyer_addresses = BuyerAddress.query(ancestor=user_key).fetch()\n            shipping_addresses = get_shipping_addresses(buyer_addresses=buyer_addresses, shipping_exclusions=shipping_exclusions, store=store)\n            if not (shipping_addresses['shipping_addresses']):\n                # zabranjeno je dodavati artikle iz store-a koji ne dozvoljava shipping na makar jednu adresu korisnika,\n                # bez obizra da li je order prethodno napravljen ili ne.\n                # postojeci order se moze jedino cancel u tom slucaju, \n                # ili kupac mora napraviti adresu na koju se moze shipping raditi, kako bi bio u stanju da update-a order\n                return\n            # pripremamo shipping address\n            if (shipping_addresses['default_shipping_address']):\n                shipping_address = shipping_addresses['default_shipping_address']\n            else:\n                shipping_address = shipping_addresses['default_shipping_address'][0]\n            # pripremamo billing addresse\n            for buyer_address in buyer_addresses:\n                if (buyer_address.default_billing):\n                    billing_address = buyer_address\n                    break\n            # pravimo novi order\n            order = update_order(user_key=user_key, store=store, billing_address=billing_address, shipping_address=shipping_address, carrier_reference=carrier_reference)\n            # pravimo novi order line\n            product_template = product_template_key.get()\n            product_instance = product_instance_key.get()\n            taxes = DomainTax.query(namespace=catalog_key.namespace).order(DomainTax.sequence).fetch()\n            # ne znam da li ce ovde ici location=order.shipping_address ili location=order.billing_address\n            valid_taxes = get_taxes(taxes=taxes, location=order.shipping_address, product_template=product_template)\n            order_line = update_order_line(\n                user_key=user_key, \n                catalog=catalog, \n                catalog_pricetag_key=catalog_pricetag_key, \n                product_template=product_template, \n                product_instance=product_instance, \n                order=order, \n                variant_signature=variant_signature, \n                custom_variants=custom_variants, \n                valid_taxes=valid_taxes)\n            # u postojeci order dodajemo novu liniju\n            order.lines.append(order_line)\n            # radimo update ordera kako bi se keshirani amount-ovi update-ovali\n            order = update_order(order=order)\n            # preostaje da se jos u radi update carrier-a sa novim vrednostima, one se u ovoj fazi koriste samo u view, \n            # sve dok se carrier ne prenese kao novi order line..\n    \n    @ndb.transactional\n    def update_cart():\n        # imamo na raspolaganju user_key, catalog_key, catalog_pricetag_key, domain_key, order_lines, shipping_address_key, billing_address_key   ?\n        catalog = catalog_key.get()\n        store = catalog.store.get()\n        shipping_exclusions = DomainStoreShippingExclusion.query(ancestor=catalog_key).fetch()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        # ako order postoji onda nastavljamo dalje\n        if (order):\n            # proveriti da li je order u state-u 'cart'\n            if (order.state != 'cart'):\n                # ukoliko je order u drugom state-u od 'cart' satate-a, onda ne praviti nikakve izmene\n                # zabranjeno je update-ovati order koji nije shopping cart-a\n                return\n            else:\n                # proveriti da li je shipping dozvoljen, i nastaviti ukoliko jeste\n                shipping_address = shipping_address_key.get()\n                billing_address = billing_address_key.get()\n                shipping_addresses = get_shipping_addresses(buyer_addresses=[shipping_address], shipping_exclusions=shipping_exclusions, store=store)\n                if not (shipping_addresses['shipping_addresses']):\n                    # zabranjeno je dodavati artikle iz store-a koji ne dozvoljava shipping na makar jednu adresu korisnika,\n                    # bez obizra da li je order prethodno napravljen ili ne.\n                    # postojeci order se moze jedino cancel u tom slucaju, \n                    # ili kupac mora napraviti adresu na koju se moze shipping raditi, kako bi bio u stanju da update-a order\n                    return\n                # update postojecih order lines-a sa novim kolicinama proizvoda (quantity), \n                # i update postojeceg order-a sa novim vrednostima\n                lines = order.lines\n                order.lines = []\n                for line in lines:\n                    # order_lines je prekapovan dictionary sa values-ima za svaki order line i mapiranim originalnim kljucevima lines-a\n                    quantity = DecTools.form(order_lines.get(line.key))\n                    order_line = update_order_line(user_key=user_key, order=order, order_line=line, order_line_quantity=quantity)\n                    order.lines.append(order_line)\n                # radimo update ordera kako bi se keshirani amount-ovi update-ovali\n                order = update_order(order=order)\n                order = update_order(billing_address=billing_address, shipping_address=shipping_address, carrier_reference=carrier_reference)\n                # preostaje da se jos u radi update carrier-a sa novim vrednostima, one se u ovoj fazi koriste samo u view, \n                # sve dok se carrier ne prenese kao novi order line..\n        # ukoliko order ne postoji vraca se poruka da je shopping cart-a prazna\n        else:\n            return None\n    \n    # REUSABLE CODE!\n    # funkcije get_order, update_order, update_order_line, get_shipping_addresses, get_taxes, calculate_taxes, get_carrires.. \n    # se nikad ne pozivaju direktno (sa client-a) vec ih pozivuaju druge funkcije..\n    \n    def get_order(**kwargs):\n        order = Order.query(Order.store == kwargs.get('store_key'), Order.state.IN(['cart', 'checkout', 'quotation_requested', 'quotation_completed', 'processing']), ancestor=kwargs.get('user_key')).fetch() # trebace nam composite index za ovo\n        if (order):\n            order = order[0]\n            # ucitavamo sve linije, ovde se moze uspostaviti kontrola da se ucitava samo kada se to zahteva, napr: if(kwargs.get('get_lines')):...\n            order_lines = OrderLine.query(ancestor=order.key).order(OrderLine.sequence).fetch()\n            order.lines = order_lines\n        return order\n    \n    def update_order(**kwargs):\n        # store se ucitava radi prepisivanja vrednosti u order\n        store = kwargs.get('store')\n        # ako order postoji onda ga update-amo\n        if (kwargs.get('order')):\n            # treba zavrsiti dokumentovanje i pregledati kako jos optimize ovo... \n            order = kwargs.get('order')\n            if (kwargs.get('billing_address')):\n                # billing address se prepisuje iz BuyerAddress koji ima default_billing=True\n                billing_address = kwargs.get('billing_address')\n                # billing address reference se dobija iz kwarg-a sto je zapravo key BuyerAddress sa default_billing=True\n                billing_address_reference = billing_address.key\n                billing_address_country = billing_address.country.get()\n                if (isinstance(billing_address.region, str)):\n                    billing_address_region = billing_address.region\n                    billing_address_region_code = billing_address.region\n                else:\n                    region = billing_address.region.get()\n                    billing_address_region = region.name\n                    billing_address_region_code = region.code\n                order_billing_address = OrderAddress(\n                    name=billing_address.name, \n                    country=billing_address_country.name, \n                    country_code=billing_address_country.code, \n                    region=billing_address_region, \n                    region_code=billing_address_region_code, \n                    city=billing_address.city, \n                    postal_code=billing_address.postal_code, \n                    street_address=billing_address.street_address, \n                    street_address2=billing_address.street_address2, \n                    email=billing_address.email, \n                    telephone=billing_address.telephone)\n                order.billing_address = order_billing_address\n                order.billing_address_reference = billing_address_reference\n            if (kwargs.get('shipping_address')):\n                # shipping address se prepisuje iz BuyerAddress koji ima default_shipping=True\n                shipping_address = kwargs.get('shipping_address')\n                # shipping address reference se dobija iz kwarg-a sto je zapravo key BuyerAddress sa default_shipping=True\n                shipping_address_reference = shipping_address.key\n                shipping_address_country = shipping_address.country.get()\n                if (isinstance(shipping_address.region, str)):\n                    shipping_address_region = shipping_address.region\n                    shipping_address_region_code = shipping_address.region\n                else:\n                    region = shipping_address.region.get()\n                    shipping_address_region = region.name\n                    shipping_address_region_code = region.code\n                order_shipping_address = OrderAddress(\n                    name=shipping_address.name, \n                    country=shipping_address_country.name, \n                    country_code=shipping_address_country.code, \n                    region=shipping_address_region, \n                    region_code=shipping_address_region_code, \n                    city=shipping_address.city, \n                    postal_code=shipping_address.postal_code, \n                    street_address=shipping_address.street_address, \n                    street_address2=shipping_address.street_address2, \n                    email=shipping_address.email, \n                    telephone=shipping_address.telephone)\n                order.shipping_address = order_shipping_address\n                order.shipping_address_reference = shipping_address_reference\n            if (kwargs.get('carrier_reference') and order.carrier_reference != kwargs.get('carrier_reference')):\n                order.carrier_reference = kwargs.get('carrier_reference')\n            if (kwargs.get('feedback') and order.feedback != kwargs.get('feedback')):\n                order.feedback = kwargs.get('feedback')\n            if (order.store_name != store.name):\n                order.store_name = store.name\n            if (order.store_logo != store.logo):\n                order.store_logo = store.logo\n            # ovde pre update-a obracunavamo ukupne iznose na orderu\n            untaxed_amount = DecTools.form('0', order.currency)\n            tax_amount = DecTools.form('0', order.currency)\n            total_amount = DecTools.form('0', order.currency)\n            for line in order.lines:\n                untaxed_amount += DecTools.form(line.subtotal, order.currency)\n                tax_amount += DecTools.form(line.tax_subtotal, order.currency)\n                total_amount += DecTools.form(line.subtotal, order.currency) + DecTools.form(line.tax_subtotal, order.currency)\n            order.untaxed_amount = untaxed_amount\n            order.tax_amount = tax_amount\n            order.total_amount = total_amount\n            order_key = order.put()\n            object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='update_order', state=order.state, log=order)\n            object_log.put()\n            return order\n        # ako order ne potoji onda pravimo novi\n        else:\n            # pravimo novi order sa standardnim vrednostima\n            # currency za order se preuzima iz store.currency\n            store_currency = store.currency.get()\n            order_currency = OrderCurrency()\n            order_currency.name = store_currency.name\n            order_currency.symbol = store_currency.symbol\n            order_currency.code = store_currency.code\n            order_currency.numeric_code = store_currency.numeric_code\n            order_currency.rounding = store_currency.rounding\n            order_currency.digits = store_currency.digits\n            order_currency.grouping = store_currency.grouping\n            order_currency.decimal_separator = store_currency.decimal_separator\n            order_currency.thousands_separator = store_currency.thousands_separator\n            order_currency.positive_sign_position = store_currency.positive_sign_position\n            order_currency.negative_sign_position = store_currency.negative_sign_position\n            order_currency.positive_sign = store_currency.positive_sign\n            order_currency.negative_sign = store_currency.negative_sign\n            order_currency.positive_currency_symbol_precedes = store_currency.positive_currency_symbol_precedes\n            order_currency.negative_currency_symbol_precedes = store_currency.negative_currency_symbol_precedes\n            order_currency.positive_separate_by_space = store_currency.positive_separate_by_space\n            order_currency.negative_separate_by_space = store_currency.negative_separate_by_space\n            # default amount vrednosti su 0, s obzirom da order jos nema nijedan order line\n            untaxed_amount = DecTools.form('0', order_currency)\n            tax_amount = DecTools.form('0', order_currency)\n            total_amount = DecTools.form('0', order_currency)\n            # company address reference je za sada store key, posto se u store cuvaju company podaci\n            company_address_reference = store.key\n            # company address se prepisuje iz store, posto se u store cuvaju company podaci\n            company_address_country = store.company_country.get()\n            if (isinstance(store.company_region, str)):\n                company_address_region = store.company_region\n                company_address_region_code = store.company_region\n            else:\n                region = store.company_region.get()\n                company_address_region = region.name\n                company_address_region_code = region.code\n            order_company_address = OrderAddress(\n                name=store.company_name, \n                country=company_address_country.name, \n                country_code=company_address_country.code, \n                region=company_address_region, \n                region_code=company_address_region_code, \n                city=store.company_city, \n                postal_code=store.company_postal_code, \n                street_address=store.company_street_address, \n                street_address2=store.company_street_address2, \n                email=store.company_email, \n                telephone=store.company_telephone)\n            # billing address se prepisuje iz BuyerAddress koji ima default_billing=True\n            billing_address = kwargs.get('billing_address')\n            # billing address reference se dobija iz kwarg-a sto je zapravo key BuyerAddress sa default_billing=True\n            billing_address_reference = billing_address.key\n            billing_address_country = billing_address.country.get()\n            if (isinstance(billing_address.region, str)):\n                billing_address_region = billing_address.region\n                billing_address_region_code = billing_address.region\n            else:\n                region = billing_address.region.get()\n                billing_address_region = region.name\n                billing_address_region_code = region.code\n            order_billing_address = OrderAddress(\n                name=billing_address.name, \n                country=billing_address_country.name, \n                country_code=billing_address_country.code, \n                region=billing_address_region, \n                region_code=billing_address_region_code, \n                city=billing_address.city, \n                postal_code=billing_address.postal_code, \n                street_address=billing_address.street_address, \n                street_address2=billing_address.street_address2, \n                email=billing_address.email, \n                telephone=billing_address.telephone)\n            # shipping address se prepisuje iz BuyerAddress koji ima default_shipping=True\n            shipping_address = kwargs.get('shipping_address')\n            # shipping address reference se dobija iz kwarg-a sto je zapravo key BuyerAddress sa default_shipping=True\n            shipping_address_reference = shipping_address.key\n            shipping_address_country = shipping_address.country.get()\n            if (isinstance(shipping_address.region, str)):\n                shipping_address_region = shipping_address.region\n                shipping_address_region_code = shipping_address.region\n            else:\n                region = shipping_address.region.get()\n                shipping_address_region = region.name\n                shipping_address_region_code = region.code\n            order_shipping_address = OrderAddress(\n                name=shipping_address.name, \n                country=shipping_address_country.name, \n                country_code=shipping_address_country.code, \n                region=shipping_address_region, \n                region_code=shipping_address_region_code, \n                city=shipping_address.city, \n                postal_code=shipping_address.postal_code, \n                street_address=shipping_address.street_address, \n                street_address2=shipping_address.street_address2, \n                email=shipping_address.email, \n                telephone=shipping_address.telephone)\n            # carrier reference se dobija iz kwarg-a\n            carrier_reference = kwargs.get('carrier_reference')\n            # feedback treba da ima neku default vrednost, to je ustvari OrderFeedback.state vrednost\n            feedback = 1\n            # store name se prepisuje iz store.name\n            store_name = store.name\n            # store logo se prepisuje iz store.logo\n            store_logo = store.logo\n            # ovde se gradi order sa vrednostima koje su prethodno stecene\n            order = Order(\n                parent=kwargs.get('user_key'), \n                store=store.key, \n                currency=order_currency, \n                untaxed_amount=untaxed_amount, \n                tax_amount=tax_amount, \n                total_amount=total_amount, \n                state='cart', \n                company_address=order_company_address, \n                billing_address=order_billing_address, \n                shipping_address=order_shipping_address, \n                company_address_reference=company_address_reference, \n                billing_address_reference=billing_address_reference, \n                shipping_address_reference=shipping_address_reference, \n                carrier_reference=carrier_reference, \n                feedback=feedback, \n                store_name=store_name, \n                store_logo=store_logo)\n            order_key = order.put()\n            object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='new_order', state=order.state, log=order)# videcemo kako cemo ovaj logging resiti\n            object_log.put()\n            return order\n    \n    def update_order_line(**kwargs):\n        order = kwargs.get('order')\n        # ako order_line postoji onda ga update-amo\n        if (kwargs.get('order_line')):\n            # treba voditi racuna oko dozvola ko sta moze ovde da uradi...\n            order_line = kwargs.get('order_line')\n            # ako je quantity jednak ili manji od nule onda se order line brise.\n            if (kwargs.get('order_line_quantity') <= 0):\n                object_log = ObjectLog(parent=order_line.key, agent=kwargs.get('user_key'), action='remove_order_line', state='none')\n                object_log.put()\n                order_line.key.delete()\n                return None\n            # ako je quantity veci od nule i ako se user input razlikuje od onoga sto je vec u order_line-u onda update-amo order_line\n            if (kwargs.get('order_line_quantity') > 0):\n                if (order_line.quantity != kwargs.get('order_line_quantity')):\n                    order_line.quantity = DecTools.form(kwargs.get('order_line_quantity'), order_line.product_uom)\n            # ako je discount provided i ako se user input razlikuje od onoga sto je vec u order_line-u onda update-amo order_line\n            if (kwargs.get('order_line_discount') and (order_line.discount != kwargs.get('order_line_discount'))):\n                order_line.discount = DecTools.form(kwargs.get('order_line_discount'), '.2f')\n            # ako je sequence provided i ako se user input razlikuje od onoga sto je vec u order_line-u onda update-amo order_line\n            if (kwargs.get('order_line_sequence') and (order_line.sequence != kwargs.get('order_line_sequence'))):\n                order_line.sequence = kwargs.get('order_line_sequence')\n            # ako je valid_taxes provided onda update-amo order_line\n            if (kwargs.get('valid_taxes')):\n                # generisemo taxes i tax_references\n                taxes = []\n                tax_references = []\n                for tax in kwargs.get('valid_taxes'):\n                    order_line_tax = OrderLineTax(name=tax.name, amount=tax.amount)\n                    taxes.append(order_line_tax)\n                    tax_references.append(tax.key)\n                order_line.taxes = taxes\n                order_line.tax_references = tax_references\n            # pre snimanja nazad u bazu update-amo subtotal cache\n            subtotal = DecTools.form(order_line.unit_price, order.currency) * DecTools.form(order_line.quantity, order_line.product_uom)\n            discount_subtotal = DecTools.form(subtotal) - (DecTools.form(subtotal) * (DecTools.form(order_line.discount) * DecTools.form('0.01'))) # moze i \"/ DecTools.form('100')\"\n            order_line.subtotal = DecTools.form(discount_subtotal, order.currency)\n            # pre snimanja nazad u bazu update-amo tax subtotal cache\n            order_line.tax_subtotal = calcualte_taxes(order=order, order_line=order_line)\n            order_line_key = order_line.put()\n            object_log = ObjectLog(parent=order_line_key, agent=kwargs.get('user_key'), action='update_order_line', state='none', log=order_line)\n            object_log.put()\n            return order_line\n        # ako order line ne postoji onda pravimo novi order line sa discount 0.00 i quantity 1\n        else:\n            catalog = kwargs.get('catalog')\n            # ucitavamo product template i product instance entitete koji nam trebaju za izgradnju order line,\n            # i preuzimamo propertije iz product template i product instance, kako bi mogli da ispitamo koji su postojani\n            product_template = kwargs.get('product_template')\n            product_instance = kwargs.get('product_instance')\n            product_template_properties = product_template._properties\n            product_instance_properties = product_instance._properties\n            # redosled izgradnje id-a za order line/cart line: id=catalog_namespace-catalog_id-product_template_id-product_instance_id\n            order_line_id = str(catalog.key.namespace()) + '-' + \n                            str(catalog.key.id()) + '-' + \n                            str(product_template.key.id()) + '-' + \n                            str(product_instance.key.id())\n            # catalog_pricetag_reference dobijamo iz inputa\n            catalog_pricetag_reference = kwargs.get('catalog_pricetag_key')\n            # product_category_complete_name i product_category preuzimamo iz product template\n            product_category = product_template.product_category.get()\n            product_category_complete_name = product_template_category.complete_name\n            product_category = product_template.product_category\n            # generisemo taxes i tax_references\n            taxes = []\n            tax_references = []\n            for tax in kwargs.get('valid_taxes'):\n                order_line_tax = OrderLineTax(name=tax.name, amount=tax.amount)\n                taxes.append(order_line_tax)\n                tax_references.append(tax.key)\n            # description se inicijalno setuje na product template name\n            description = product_template.name\n            # preuzimamo uom iz product template-a i gradimo instancu OrderLineProductUOM koji nam treba za cart line\n            uom = product_template.product_uom.get()\n            uom_category = uom.key.parent().get()\n            product_uom = OrderLineProductUOM(name=uom.name, symbol=uom.symbol, category=uom_category.name, rounding=uom.rounding, digits=uom.digits)\n            # http://docs.python.org/2/library/decimal.html\n            # http://docs.python.org/2/library/functions.html#format\n            # http://docs.python.org/2/library/string.html#formatspec\n            # http://stackoverflow.com/questions/15076310/format-python-decimal-object-to-a-specified-precision\n            # ovo gore su primeri formatiranja, koji mozda nisu ispravni, ovaj code ovde je samo radi opisa.\n            # quantity se setuje na 1 posto new line podrazumeva jednu mernu jedinicu proizvoda\n            quantity = DecTools.form('1', product_uom)\n            # odlucujemo odakle cemo da preuzimamo vrednosti za unit_price, product instance ima prednost (ako postoji)\n            if (product_instance_properties['unit_price']):\n                unit_price = DecTools.form(product_instance.unit_price, order.currency)\n            else:\n                unit_price = DecTools.form(product_template.unit_price, order.currency)\n            # discount se postavlja na 0.00, i kasnije se moze editovati od strane prodavca, ukoliko je order u state-u koji to dozvoljava\n            discount = DecTools.form('0', '.2f')\n            # sequence se podesava po count-u postojecih linija - ako sequencing bude zero based onda nam ne treba len() + 1\n            sequence = len(order.lines)\n            # proveravamo da li su product instance uopste generisane, a bice generisane samo ako ih bude mannje od 1k per template\n            if (product_template_properties['product_instance_count'] and product_template.product_instance_count > 1000):\n                # ukolliko nema instanci onda se uz name proizvoda dodaje i variant signature koji se izbildao iz web forme prilikom user inputa.\n                description # += '\\n' + kwargs.get('variant_signature')\n            else:\n                # variant_signature ce se mozda upisivati u Expando prop. OrderLine-a\n                # variant_signature = product_instance.variant_signature\n                if (kwargs.get('custom_variants')):\n                    description # += '\\n' + kwargs.get('variant_signature')\n            order_line = OrderLine(\n                parent=order.key, \n                id=order_line_id, \n                description=description, \n                quantity=quantity, \n                product_uom=product_uom, \n                unit_price=unit_price, \n                discount=discount, \n                sequence=sequence, \n                taxes=taxes, \n                product_category_complete_name=product_category_complete_name, \n                product_category=product_category, \n                catalog_pricetag_reference=catalog_pricetag_reference, \n                tax_references=tax_references)\n            subtotal = DecTools.form(order_line.unit_price, order.currency) * DecTools.form(order_line.quantity, order_line.product_uom)\n            discount_subtotal = DecTools.form(subtotal) - (DecTools.form(subtotal) * (DecTools.form(order_line.discount) * DecTools.form('0.01'))) # moze i \"/ DecTools.form('100')\"\n            order_line.subtotal = DecTools.form(discount_subtotal, order.currency)\n            order_line.tax_subtotal = calcualte_taxes(order=order, order_line=order_line)\n            order_line_key = order_line.put()\n            object_log = ObjectLog(parent=order_line_key, agent=kwargs.get('user_key'), action='add_order_line', state='none', log=order_line)\n            object_log.put()\n            return order_line\n    \n    def get_shipping_addresses(**kwargs):\n        # proveravamo da li kupac moze kupovati u datoj prodavnici/da li ima neku adresu na koju store dozvoljava shipping\n        # object_key moze da bude key bilo kojeg entiteta koji u potomstvu ima DomainStoreShippingExclusion entitete\n        # ovde smo trebali da koristimo keshiranu verziju DomainStoreShippingExclusion, \n        # tj. DomainStoreShippingExclusion.query(ancestor=catalog_key).fetch(),\n        # medjutim to predstavlja problem da se moze dogoditi da user iz jednog kataloga moze izabrati adresu koja mu je nedostupna u drugom katalogu u istom store-u\n        # to pravi nekonzistentnost i funkcionalnost nije onakva kakva se ocekuje da bude.\n        buyer_addresses = kwargs.get('buyer_addresses')\n        shipping_exclusions = kwargs.get('shipping_exclusions')\n        store = kwargs.get('store')\n        shipping_addresses = []\n        default_shipping_address = None\n        for buyer_address in buyer_addresses:\n            shipping_allowed = False\n            if not (shipping_exclusions):\n                shipping_allowed = True\n            else:\n                # Shipping everywhere except at the following locations\n                if not (store.location_exclusion):\n                    shipping_allowed = True\n                    for shipping_exclusion in shipping_exclusions:\n                        p = shipping_exclusion._properties\n                        if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                            if (buyer_address.country == shipping_exclusion.country):\n                                shipping_allowed = False\n                                break\n                        elif not (p['postal_code_from'] and p['postal_code_to']):\n                            if (buyer_address.country == shipping_exclusion.country and buyer_address.region == shipping_exclusion.region):\n                                shipping_allowed = False\n                                break\n                        else:\n                            if (buyer_address.country == shipping_exclusion.country and buyer_address.region == shipping_exclusion.region and (buyer_address.postal_code >= shipping_exclusion.postal_code_from and buyer_address.postal_code <= shipping_exclusion.postal_code_to)):\n                                shipping_allowed = False\n                                break\n                else:\n                    # Shipping only at the following locations\n                    for shipping_exclusion in shipping_exclusions:\n                        p = shipping_exclusion._properties\n                        if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                            if (buyer_address.country == shipping_exclusion.country):\n                                shipping_allowed = True\n                                break\n                        elif not (p['postal_code_from'] and p['postal_code_to']):\n                            if (buyer_address.country == shipping_exclusion.country and buyer_address.region == shipping_exclusion.region):\n                                shipping_allowed = True\n                                break\n                        else:\n                            if (buyer_address.country == shipping_exclusion.country and buyer_address.region == shipping_exclusion.region and (buyer_address.postal_code >= shipping_exclusion.postal_code_from and buyer_address.postal_code <= shipping_exclusion.postal_code_to)):\n                                shipping_allowed = True\n                                break\n            if (shipping_allowed):    \n                shipping_addresses.append(buyer_address)\n                    if (buyer_address.default_shipping):\n                        default_shipping_address = buyer_address\n        return {'shipping_addresses': shipping_addresses, 'default_shipping_address': default_shipping_address}\n    \n    def get_taxes(**kwargs):\n        taxes = kwargs.get('taxes')\n        location = kwargs.get('location')\n        product_template = kwargs.get('product_template')\n        product_category = product_template.product_category\n        carrier = kwargs.get('carrier')\n        valid_taxes = []\n        for tax in taxes:\n            tax_allowed = False\n            tax_p = tax._properties\n            # location parametar se uvek mora proslediti metodi, kako bi se uradila ispravna validacija.\n            if (tax_p['locations']):\n                # Tax everywhere except at the following locations\n                if not (tax.location_exclusion):\n                    tax_allowed = True\n                    for tax_location in tax.locations:\n                        p = tax_location._properties\n                        if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                            if (location.country == tax_location.country):\n                                tax_allowed = False\n                                break\n                        elif not (p['postal_code_from'] and p['postal_code_to']):\n                            if (location.country == tax_location.country and location.region == tax_location.region):\n                                tax_allowed = False\n                                break\n                        else:\n                            if (location.country == tax_location.country and location.region == tax_location.region and (location.postal_code >= tax_location.postal_code_from and location.postal_code <= tax_location.postal_code_to)):\n                                tax_allowed = False\n                                break\n                else:\n                    # Tax only at the following locations\n                    for tax_location in tax.locations:\n                        p = tax_location._properties\n                        if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                            if (location.country == tax_location.country):\n                                tax_allowed = True\n                                break\n                        elif not (p['postal_code_from'] and p['postal_code_to']):\n                            if (location.country == tax_location.country and location.region == tax_location.region):\n                                tax_allowed = True\n                                break\n                        else:\n                            if (location.country == tax_location.country and location.region == tax_location.region and (location.postal_code >= tax_location.postal_code_from and location.postal_code <= tax_location.postal_code_to)):\n                                tax_allowed = True\n                                break\n            else:\n                # u slucaju da taxa nema konfigurisane location exclusions-e onda se odnosi na sve lokacije/onda je to globalna taxa\n                tax_allowed = True\n            # ako je tax_allowed nakon location check-a onda radimo validaciju po carrier-u i product_category-ju\n            if (tax_allowed):\n                # ako je validator metod primio carrier id, onda se validacija odnosi na carrier.\n                if (carrier):\n                    tax_allowed = False\n                    # samo taxe koje su eksplicitno konfigurisane za carrier-e se mogu odnositi na carrier\n                    if (tax_p['carriers']) and (tax.carriers.count(carrier)):\n                        tax_allowed = True\n                # ako je validator metod primio product_category id, onda se validacija odnosi na product.\n                elif (product_category):\n                    # samo taxe koje nisu eksplicitno konfigurisane za carrier-e se mogu odnositi na prouduct\n                    if (tax_p['carriers']):\n                        tax_allowed = False\n                    else:\n                        # ukoliko taxa target-a product kategorije, onda se product_category mora naci medju njima kako bi taxa bila validna\n                        if (tax_p['product_categories']):\n                            if not (tax.product_categories.count(product_category)):\n                                tax_allowed = False\n            if (tax_allowed):\n                valid_taxes.append(tax)\n        return valid_taxes\n    \n    def calcualte_taxes(**kwargs):\n        if (kwargs.get('order')):\n            order = kwargs.get('order')\n            if (kwargs.get('order_line')):\n                order_line = kwargs.get('order_line')\n                tax_subtotal = DecTools.form('0', order.currency)\n                for tax in order_line.taxes:\n                    if (tax.amount.find('[%]') != -1):\n                        tax_amount = DecTools.form(re.sub(r'\\[%\\]','', tax.amount)) * DecTools.form('0.01') # moze i \"/ DecTools.form('100')\"\n                        tax_subtotal += order_line.subtotal * tax_amount\n                    elif (tax.amount.find('[c]') != -1):\n                        tax_amount = DecTools.form(re.sub(r'\\[c\\]','', tax.amount))\n                        tax_subtotal += tax_amount\n                return tax_subtotal\n            else:\n                lines = order.lines\n                order.lines = []\n                for order_line in lines:\n                    tax_subtotal = DecTools.form('0', order.currency)\n                    for tax in order_line.taxes:\n                        if (tax.amount.find('[%]') != -1):\n                            tax_amount = DecTools.form(re.sub(r'\\[%\\]','', tax.amount)) * DecTools.form('0.01') # moze i \"/ DecTools.form('100')\"\n                            tax_subtotal += order_line.subtotal * tax_amount\n                        elif (tax.amount.find('[c]') != -1):\n                            tax_amount = DecTools.form(re.sub(r'\\[c\\]','', tax.amount))\n                            tax_subtotal += tax_amount\n                    order_line.tax_subtotal = tax_subtotal\n                    order.lines.append(line)\n                return order\n    \n    def get_carriers(**kwargs):\n        carriers = []\n        order = None\n        valid_carriers = []\n        for key, value in kwargs.iteritems():\n            if (key = 'carriers'):\n                carriers = value\n            elif (key = 'order'):\n                order = value\n        for carrier in carriers:\n            for carrier_line in carrier.lines\n                line_allowed = False\n                carrier_line_p = carrier_line._properties\n                # location parametar se uvek mora proslediti metodi, kako bi se uradila ispravna validacija.\n                if (carrier_line_p['locations']):\n                    # Everywhere except at the following locations\n                    if not (carrier_line.location_exclusion):\n                        line_allowed = True\n                        for carrier_line_location in carrier_line.locations:\n                            p = carrier_line_location._properties\n                            if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                                if (order.shipping_address.country == carrier_line_location.country):\n                                    line_allowed = False\n                                    break\n                            elif not (p['postal_code_from'] and p['postal_code_to']):\n                                if (order.shipping_address.country == carrier_line_location.country and order.shipping_address.region == carrier_line_location.region):\n                                    line_allowed = False\n                                    break\n                            else:\n                                if (order.shipping_address.country == carrier_line_location.country and order.shipping_address.region == carrier_line_location.region and (order.shipping_address.postal_code >= carrier_line_location.postal_code_from and order.shipping_address.postal_code <= carrier_line_location.postal_code_to)):\n                                    line_allowed = False\n                                    break\n                    else:\n                        # Only at the following locations\n                        for carrier_line_location in carrier_line.locations:\n                            p = carrier_line_location._properties\n                            if not (p['region'] and p['postal_code_from'] and p['postal_code_to']):\n                                if (order.shipping_address.country == carrier_line_location.country):\n                                    line_allowed = True\n                                    break\n                            elif not (p['postal_code_from'] and p['postal_code_to']):\n                                if (order.shipping_address.country == carrier_line_location.country and order.shipping_address.region == carrier_line_location.region):\n                                    line_allowed = True\n                                    break\n                            else:\n                                if (order.shipping_address.country == carrier_line_location.country and order.shipping_address.region == carrier_line_location.region and (order.shipping_address.postal_code >= carrier_line_location.postal_code_from and order.shipping_address.postal_code <= carrier_line_location.postal_code_to)):\n                                    line_allowed = True\n                                    break\n                else:\n                    # u slucaju da carrier line nema konfigurisane location exclusions-e onda se odnosi na sve lokacije/onda je to globalni carrier\n                    line_allowed = True\n                # ako je line_allowed nakon location check-a onda radimo validaciju po carrier line rules\n                if (line_allowed):\n                    for carrier_line_rule in carrier_line.rules:\n                        # validacija carrier_line_rule,condition se ovde radi\n                if (tax_allowed):\n                    valid_carriers.append(tax)\n        return valid_carriers"],[0,"\n\n# done"]],"start1":95664,"start2":95664,"length1":16,"length2":49657},{"diffs":[[0,"illingOrder\n"],[1,"    # u slucaju Order-a, key za OrderLine ce se graditi na sledeci nacin:\n    # key: parent=order_key, id=catalog_namespace-catalog_id-product_template_id-product_instance_id\n    # iz id-ja se kasnije moze graditi link za referenciranje product_instance, pa je stoga nemoguce koristiti md5 za hashiranje id-a\n    # u slucaju BillingOrder-a, key za OrderLine ce se graditi na sledeci nacin:\n    # key: parent=billing_order_id, id=paypal_transaction_log_id ?\n"],[0,"    # http:/"]],"start1":149394,"start2":149394,"length1":24,"length2":481},{"diffs":[[0,"('10', kind="],[1,"Domain"],[0,"CatalogPrice"]],"start1":150850,"start2":150850,"length1":24,"length2":30},{"diffs":[[0,"('11', kind="],[1,"Domain"],[0,"ProductInsta"]],"start1":150950,"start2":150950,"length1":24,"length2":30},{"diffs":[[0,"elete()\n\n# done!"],[-1,""],[0,""],[1," - tryton ima CountrySubdivision za skoro sve zemlje!"],[0,"\nclass CountrySu"]],"start1":158865,"start2":158865,"length1":32,"length2":85},{"diffs":[[0,"reskace "],[1,"/ tryton ima CountrySubdivision za skoro sve zemlje"],[0,"\n    # r"]],"start1":161841,"start2":161841,"length1":16,"length2":67},{"diffs":[[0,"preksace"],[1," / tryton ima CountrySubdivision za skoro sve zemlje"],[0,"\n    # p"]],"start1":161977,"start2":161977,"length1":16,"length2":68},{"diffs":[[0,"jectLog\n"],[1,"\n# neki primer toola za formatiranje Decimal vrednosti\nclass DecTools(object):\n    \n    @staticmethod\n    def form(value, formater=None):\n        if (formater):\n            if (isinstance(formater, str)):\n                return Decimal(format(Decimal(value), formater))\n            else:\n                return Decimal(format(Decimal(value), '.' + formater.digits + 'f'))\n        else:\n            return Decimal(value)\n        \n        "]],"start1":180272,"start2":180272,"length1":8,"length2":445}]],"length":180717,"saved":false}
{"ts":1380306307700,"patch":[[{"diffs":[[0,"rder"],[-1,")\n                order = update_order("],[1,", "],[0,"bill"]],"start1":108239,"start2":108239,"length1":47,"length2":10}]],"length":180680,"saved":false}
{"ts":1380306443626,"patch":[[{"diffs":[[0,"rder(order=order"],[1,", store=store"],[0,")\n              "]],"start1":102639,"start2":102639,"length1":32,"length2":45}]],"length":180693,"saved":false}
{"ts":1380306532044,"patch":[[{"diffs":[[0,"(order=order"],[1,", store=store"],[0,")\n          "]],"start1":105593,"start2":105593,"length1":24,"length2":37}]],"length":180706,"saved":false}
{"ts":1380306667035,"patch":[[{"diffs":[[0,"r=order,"],[1," store=store,"],[0," billing"]],"start1":108262,"start2":108262,"length1":16,"length2":29}]],"length":180719,"saved":false}
{"ts":1380306782763,"patch":[[{"diffs":[[0,"rder.lines = []\n"],[1,"                sequence = 0\n"],[0,"                "]],"start1":107697,"start2":107697,"length1":32,"length2":61}]],"length":180748,"saved":false}
{"ts":1380306856387,"patch":[[{"diffs":[[0,"tity"],[-1,")\n                    order.lines.append(order_line)"],[1,", order_line_sequence=sequence)\n                    if (order_line):\n                        order.lines.append(order_line)\n                        sequence += 1"],[0,"\n   "]],"start1":108109,"start2":108109,"length1":60,"length2":169}]],"length":180857,"saved":false}
{"ts":1380307091155,"patch":[[{"diffs":[[0,"uence=sequence)\n"],[1,"                    # valjda ce ovako moci da radi sequencing.\n                    # ako ovo ne bude valjalo onda treba smisliti drugaciji nacin seqenca, mozda sa clienta da se salju sequence..\n"],[0,"                "]],"start1":108129,"start2":108129,"length1":32,"length2":226}]],"length":181051,"saved":false}
{"ts":1380307140256,"patch":[[{"diffs":[[0,"lines-a\n"],[1,"                    ord_line = order_lines.get(line.key)\n"],[0,"        "]],"start1":107905,"start2":107905,"length1":16,"length2":73},{"diffs":[[0,"form(ord"],[-1,"er"],[0,"_line"],[-1,"s.get(line.key)"],[1,".quantity"],[0,")\n      "]],"start1":108010,"start2":108010,"length1":38,"length2":30}]],"length":181100,"saved":false}
{"ts":1380307189770,"patch":[[{"diffs":[[0,"ord_line"],[-1,"."],[1,"['"],[0,"quantity"],[1,"']"],[0,")\n      "]],"start1":108015,"start2":108015,"length1":25,"length2":28}]],"length":181103,"saved":false}
{"ts":1380307321963,"patch":[[{"diffs":[[0,"_exists = False\n"],[1,"                index = 0\n"],[0,"                "]],"start1":100061,"start2":100061,"length1":32,"length2":58},{"diffs":[[0,"ntity=quantity)\n"],[1,"                        \n"],[0,"                "]],"start1":100798,"start2":100798,"length1":32,"length2":57},{"diffs":[[0,"          break\n"],[1,"                    index += 1\n"],[0,"                "]],"start1":101022,"start2":101022,"length1":32,"length2":63}]],"length":181185,"saved":false}
{"ts":1380307486332,"patch":[[{"diffs":[[0,"ty)\n"],[-1,"                        \n"],[0,"    "]],"start1":100810,"start2":100810,"length1":33,"length2":8},{"diffs":[[0,"h izbacimo.\n"],[1,"                        # ovo je mozda primer tog swapanja order line-a\n                        order.lines.pop(index)\n                        order.lines.insert(index, order_line)\n                \n"],[0,"            "]],"start1":100928,"start2":100928,"length1":24,"length2":222}]],"length":181358,"saved":false}
{"ts":1380307490505,"patch":[[{"diffs":[[0,"ne)\n"],[-1,"                \n"],[0,"    "]],"start1":101117,"start2":101117,"length1":25,"length2":8}]],"length":181341,"saved":false}
{"ts":1380307622101,"patch":[[{"diffs":[[0,"n None\n    \n"],[1,"    @ndb.transactional\n    def checkout():\n        \n    \n"],[0,"    # REUSAB"]],"start1":109317,"start2":109317,"length1":24,"length2":81}]],"length":181398,"saved":false}
{"ts":1380307756676,"patch":[[{"diffs":[[0,"r, store=store)\n"],[1,"                return order\n"],[0,"                "]],"start1":102892,"start2":102892,"length1":32,"length2":61},{"diffs":[[0,"checkout():\n"],[1,"        # prvo se execute update_cart funkcija i onda se radi update order objekta.\n"],[0,"        \n   "]],"start1":109389,"start2":109389,"length1":24,"length2":108}]],"length":181511,"saved":false}
{"ts":1380307766735,"patch":[[{"diffs":[[0,"          return"],[1," None"],[0,"\n            els"]],"start1":98752,"start2":98752,"length1":32,"length2":37}]],"length":181516,"saved":false}
{"ts":1380307771308,"patch":[[{"diffs":[[0,"          return"],[1," None"],[0,"\n               "]],"start1":99619,"start2":99619,"length1":32,"length2":37}]],"length":181521,"saved":false}
{"ts":1380307793036,"patch":[[{"diffs":[[0,"          return"],[1," None"],[0,"\n            # p"]],"start1":103994,"start2":103994,"length1":32,"length2":37},{"diffs":[[0,"r, store=store)\n"],[1,"            return order\n"],[0,"            # pr"]],"start1":105886,"start2":105886,"length1":32,"length2":57}]],"length":181551,"saved":false}
{"ts":1380307820288,"patch":[[{"diffs":[[0,"          return"],[1," None"],[0,"\n            els"]],"start1":106903,"start2":106903,"length1":32,"length2":37},{"diffs":[[0,"  return"],[1," None"],[0,"\n       "]],"start1":107787,"start2":107787,"length1":16,"length2":21},{"diffs":[[0,"rier_reference)\n"],[1,"                return order\n"],[0,"                "]],"start1":109074,"start2":109074,"length1":32,"length2":61}]],"length":181590,"saved":false}
{"ts":1380308094826,"patch":[[{"diffs":[[0," objekta"],[-1,"."],[0,"\n    "],[1,"    order = update_cart() # naravno, u pravilnom code-u ova funckija ce primati argumente kao i sve ostale dokumentovane metode\n        order.state = 'checkout'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='checkout', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n"],[0,"    \n   "]],"start1":109554,"start2":109554,"length1":22,"length2":393}]],"length":181961,"saved":false}
{"ts":1380308452686,"patch":[[{"diffs":[[0,"if (order.state "],[-1,"!"],[1,"="],[0,"= 'cart'):\n     "]],"start1":106689,"start2":106689,"length1":33,"length2":33},{"diffs":[[0,"'):\n"],[-1,"                # ukoliko je order u drugom state-u od 'cart' satate-a, onda ne praviti nikakve izmene\n                # zabranjeno je update-ovati order koji nije shopping cart-a\n                return None\n            else:\n"],[0,"    "]],"start1":106713,"start2":106713,"length1":234,"length2":8},{"diffs":[[0,"vi order line..\n"],[1,"            elif (order.state == 'request_quotation'):\n                # proveriti da li je shipping dozvoljen, i nastaviti ukoliko jeste\n                shipping_address = shipping_address_key.get()\n                billing_address = billing_address_key.get()\n                shipping_addresses = get_shipping_addresses(buyer_addresses=[shipping_address], shipping_exclusions=shipping_exclusions, store=store)\n                if not (shipping_addresses['shipping_addresses']):\n                    # zabranjeno je dodavati artikle iz store-a koji ne dozvoljava shipping na makar jednu adresu korisnika,\n                    # bez obizra da li je order prethodno napravljen ili ne.\n                    # postojeci order se moze jedino cancel u tom slucaju, \n                    # ili kupac mora napraviti adresu na koju se moze shipping raditi, kako bi bio u stanju da update-a order\n                    return None\n                # update postojecih order lines-a sa novim kolicinama proizvoda (quantity), \n                # i update postojeceg order-a sa novim vrednostima\n                lines = order.lines\n                order.lines = []\n                for line in lines:\n                    # order_lines je prekapovan dictionary sa values-ima za svaki order line i mapiranim originalnim kljucevima lines-a\n                    ord_line = order_lines.get(line.key)\n                    discount = DecTools.form(ord_line['discount'])\n                    order_line = update_order_line(user_key=user_key, order=order, order_line=line, order_line_discount=discount)\n                    order.lines.append(order_line)\n                # radimo update ordera kako bi se keshirani amount-ovi update-ovali\n                order = update_order(order=order, store=store)\n                return order\n                # preostaje da se jos u radi update carrier-a sa novim vrednostima, one se u ovoj fazi koriste samo u view, \n                # sve dok se carrier ne prenese kao novi order line..\n            else:\n                # ukoliko je order u drugom state-u od 'cart' ili 'request_quotation' satate-a, onda ne praviti nikakve izmene\n                # zabranjeno je update-ovati order koji nije shopping cart-a ili quotation\n                return None\n"],[0,"        # ukolik"]],"start1":109072,"start2":109072,"length1":32,"length2":2285}]],"length":183988,"saved":false}
{"ts":1380308555686,"patch":[[{"diffs":[[0,"    "],[-1,"elif (order.state == 'request_quotation'):\n                # proveriti da li je shipping dozvoljen, i nastaviti ukoliko jeste\n                shipping_address = shipping_address_key.get()\n                billing_address = billing_address_key.get()\n                shipping_addresses = get_shipping_addresses(buyer_addresses=[shipping_address], shipping_exclusions=shipping_exclusions, store=store)\n                if not (shipping_addresses['shipping_addresses']):\n                    # zabranjeno je dodavati artikle iz store-a koji ne dozvoljava shipping na makar jednu adresu korisnika,\n                    # bez obizra da li je order prethodno napravljen ili ne.\n                    # postojeci order se moze jedino cancel u tom slucaju, \n                    # ili kupac mora napraviti adresu na koju se moze shipping raditi, kako bi bio u stanju da update-a order\n                    return None"],[1,"# proveriti da li je order u state-u 'request_quotation'\n            elif (order.state == 'request_quotation'):"],[0,"\n   "]],"start1":109096,"start2":109096,"length1":908,"length2":119},{"diffs":[[0,"vim "],[-1,"kolicinama proizvoda (quantity)"],[1,"discount-ima"],[0,", \n "]],"start1":109267,"start2":109267,"length1":39,"length2":20},{"diffs":[[0,"r, store=store)\n"],[1,""],[0,"                "]],"start1":110029,"start2":110029,"length1":32,"length2":32},{"diffs":[[0,"der\n"],[-1,"                # preostaje da se jos u radi update carrier-a sa novim vrednostima, one se u ovoj fazi koriste samo u view, \n                # sve dok se carrier ne prenese kao novi order line..\n"],[0,"    "]],"start1":110070,"start2":110070,"length1":203,"length2":8}]],"length":182985,"saved":false}
{"ts":1380308718660,"patch":[[{"diffs":[[0,"er\n    \n    "],[1,"@ndb.transactional\n    def request_quotation():\n        #\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'quotation_requested'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='request_quotation', state=order.state, log=order)\n        object_log.put()\n        return order"],[0,"\n    \n    # "]],"start1":110955,"start2":110955,"length1":24,"length2":446}]],"length":183407,"saved":false}
{"ts":1380308893067,"patch":[[{"diffs":[[0," order\n    \n"],[1,"    @ndb.transactional\n    def complete_quotation():\n        #\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'quotation_completed'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete_quotation', state=order.state, log=order)\n        object_log.put()\n        return order\n        \n    @ndb.transactional\n    def pay():\n        #\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'processing'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='pay', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n    @ndb.transactional\n    def complete():\n        #\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'completed'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n    @ndb.transactional\n    def cancel():\n        #\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'canceled'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='cancel', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n"],[0,"    # REUSAB"]],"start1":111383,"start2":111383,"length1":24,"length2":1660}]],"length":185043,"saved":false}
{"ts":1380309049933,"patch":[[{"diffs":[[0," add_to_cart():\n"],[1,"        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n"],[0,"        # imamo "]],"start1":97966,"start2":97966,"length1":32,"length2":106}]],"length":185117,"saved":false}
{"ts":1380309394302,"patch":[[{"diffs":[[0," update_cart():\n"],[1,"        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent) ili agent koji ima domain-specific dozvolu 'quote-Order',\n        # \n"],[0,"        # imamo "]],"start1":106223,"start2":106223,"length1":32,"length2":182}]],"length":185267,"saved":false}
{"ts":1380309818593,"patch":[[{"diffs":[[0,"n cancel"],[1,"/pay"],[0," order;\n"],[-1,""],[0,"        "]],"start1":96433,"start2":96433,"length1":24,"length2":28},{"diffs":[[0,"ticirani agent.\n"],[1,"        # akcija se moze pozvati samo ako je order.state == 'cart'.\n"],[0,"        # imamo "]],"start1":98044,"start2":98044,"length1":32,"length2":100},{"diffs":[[0,"parent == agent)"],[1," ako je order.state == 'cart',\n        #"],[0," ili agent koji "]],"start1":106375,"start2":106375,"length1":32,"length2":72},{"diffs":[[0,"-Order',"],[-1,"\n        # "],[1," za order.store koji pripada domeni, i ako je order.state == 'request_quotation'.\n        # akcija se moze pozvati samo ako je order.state == 'cart' ili order.state == 'request_quotation'"],[0,"\n       "]],"start1":106481,"start2":106481,"length1":27,"length2":203},{"diffs":[[0,"checkout():\n"],[1,"        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'cart'.\n"],[0,"        # pr"]],"start1":111004,"start2":111004,"length1":24,"length2":174},{"diffs":[[0,"ion():\n        #"],[1," ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout'."],[0,"\n        store ="]],"start1":111670,"start2":111670,"length1":32,"length2":176},{"diffs":[[0,"ion():\n        #"],[1," \n        # akcija se moze pozvati samo ako je order.state == 'quotation_requested'."],[0,"\n        store ="]],"start1":112247,"start2":112247,"length1":32,"length2":116},{"diffs":[[0," def pay():\n"],[-1,""],[0,"        #\n  "]],"start1":112749,"start2":112749,"length1":24,"length2":24},{"diffs":[[0,"pay():\n        #"],[1," ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout' ili order.state == 'quotation_requested' ili order.state == 'quotation_completed'"],[0,"\n        store ="]],"start1":112754,"start2":112754,"length1":32,"length2":257}]],"length":186158,"saved":false}
{"ts":1380310098356,"patch":[[{"diffs":[[0,"cel/"],[-1,"request quotation/pay order;\n        'quotation_requested' : (3, ),# seller can edit discount on order lines, buyer can cancel/pay order;\n        'quotation_completed' : (4, ),# buyer can cancel/pay order"],[1,"pay order, post messages"],[0,";\n  "]],"start1":96311,"start2":96311,"length1":212,"length2":32},{"diffs":[[0,"cessing' : ("],[-1,"5"],[1,"3"],[0,", ),# no one"]],"start1":96353,"start2":96353,"length1":25,"length2":25},{"diffs":[[0,"ted' : ("],[-1,"6"],[1,"4"],[0,", ),# no"]],"start1":96430,"start2":96430,"length1":17,"length2":17},{"diffs":[[0,"led' : ("],[-1,"7"],[1,"5"],[0,", ),# no"]],"start1":96502,"start2":96502,"length1":17,"length2":17},{"diffs":[[0,"ete():\n        #"],[1," \n        # akcija se moze pozvati samo ako je order.state == 'processing'."],[0,"\n        store ="]],"start1":113199,"start2":113199,"length1":32,"length2":107},{"diffs":[[0,"):\n        #"],[1," ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout'."],[0,"\n        sto"]],"start1":113680,"start2":113680,"length1":24,"length2":168},{"diffs":[[0,"ut',"],[-1," 'quotation_requested', 'quotation_completed',"],[0," 'pr"]],"start1":114550,"start2":114550,"length1":54,"length2":8}]],"length":186151,"saved":false}
{"ts":1380310149710,"patch":[[{"diffs":[[0,"ozvolu '"],[-1,"quote"],[1,"discount"],[0,"-Order',"]],"start1":106288,"start2":106288,"length1":21,"length2":24},{"diffs":[[0,"ate == '"],[-1,"request_quotation"],[1,"checkout"],[0,"'.\n     "]],"start1":106366,"start2":106366,"length1":33,"length2":24},{"diffs":[[0,"ate == '"],[-1,"request_quotation"],[1,"checkout"],[0,"'\n      "]],"start1":106464,"start2":106464,"length1":33,"length2":24},{"diffs":[[0,"tate-u '"],[-1,"request_quotation"],[1,"checkout"],[0,"'\n      "]],"start1":109447,"start2":109447,"length1":33,"length2":24},{"diffs":[[0,"ate == '"],[-1,"request_quotation"],[1,"checkout"],[0,"'):\n    "]],"start1":109491,"start2":109491,"length1":33,"length2":24}]],"length":186118,"saved":false}
{"ts":1380310190040,"patch":[[{"diffs":[[0,"       '"],[-1,"request_quotation"],[1,"pay"],[0,"' : 4,\n "]],"start1":96739,"start2":96739,"length1":33,"length2":19},{"diffs":[[0,"lete"],[-1,"_quotation"],[0,"' : 5,\n"],[-1,"       'pay' : 6,\n       'complete' : 7,\n"],[0,"    "]],"start1":96769,"start2":96769,"length1":66,"length2":15},{"diffs":[[0,"ncel' : "],[-1,"8"],[1,"6"],[0,",\n    }\n"]],"start1":96790,"start2":96790,"length1":17,"length2":17},{"diffs":[[0,"nal\n"],[-1,"    def request_quotation():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'quotation_requested'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='request_quotation', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n    @ndb.transactional\n    def complete_quotation():\n        # \n        # akcija se moze pozvati samo ako je order.state == 'quotation_requested'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'quotation_completed'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete_quotation', state=order.state, log=order)\n        object_log.put()\n        return order\n        \n    @ndb.transactional\n"],[0,"    "]],"start1":111366,"start2":111366,"length1":1106,"length2":8}]],"length":184955,"saved":false}
{"ts":1380310232890,"patch":[[{"diffs":[[0," 3,\n       '"],[-1,""],[0,""],[1,"cancel' : 6,\n       '"],[0,"pay' : 4,\n  "]],"start1":96735,"start2":96735,"length1":24,"length2":45},{"diffs":[[0,"e' : 5,\n"],[-1,"       'cancel' : 6,\n"],[0,"    }\n  "]],"start1":96793,"start2":96793,"length1":37,"length2":16},{"diffs":[[0,"ut',"],[-1," 'quotation_requested', 'quotation_completed',"],[0,"),\n "]],"start1":96990,"start2":96990,"length1":54,"length2":8},{"diffs":[[0," },\n"],[-1,"        'request_quotation' : {\n           'from' : ('checkout', ),\n           'to'   : ('quotation_requested',),\n        },\n"],[0,"    "]],"start1":97039,"start2":97039,"length1":133,"length2":8},{"diffs":[[0," },\n"],[-1,"        'complete_quotation' : {\n           'from' : ('quotation_requested', ),\n           'to'   : ('quotation_completed',),\n        },\n"],[0,"    "]],"start1":97255,"start2":97255,"length1":145,"length2":8}]],"length":184647,"saved":false}
{"ts":1380310279550,"patch":[[{"diffs":[[0,"ut',"],[-1," 'quotation_requested', 'quotation_completed',), # mozda zabraniti from: quotation_requested, dok se ne zavrsi quote?"],[1,"),"],[0,"\n   "]],"start1":97089,"start2":97089,"length1":125,"length2":10}]],"length":184532,"saved":false}
{"ts":1380310405176,"patch":[[{"diffs":[[0,"     },\n"],[-1,"        \n"],[0,"    }\n  "]],"start1":97244,"start2":97244,"length1":25,"length2":16},{"diffs":[[0,"    def "],[-1,"pay"],[1,"cancel"],[0,"():\n    "]],"start1":110938,"start2":110938,"length1":19,"length2":22},{"diffs":[[0,"heckout'"],[-1," ili"],[1,".\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n       "],[0," order.s"]],"start1":111100,"start2":111100,"length1":20,"length2":131},{"diffs":[[0,"te ="],[-1,"="],[0," '"],[-1,"quotation_requested' ili order.state == 'quotation_completed'"],[1,"canceled'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='cancel', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n    @ndb.transactional\n    def pay():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout'."],[0,"\n   "]],"start1":111233,"start2":111233,"length1":72,"length2":420},{"diffs":[[0,"y = order.put()\n"],[1,""],[0,"        object_l"]],"start1":112281,"start2":112281,"length1":32,"length2":32},{"diffs":[[0,"   \n"],[-1,"    @ndb.transactional\n    def cancel():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'checkout'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'canceled'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='cancel', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n"],[0,"    "]],"start1":112472,"start2":112472,"length1":551,"length2":8}]],"length":184442,"saved":false}
{"ts":1380310661699,"patch":[[{"diffs":[[0," order\n    \n"],[1,"    @ndb.transactional\n    def message():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (order.parent == agent)\n        # ili agent koji ima domain-specific dozvolu 'discount-Order', za order.store koji pripada domeni.\n        # akcija se moze pozvati samo ako je order.state == 'checkout'.\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete', state=order.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        return order\n    \n"],[0,"    # REUSAB"]],"start1":112464,"start2":112464,"length1":24,"length2":631}]],"length":185049,"saved":false}
{"ts":1380310832397,"patch":[[{"diffs":[[0,"parent == agent)"],[1,",\n        # ili agent koji ima domain-specific dozvolu 'cancel-Order', za order.store koji pripada domeni"],[0,".\n        # akci"]],"start1":111020,"start2":111020,"length1":32,"length2":137}]],"length":185154,"saved":false}
{"ts":1380310876202,"patch":[[{"diffs":[[0,"nt == agent)"],[1,","],[0,"\n        # i"]],"start1":112691,"start2":112691,"length1":24,"length2":25},{"diffs":[[0,"ic dozvolu '"],[-1,"discount"],[1,"message"],[0,"-Order', za "]],"start1":112747,"start2":112747,"length1":32,"length2":31}]],"length":185154,"saved":false}
{"ts":1380311107393,"patch":[[{"diffs":[[0,"      # "],[1,"ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'complete-Order'. Verovatno ce to biti System Account"],[0,"\n       "]],"start1":112147,"start2":112147,"length1":16,"length2":131}]],"length":185269,"saved":false}
{"ts":1380311223898,"patch":[[{"diffs":[[0,"omplete-"],[-1,"Order"],[1,"Country"],[0,"'. Verov"]],"start1":112219,"start2":112219,"length1":21,"length2":23}]],"length":185271,"saved":false}
{"ts":1380311304930,"patch":[[{"diffs":[[0,"'complete' : 5,\n"],[1,"       'message' : 6,\n"],[0,"    }\n    \n    O"]],"start1":96785,"start2":96785,"length1":32,"length2":54},{"diffs":[[0,"_key'), action='"],[-1,"complet"],[1,"messag"],[0,"e', state=order."]],"start1":113093,"start2":113093,"length1":39,"length2":38}]],"length":185292,"saved":false}
{"ts":1380311470650,"patch":[[{"diffs":[[0,"ue)\n"],[-1,"    # comment = ndb.TextProperty('13')# 64kb limit\n"],[0,"    "]],"start1":94907,"start2":94907,"length1":59,"length2":8},{"diffs":[[0,"perty('1"],[-1,"4"],[1,"3"],[0,"', kind="]],"start1":94955,"start2":94955,"length1":17,"length2":17},{"diffs":[[0,"perty('1"],[-1,"5"],[1,"4"],[0,"', kind="]],"start1":95038,"start2":95038,"length1":17,"length2":17},{"diffs":[[0,"perty('1"],[-1,"6"],[1,"5"],[0,"', kind="]],"start1":95129,"start2":95129,"length1":17,"length2":17},{"diffs":[[0,"perty('1"],[-1,"7"],[1,"6"],[0,"', kind="]],"start1":95211,"start2":95211,"length1":17,"length2":17},{"diffs":[[0,"perty('1"],[-1,"8"],[1,"7"],[0,"', requi"]],"start1":95288,"start2":95288,"length1":17,"length2":17},{"diffs":[[0,"perty('1"],[-1,"9"],[1,"8"],[0,"', requi"]],"start1":95347,"start2":95347,"length1":17,"length2":17},{"diffs":[[0,"operty('"],[-1,"20"],[1,"19"],[0,"', requi"]],"start1":95503,"start2":95503,"length1":18,"length2":18}]],"length":185241,"saved":false}
{"ts":1380311527776,"patch":[[{"diffs":[[0,"  # "],[-1,"company_address = ndb.LocalStructuredProperty(OrderAddress, "],[1,"reference = ndb.StringProperty("],[0,"'9',"]],"start1":94594,"start2":94594,"length1":68,"length2":39},{"diffs":[[0,"red=True)\n    # "],[-1,"billing"],[1,"company"],[0,"_address = ndb.L"]],"start1":94639,"start2":94639,"length1":39,"length2":39},{"diffs":[[0,"red=True)\n    # "],[-1,"shipp"],[1,"bill"],[0,"ing_address = nd"]],"start1":94726,"start2":94726,"length1":37,"length2":36},{"diffs":[[0,"  # "],[-1,"reference = ndb.StringProperty("],[1,"shipping_address = ndb.LocalStructuredProperty(OrderAddress, "],[0,"'12'"]],"start1":94825,"start2":94825,"length1":39,"length2":69}]],"length":185241,"saved":false}
{"ts":1380311775488,"patch":[[{"diffs":[[0,"li '"],[-1,"request_quotation"],[1,"checkout"],[0,"' sa"]],"start1":109928,"start2":109928,"length1":25,"length2":16}]],"length":185232,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381483603568,"patch":[[{"diffs":[[0,"te\n'''\n\n"],[1,"# Kind ID-jevi su uvek UNIQUE unutar citave aplikacije.\n# Svi ostali ndb ID-jevi su unique unutar modela, i isto vazi za workflow konvenciju.\n\n"],[0,"from goo"]],"start1":2507,"start2":2507,"length1":16,"length2":159},{"diffs":[[0,"ounding=...\n"],[1,"# dodati max_size argument u SuperProperty za ogranicenje duzine value u propertyju\n# sledeci argumenti trebaju postojati u SuperProperty: visible, writable, max_size....\n"],[0,"class Decima"]],"start1":2881,"start2":2881,"length1":24,"length2":195},{"diffs":[[0,"! - "],[-1,"ovde ce nam trebati kontrola"],[1,"sudo kontrolisan model"],[0," - t"]],"start1":3637,"start2":3637,"length1":36,"length2":30},{"diffs":[[0," indexed=False)\n"],[1,"    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n"],[0,"    state = ndb."]],"start1":3922,"start2":3922,"length1":32,"length2":176},{"diffs":[[0,"ntegerProperty('"],[-1,"3"],[1,"5"],[0,"', required=True"]],"start1":4099,"start2":4099,"length1":33,"length2":33},{"diffs":[[0,"ended' : (2, ),\n"],[1,"        'su_suspended' : (3, ),\n"],[0,"    }\n    \n    O"]],"start1":4731,"start2":4731,"length1":32,"length2":64},{"diffs":[[0,"'activate' : 4,\n"],[1,"       'sudo' : 5,\n       'log_message' : 6,\n"],[0,"    }\n    \n    O"]],"start1":4884,"start2":4884,"length1":32,"length2":77},{"diffs":[[0,"',),\n        },\n"],[1,"        'su_activate' : {\n            'from' : ('su_suspended', 'suspended',),\n            'to' : ('active',),\n         },\n        'su_suspend' : {\n           'from' : ('active', 'suspended',),\n           'to'   : ('su_suspended',),\n        },\n"],[0,"    }\n    \n    #"]],"start1":5174,"start2":5174,"length1":32,"length2":276},{"diffs":[[0,"g.put()\n"],[-1,"        \n"],[0,"    \n   "]],"start1":6690,"start2":6690,"length1":25,"length2":16},{"diffs":[[0,"object_log.put()"],[1,"\n    \n    # Ova akcija suspenduje ili aktivira domenu. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == *. '*' znaci bilo koji state.\n        # var_state moze biti: 'active', 'su_suspended'\n        domain.state = var_state\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='sudo', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    @ndb.transactional\n    def log_message():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'log_message-Domain',\n        # ili agent koji ima globalnu dozvolu 'sudo-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == *. '*' znaci bilo koji state.\n        # radi se update Domain-a bez izmena na bilo koji prop. (u cilju izazivanja promene na Domain.updated prop.)\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=user_key, action='log_message', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":8618,"start2":8618,"length1":32,"length2":1460},{"diffs":[[0,"\n\n# "],[-1,"done! mozda bude trebala kontrola i ovde"],[1,"future implementation - prototype!\nclass DomainBusinessUnit(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,name\n    parent_record = ndb.KeyProperty('1', kind=DomainBusinessUnit, indexed=False)\n    name = ndb.StringProperty('2', required=True)\n    active = ndb.BooleanProperty('3', default=True)\n    _default_indexed = False\n    pass\n    #Expando\n    #\n    # logo = blobstore.BlobKeyProperty('4', required=True)# blob ce se implementirati na GCS\n    #\n    # Address\n    # country = ndb.KeyProperty('5', kind=Country)\n    # region = ndb.KeyProperty('6', kind=CountrySubdivision)# ako je potreban string val onda se ovo preskace / tryton ima CountrySubdivision za skoro sve zemlje\n    # region = ndb.StringProperty('7')# ako je potreban key val onda se ovo preskace / tryton ima CountrySubdivision za skoro sve zemlje\n    # city = ndb.StringProperty('8')\n    # postal_code = ndb.StringProperty('9')\n    # street_address = ndb.StringProperty('10')\n    # street_address2 = ndb.StringProperty('11')\n    # email = ndb.StringProperty('12')\n    # telephone = ndb.StringProperty('13')\n    # tax_id = ndb.StringProperty('14')\n    # reference = ndb.StringProperty('15')\n    \n# done! - sudo kontrolisan model"],[0,"\ncla"]],"start1":18466,"start2":18466,"length1":48,"length2":1249},{"diffs":[[0,"rati na GCS\n"],[1,"    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n"],[0,"    state = "]],"start1":19956,"start2":19956,"length1":24,"length2":168},{"diffs":[[0,"ntegerProperty('"],[-1,"3"],[1,"5"],[0,"', required=True"]],"start1":20129,"start2":20129,"length1":33,"length2":33},{"diffs":[[0,"StringProperty('"],[-1,"4"],[1,"6"],[0,"', required=True"]],"start1":20260,"start2":20260,"length1":33,"length2":33},{"diffs":[[0,"db.KeyProperty('"],[-1,"5"],[1,"7"],[0,"', kind=Country,"]],"start1":20320,"start2":20320,"length1":33,"length2":33},{"diffs":[[0,"db.KeyProperty('"],[-1,"6"],[1,"8"],[0,"', kind=CountryS"]],"start1":20393,"start2":20393,"length1":33,"length2":33},{"diffs":[[0,"StringProperty('"],[-1,"6"],[1,"9"],[0,"', required=True"]],"start1":20581,"start2":20581,"length1":33,"length2":33},{"diffs":[[0,"StringProperty('"],[-1,"7"],[1,"10"],[0,"', required=True"]],"start1":20739,"start2":20739,"length1":33,"length2":34},{"diffs":[[0,"StringProperty('"],[-1,"8"],[1,"11"],[0,"', required=True"]],"start1":20807,"start2":20807,"length1":33,"length2":34},{"diffs":[[0,"StringProperty('"],[-1,"9"],[1,"12"],[0,"', required=True"]],"start1":20878,"start2":20878,"length1":33,"length2":34},{"diffs":[[0,"tringProperty('1"],[-1,"0"],[1,"3"],[0,"')\n    # company"]],"start1":20951,"start2":20951,"length1":33,"length2":33},{"diffs":[[0,"tringProperty('1"],[-1,"1"],[1,"4"],[0,"')\n    # company"]],"start1":20998,"start2":20998,"length1":33,"length2":33},{"diffs":[[0,"tringProperty('1"],[-1,"2"],[1,"5"],[0,"')\n    #\n    # P"]],"start1":21049,"start2":21049,"length1":33,"length2":33},{"diffs":[[0,"b.KeyProperty('1"],[-1,"3"],[1,"6"],[0,"', kind=Currency"]],"start1":21108,"start2":21108,"length1":33,"length2":33},{"diffs":[[0,"tringProperty('1"],[-1,"4"],[1,"7"],[0,"')\n    # paypal_"]],"start1":21205,"start2":21205,"length1":33,"length2":33},{"diffs":[[0,"tringProperty('1"],[-1,"5"],[1,"8"],[0,"')\n    #\n    # F"]],"start1":21297,"start2":21297,"length1":33,"length2":33},{"diffs":[[0,"back, '1"],[-1,"6"],[1,"9"],[0,"', repea"]],"start1":21393,"start2":21393,"length1":17,"length2":17},{"diffs":[[0,"ooleanProperty('"],[-1,"17"],[1,"20"],[0,"', default=False"]],"start1":21671,"start2":21671,"length1":34,"length2":34},{"diffs":[[0,"losed' : (2, ),\n"],[1,"        'su_closed' : (3, ), # Ovo je samo ako nam bude trebala kontrola nad DomainStore. \n"],[0,"    }\n    \n    O"]],"start1":22251,"start2":22251,"length1":32,"length2":123},{"diffs":[[0,"'open' : 4,\n"],[1,"       'sudo' : 5, # Ovo je samo ako nam bude trebala kontrola nad DomainStore. \n       'log_message' : 6, # Ovo je samo ako nam bude trebala kontrola nad DomainStore. \n"],[0,"    }\n    \n "]],"start1":22461,"start2":22461,"length1":24,"length2":193},{"diffs":[[0,"',),\n        },\n"],[1,"        # Ovo je samo ako nam bude trebala kontrola nad DomainStore. \n        'su_open' : {\n            'from' : ('su_closed', 'closed',),\n            'to' : ('open',),\n         },\n         # Ovo je samo ako nam bude trebala kontrola nad DomainStore. \n        'su_close' : {\n           'from' : ('open', 'closed',),\n           'to'   : ('su_closed',),\n        },\n"],[0,"    }\n    \n    #"]],"start1":22855,"start2":22855,"length1":32,"length2":395},{"diffs":[[0,"object_log.put()"],[1,"\n    \n    # Ova akcija otvara ili zatvara store. Ovo je samo ako nam bude trebala kontrola nad DomainStore. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-DomainStore'.\n        # akcija se moze pozvati samo ako je store.state == *. '*' znaci bilo koji state.\n        # var_state moze biti: 'open', 'su_closed'\n        store.state = var_state\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='sudo', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovo je samo ako nam bude trebala kontrola nad DomainStore.\n    @ndb.transactional\n    def log_message():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'log_message-DomainStore',\n        # ili agent koji ima globalnu dozvolu 'sudo-DomainStore'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == *. '*' znaci bilo koji state.\n        # radi se update DomainStore-a bez izmena na bilo koji prop. (u cilju izazivanja promene na DomainStore.updated prop.)\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=user_key, action='log_message', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":25538,"start2":25538,"length1":32,"length2":1614},{"diffs":[[0,"k_count + 1\n"],[1,"    # najbolje je raditi update jednom dnevno, ne treba vise od toga, tako da bi mozda cron ili task queue bilo resenje za agregaciju\n"],[0,"    month = "]],"start1":27622,"start2":27622,"length1":24,"length2":158},{"diffs":[[0,"! - "],[-1,"ovde ce nam trebati kontrola"],[1,"sudo kontrolisan model"],[0,"\ncla"]],"start1":40904,"start2":40904,"length1":36,"length2":30},{"diffs":[[0,"30 days\n"],[1,"    updated = ndb.DateTimeProperty('5', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('6', auto_now_add=True, required=True)\n"],[0,"    stat"]],"start1":41343,"start2":41343,"length1":16,"length2":160},{"diffs":[[0,"ntegerProperty('"],[-1,"5"],[1,"7"],[0,"', required=True"]],"start1":41512,"start2":41512,"length1":33,"length2":33},{"diffs":[[0,"lobKeyProperty('"],[-1,"6"],[1,"8"],[0,"', required=True"]],"start1":41624,"start2":41624,"length1":33,"length2":33},{"diffs":[[0,"ecimalProperty('"],[-1,"7"],[1,"9"],[0,"', required=True"]],"start1":41707,"start2":41707,"length1":33,"length2":33},{"diffs":[[0,"scontinue' : 5,\n"],[1,"       'log_message' : 6,\n"],[0,"    }\n    \n    O"]],"start1":42683,"start2":42683,"length1":32,"length2":58},{"diffs":[[0," 'from' : ('"],[-1,""],[0,""],[1,"locked', '"],[0,"published', "]],"start1":43004,"start2":43004,"length1":24,"length2":34},{"diffs":[[0,"e-DomainCatalog'"],[1,",\n        # ili agent koji ima globalnu dozvolu 'sudo-DomainCatalog'"],[0,".\n        # akci"]],"start1":46490,"start2":46490,"length1":32,"length2":100},{"diffs":[[0,"catalog.state =="],[1," 'locked' ili catalog.state =="],[0," 'published'.\n  "]],"start1":46648,"start2":46648,"length1":32,"length2":62},{"diffs":[[0,"object_log.put()"],[1,"\n    \n    @ndb.transactional\n    def log_message():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'log_message-DomainCatalog',\n        # ili agent koji ima globalnu dozvolu 'sudo-DomainCatalog'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished',\n        # ili catalog.state == 'locked' ili catalog.state == 'published' ili catalog.state == 'discontinued' (za ovaj zadnji state jos ne znamo).\n        # radi se update DomainCatalog-a bez izmena na bilo koji prop. (u cilju izazivanja promene na DomainCatalog.updated prop.)\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=user_key, action='log_message', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":47039,"start2":47039,"length1":32,"length2":948},{"diffs":[[0,"ance"],[-1,"\n    # not logged\n    # composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)"],[1," (namespace Domain)\n    # key za DomainProductInventoryLog ce se graditi na sledeci nacin:\n    # key: parent=domain_product_instance.key, id=str(reference_key) ili mozda neki drugi destiled id iz key-a\n    "],[0,"# id"]],"start1":67264,"start2":67264,"length1":199,"length2":214},{"diffs":[[0,"proverava da li "],[-1,"je"],[1,"postoji"],[0," record sa tim r"]],"start1":67516,"start2":67516,"length1":34,"length2":39},{"diffs":[[0,"stoji record sa "],[-1,"t"],[0,"i"],[1,"d-je"],[0,"m reference-om u"]],"start1":67534,"start2":67534,"length1":34,"length2":37},{"diffs":[[0,"ence"],[-1,"-om upisan \n    quantity = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4"],[1,"_key\n    # not logged\n    # composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    quantity = DecimalProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('3"],[0,"', r"]],"start1":67562,"start2":67562,"length1":171,"length2":304},{"diffs":[[0,"ce_key, "],[-1,"reference="],[1,"id=str("],[0,"product_"]],"start1":69659,"start2":69659,"length1":26,"length2":23},{"diffs":[[0,"justment_key"],[1,")"],[0,", quantity=p"]],"start1":69694,"start2":69694,"length1":24,"length2":25},{"diffs":[[0,"#######\n\n# done!"],[-1,""],[0,""],[1," - sudo kontrolisan model"],[0,"\nclass User(ndb."]],"start1":73764,"start2":73764,"length1":32,"length2":57},{"diffs":[[0,"_KIND = "],[-1,"2"],[1,"0"],[0,"\n    \n  "]],"start1":74186,"start2":74186,"length1":17,"length2":17},{"diffs":[[0,"EFAULT_STATE = '"],[1,"su_"],[0,"active'\n    \n   "]],"start1":74213,"start2":74213,"length1":32,"length2":35},{"diffs":[[0,"te-ova\n        '"],[1,"su_"],[0,"active' : (1, ),"]],"start1":74680,"start2":74680,"length1":32,"length2":35},{"diffs":[[0,"(1, ),\n        '"],[1,"su_"],[0,"suspended' : (2,"]],"start1":74709,"start2":74709,"length1":32,"length2":35},{"diffs":[[0," 'su"],[-1,"spend' : 5,\n       'activate' : 6"],[1,"do' : 5"],[0,",\n  "]],"start1":74873,"start2":74873,"length1":41,"length2":15},{"diffs":[[0,"NS = {\n        '"],[-1,""],[0,""],[1,"su_"],[0,"activate' : {\n  "]],"start1":74917,"start2":74917,"length1":32,"length2":35},{"diffs":[[0,"('su"],[-1,"spended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('"],[1,"_suspended',),\n            'to' : ('su_active',),\n         },\n        'su_suspend' : {\n           'from' : ('su_active', ),\n           'to'   : ('su_"],[0,"susp"]],"start1":75043,"start2":75043,"length1":142,"length2":157},{"diffs":[[0,"_emails, state='"],[-1,""],[0,""],[1,"su_"],[0,"active')\n       "]],"start1":75825,"start2":75825,"length1":32,"length2":35},{"diffs":[[0,"    "],[-1,"@ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.p"],[1,"# Ova akcija takodjer sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-User'.\n        # akcija se moze pozvati samo ako je user.state == *. '*' znaci bilo koji state.\n        # var_state moze biti: 'su_suspended', 'su_active'.\n        user.state = var_state\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='sudo', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        if (user.state == 'su_suspended'):\n            # poziva se akcija \"logout\";\n            User.logo"],[0,"ut()"]],"start1":78857,"start2":78857,"length1":1508,"length2":1102},{"diffs":[[0,"ingProperty('9')"],[-1,""],[0,""],[1," # ovo polje verovatno ne treba, s obzirom da je u street_address dozvoljeno 500 karaktera "],[0,"\n    # email = n"]],"start1":81933,"start2":81933,"length1":32,"length2":123},{"diffs":[[0,"_KIND = "],[-1,"18"],[1,"0"],[0,"\n    \n  "]],"start1":82132,"start2":82132,"length1":18,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"19"],[1,"0"],[0,"\n    \n  "]],"start1":84225,"start2":84225,"length1":18,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"2"],[0,""],[1,""],[0,"0\n    \n "]],"start1":86303,"start2":86303,"length1":17,"length2":16},{"diffs":[[0,"###\n\n# done!"],[-1,""],[0,""],[1," - sudo kontrolisan model "],[0,"\nclass Feedb"]],"start1":89445,"start2":89445,"length1":24,"length2":50},{"diffs":[[0,"_KIND = "],[-1,"8"],[1,"0"],[0,"\n    \n  "]],"start1":90294,"start2":90294,"length1":17,"length2":17},{"diffs":[[0,"   '"],[-1,"reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4"],[1,"su_reviewing' : (2, ),\n        'su_duplicate' : (3, ),\n        'su_accepted' : (4, ),\n        'su_dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'log_message' : 2,\n       'sudo' : 3"],[0,",\n  "]],"start1":90823,"start2":90823,"length1":229,"length2":224},{"diffs":[[0,"       '"],[-1,""],[0,""],[1,"su_"],[0,"review' "]],"start1":91084,"start2":91084,"length1":16,"length2":19},{"diffs":[[0,": ('"],[-1,"reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', '"],[1,"su_reviewing',),\n         },\n        'su_close' : {\n           'from' : ('su_reviewing', ),\n           'to'   : ('su_duplicate', 'su_accepted', 'su_"],[0,"dism"]],"start1":91155,"start2":91155,"length1":138,"length2":156},{"diffs":[[0,"def "],[-1,"update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!"],[1,"log_message():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (feedback_request.parent == agent), / za ovo cemo jos videti ???\n        # ili agent koji ima globalnu dozvolu 'sudo-FeedbackRequest'\n        # akcija se moze pozvati samo ako je feedback_request.state == *. '*' znaci bilo koji state. ???\n        # radi se update feedback_request-a bez izmena na bilo koji prop. (u cilju izazivanja promene na feedback_request.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='log_message', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'su_reviewing', 'su_duplicate', 'su_accepted' ili 'su_dismissed'.\n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new' ili feedback_request.state == 'su_reviewing'\n        # var_state moze biti: 'su_reviewing', 'su_duplicate', 'su_accepted', 'su_dismissed'.\n        feedback_request.state = var_state\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='sudo', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done! - sudo kontrolisan model"],[0,"\ncla"]],"start1":92149,"start2":92149,"length1":2234,"length2":1746},{"diffs":[[0,"_KIND = "],[-1,"9"],[1,"0"],[0,"\n    \n  "]],"start1":94577,"start2":94577,"length1":17,"length2":17},{"diffs":[[0,"),\n        '"],[1,"su_"],[0,"opened' : (2"]],"start1":95098,"start2":95098,"length1":24,"length2":27},{"diffs":[[0,"       '"],[1,"su_"],[0,"awaiting"]],"start1":95131,"start2":95131,"length1":16,"length2":19},{"diffs":[[0,"   '"],[-1,"update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5"],[1,"log_message' : 2,\n       'sudo' : 3,\n       'close' : 4"],[0,",\n  "]],"start1":95254,"start2":95254,"length1":86,"length2":63},{"diffs":[[0,"NS = {\n        '"],[-1,""],[0,""],[1,"su_"],[0,"open' : {\n      "]],"start1":95346,"start2":95346,"length1":32,"length2":35},{"diffs":[[0,": ('"],[-1,"opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', '"],[1,"su_opened',),\n         },\n        'su_propose_close' : {\n           'from' : ('su_opened', ),\n           'to'   : ('su_awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('su_opened', 'su_"],[0,"awai"]],"start1":95423,"start2":95423,"length1":199,"length2":217},{"diffs":[[0,"nce="],[-1,"'https://www,miraclestyle.com/...'"],[1,"var_reference"],[0,", st"]],"start1":95997,"start2":95997,"length1":42,"length2":21},{"diffs":[[0,"def "],[-1,"update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'."],[1,"log_message():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (support_request.parent == agent),\n        # ili agent koji ima globalnu dozvolu 'sudo-SupportRequest'\n        # akcija se moze pozvati samo ako je support_request.state == 'new' ili support_request.state == 'su_opened'\n        # ili support_request.state == 'su_awaiting_closure'\n        # radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='log_message', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'su_opened' ili 'su_awaiting_closure'.\n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new' ili support_request.state == 'su_opened'\n        # var_state moze biti: 'su_opened', 'su_awaiting_closure'.\n        support_request.state = var_state\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='sudo', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo vlasnik entiteta (support_request.parent == agent),\n        # ili agent koji ima globalnu dozvolu 'close-SupportRequest'. (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'su_opened' ili support_request.state == 'su_awaiting_closure'"],[0,"\n   "]],"start1":96504,"start2":96504,"length1":2589,"length2":2189},{"diffs":[[0,"#######\n\n# done!"],[-1,""],[0,""],[1," - carrier funkcija za obracun i odabir carrier-a nije zavrsena! to cemo zavrsiti kad budemo radili dev trade modula.."],[0,"\nclass Order(ndb"]],"start1":99248,"start2":99248,"length1":32,"length2":150},{"diffs":[[0,"ated on checkout"],[-1,""],[0,""],[1," / or on completed ?"],[0,"\n    currency = "]],"start1":100314,"start2":100314,"length1":32,"length2":52},{"diffs":[[0,"rue)"],[-1,"\n    # store_name = ndb.StringProperty('18', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n    # store_logo = blobstore.BlobKeyProperty('19', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False"],[1," # ako OrderFeedback jos nije napravljen onda ovo polje nije definisano, a sistem to interpretira kao 'not provided'\n    # store_name = ndb.StringProperty('18', required=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n    # store_logo = blobstore.BlobKeyProperty('19', required=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n    # paypal_email = ndb.StringProperty('20', required=True)\n    # paypal_payment_status = ndb.StringProperty('21', required=True)"],[0,"\n   "]],"start1":101517,"start2":101517,"length1":315,"length2":534},{"diffs":[[0,"   \n"],[-1,"    # nedostaju akcije za dupliciranje catalog-a, za clean-up, etc...\n"],[0,"    "]],"start1":102942,"start2":102942,"length1":78,"length2":8},{"diffs":[[0,"' : "],[-1,"6,\n       'pay' : 4,\n       'complete' : 5,\n       'message' : 6"],[1,"4,\n       'pay' : 5,\n       'timeout' : 6,\n       'complete' : 7,\n       'message' : 8"],[0,",\n  "]],"start1":103058,"start2":103058,"length1":72,"length2":94},{"diffs":[[0,"',),\n        },\n"],[1,"        'timeout' : {\n           'from' : ('processing',),\n           'to'   : ('checkout',),\n        },\n"],[0,"        'complet"]],"start1":103477,"start2":103477,"length1":32,"length2":137},{"diffs":[[0,".state == 'cart'"],[-1,""],[0,""],[1," ili ako aktivan order za taj store ne postoji"],[0,".\n        # imam"]],"start1":103887,"start2":103887,"length1":32,"length2":78},{"diffs":[[0,"uence = "],[-1,"0"],[1,"1"],[0,"\n       "]],"start1":114143,"start2":114143,"length1":17,"length2":17},{"diffs":[[0,"pripada domeni.\n"],[1,"        # mozda budemo stavili da 'checkout' i 'cart' orderi sami expire-aju nakon nekog intervala, tako da domain-specific dozvola bude nepotrebna\n"],[0,"        # akcija"]],"start1":117618,"start2":117618,"length1":32,"length2":180},{"diffs":[[0," = 'processing'\n"],[1,"        order.paypal_email = store.paypal_email # mozda da ovo stavimo u update_order ?\n"],[0,"        order_ke"]],"start1":118519,"start2":118519,"length1":32,"length2":120},{"diffs":[[0,"def "],[-1,"complete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'complete-Country'. Verovatno ce to biti System Account\n        # akcija se moze pozvati samo ako je order.state == 'processing'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'completed'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete', state=order.state, log=order)\n        object"],[1,"timeout():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'timeout-Order'. Verovatno ce to biti System Account\n        # akcija se moze pozvati samo ako je order.state == 'processing'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'checkout'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='timeout', state=order.state, log=order)\n        object_log.put()\n        return order\n    \n    @ndb.transactional\n    def complete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'complete-Order'. Verovatno ce to biti System Account\n        # akcija se moze pozvati samo ako je order.state == 'processing'.\n        store = catalog.store.get()\n        order = get_order(store_key=catalog.store, user_key=user_key)\n        order.state = 'completed'\n        order_key = order.put()\n        object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='complete', state=order.state, log=order)\n        object_log.put()\n        # azuriranje product inventory. ovaj code bi mogao eventualno da se prebaci u checkout() ?\n        for line in order.lines:\n            # gradimo kljuc product instance iz id-ja linije.\n            line_ids = str(line.key.id()).split('-')\n            product_instance_key = ndb.Key('DomainCatalog', line_ids[1], 'DomainProductTemplate', line_ids[2], 'DomainProductInstance', line_ids[3], namespace=line_ids[0])\n            # proveravamo da li product instance postoji\n            product_instance = product_instance_key.get()\n            if (product_instance):\n                # ako product_instance postoji, onda se radi inventory logging za ovaj line\n                # ovo bi trebalo ici preko task queue\n                # product instance ne mora postojati, napr. u slucaju kada product template ima preko 1000 varijacija\n                # idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n                logged = ndb.Key('DomainProductInventoryLog', str(line.key), parent=product_instance_key).get()\n                # samo se jednom radi inventory logging per order line!\n                if not (logged):\n                    # uzimamo zadnji status quantity-ja radi obracuna\n                    product_inventory_log = DomainProductInventoryLog.query().order(-DomainProductInventoryLog.logged).fetch(1)\n                    new_product_inventory_log = DomainProductInventoryLog(parent=product_instance_key, id=str(line.key), quantity=line.quantity, balance=product_inventory_log[0].balance - line.quantity)\n                    new_product_inventory"],[0,"_log"]],"start1":118856,"start2":118856,"length1":536,"length2":2738},{"diffs":[[0,"dback')\n"],[1,"            if (kwargs.get('paypal_payment_status') and order.paypal_payment_status != kwargs.get('paypal_payment_status')):\n                order.paypal_payment_status = kwargs.get('paypal_payment_status')\n"],[0,"        "]],"start1":127136,"start2":127136,"length1":16,"length2":223},{"diffs":[[0,"eedback = 1\n"],[1,"            # paypal_payment_status treba da ima neku default vrednost, to ce kasnije biti PayPalTransactionLog ipn.payment_status\n            paypal_payment_status = 1\n"],[0,"            "]],"start1":134763,"start2":134763,"length1":24,"length2":193},{"diffs":[[0,"dback, \n"],[1,"                paypal_payment_status=paypal_payment_status, \n"],[0,"        "]],"start1":135973,"start2":135973,"length1":16,"length2":78},{"diffs":[[0,"order.lines)"],[-1,""],[0,""],[1," + 1"],[0,"\n           "]],"start1":143131,"start2":143131,"length1":24,"length2":28},{"diffs":[[0,"rs\n\n"],[-1,"# done!\nclass OrderFeedback(ndb.Model):\n    \n    # ancestor Order\n    state = ndb.IntegerProperty('1', required=True, indexed=False)\n\n"],[0,"# do"]],"start1":159235,"start2":159235,"length1":142,"length2":8},{"diffs":[[0,"    "],[-1,"# comment = ndb.TextProperty('12')# 64kb limit"],[1,"\n    # ovaj model za sada postoji dok ne budemo videli kako ce Order izgledati\n    # cilj nam je da BillingOrder izbacimo\n    # ako razlike budu zanemarljive u pogledu Order-a i BillingOrder-a onda cemo BillingOrder izbaciti\n    # trebamo jos da utvrdimo koji je diference u funkcijama izmedju ORder-a i BillingOrder-a\n    # razlika u funkcijama izmedju Order-a i Billing order-a bi trebala da je mala\n    # za sada se zna da ce BillingOrder uvek imati samo jedan OrderLine,\n    # i da ce OrderLine uvek imati sledece konstante:\n    # OrderLine(quantity=1, product_uom=Unit, discount=0.00, sequence=1)"],[0,"\n\n# "]],"start1":160586,"start2":160586,"length1":54,"length2":609},{"diffs":[[0,"roperty('9')"],[-1,""],[0,""],[1," # ovo polje verovatno ne treba, s obzirom da je u street_address dozvoljeno 500 karaktera "],[0,"\n    # email"]],"start1":161919,"start2":161919,"length1":24,"length2":115},{"diffs":[[0,"one!"],[-1,"\nclass PayPalTransaction(ndb.Model):\n    \n    # ancestor Order, BillingOrder\n    # not logged\n    # ako budemo radili analizu sa pojedinacnih ordera onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    txn_id = ndb.StringProperty('2', required=True)\n    ipn_message = ndb.TextProperty('3', required=True)\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass BillingLog(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)# idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n    amount = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass BillingCreditAdjustment(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    adjusted = ndb.DateTimeProperty('2', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('3', kind=User, required=True, indexed=False)\n    amount = DecimalProperty('4', required=True, indexed=False)\n    message = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    note = ndb.TextProperty('6')# soft limit 64kb - to determine char count"],[1," - sudo kontrolisan model\nclass OrderFeedback(ndb.Model):\n    \n    # ancestor Order\n    # key: parent=order_key, id=order_id\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    state = ndb.IntegerProperty('1', required=True, indexed=False)\n    updated = ndb.DateTimeProperty('2', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('3', auto_now_add=True, required=True)\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'positive' : (1, ),\n        'neutral' : (2, ),\n        'negative' : (3, ),\n        'revision' : (4, ),\n        'reported' : (5, ),\n        'su_positive' : (6, ),\n        'su_neutral' : (7, ),\n        'su_negative' : (8, ),\n        # mozda nam bude trebao i su_invisible state kako bi mogli da uticemo na vidljivost pojedinacnih OrderFeedback-ova\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'log_message' : 2,\n       'review' : 3,\n       'report' : 4,\n       'revision_feedback' : 5,\n       'sudo' : 6,\n       'invisible' : 7,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('positive', 'neutral', 'negative',),\n            'to' : ('revision',),\n         },\n        'report' : {\n           'from' : ('positive', 'neutral', 'negative', 'revision',),\n           'to'   : ('reported',),\n        },\n        'revision_feedback' : {\n           'from' : ('revision',),\n           'to'   : ('positive', 'neutral', 'negative',),\n        },\n        'su_feedback' : {\n           'from' : ('positive', 'neutral', 'negative', 'revision', 'reported', 'su_positive', 'su_neutral', 'su_negative',),\n           'to'   : ('su_positive', 'su_neutral', 'su_negative',),\n        },\n    }\n    \n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo vlasnik parent entiteta (order_feedback.parent == order.parent == agent).\n        # akcija se moze pozvati samo ako je order.state == 'completed'.\n        # var_state moze biti 'positive', 'neutral', 'neutral'.\n        order_feedback = OrderFeedback(parent=order.key, id=order.key.id(), state=var_state)\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='create', state=order_feedback.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n        Order.update_order(order=order, store=store, feedback=order_feedback.state)\n        # nedostaje agregaciona feedback statistika za store\n    \n    @ndb.transactional\n    def log_message():\n        # ovu akciju moze izvrsiti samo vlasnik parent entiteta (order_feedback.parent == order.parent == agent),\n        # ili agent koji ima domain-specific dozvolu 'log_message-OrderFeedback', za order.store koji pripada domeni,\n        # ili agent koji ima globalnu dozvolu 'sudo-OrderFeedback'.\n        # akcija se moze pozvati samo ako je order_feedback.state == 'positive' ili order_feedback.state == 'neutral' \n        # ili order_feedback.state == 'negative' ili order_feedback.state == 'revision' ili order_feedback.state == 'reported'.\n        # radi se update OrderFeedback-a bez izmena na bilo koji prop. (u cilju izazivanja promene na OrderFeedback.updated prop.)\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='log_message', state=order_feedback.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'review-OrderFeedback', za order.store koji pripada domeni.\n        # akcija se moze pozvati samo ako je order_feedback.state == 'positive' ili order_feedback.state == 'neutral' \n        # ili order_feedback.state == 'negative'.\n        order_feedback.state = 'revision'\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='review', state=order_feedback.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n        Order.update_order(order=order, store=store, feedback=order_feedback.state)\n        # nedostaje agregaciona feedback statistika za store\n    \n    @ndb.transactional\n    def report():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'report-OrderFeedback', za order.store koji pripada domeni.\n        # akcija se moze pozvati samo ako je order_feedback.state == 'positive' ili order_feedback.state == 'neutral' \n        # ili order_feedback.state == 'negative' ili order_feedback.state == 'revision'.\n        order_feedback.state = 'reported'\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='report', state=order_feedback.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n        Order.update_order(order=order, store=store, feedback=order_feedback.state)\n        # nedostaje agregaciona feedback statistika za store\n    \n    @ndb.transactional\n    def revision_feedback():\n        # ovu akciju moze izvrsiti samo vlasnik parent entiteta (order_feedback.parent == order.parent == agent).\n        # akcija se moze pozvati samo ako je order_feedback.state == 'revision'.\n        # var_state moze biti 'positive', 'neutral', 'neutral'.\n        order_feedback.state = var_state\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='revision_feedback', state=order_feedback.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n        Order.update_order(order=order, store=store, feedback=order_feedback.state)\n        # nedostaje agregaciona feedback statistika za store\n    \n    @ndb.transactional\n    def sudo():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-OrderFeedback'.\n        # akcija se moze pozvati samo ako je order_feedback.state == *. '*' znaci bilo koji state.\n        # var_state moze biti: 'su_positive', 'su_neutral', 'su_neutral'.\n        order_feedback.state = var_state\n        order_feedback_key = order_feedback.put()\n        object_log = ObjectLog(parent=order_feedback_key, agent=user_key, action='sudo', state=order_feedback.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        Order.update_order(order=order, store=store, feedback=order_feedback.state)\n        # nedostaje agregaciona feedback statistika za store\n    \n    @ndb.transactional\n    def invisible(**kwargs):\n        # ovo bi trebala da bude automatizovana akcija koja brise feedback iz ordera kako bi se feedback statistika promenila\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'sudo-OrderFeedback'. ?\n        # akcija se moze pozvati samo ako je domain.state == *. '*' znaci bilo koji state.\n        order = kwargs.get('order')\n        store = kwargs.get('store')\n        if (kwargs.get('true')):\n            del order.feedback\n            Order.update_order(order=order, store=store)\n            # nedostaje agregaciona feedback statistika za store\n        else:\n            order_feedback = ndb.Key(OrderFeedback, order.key.id(), parent=order.key).get()\n            Order.update_order(order=order, store=store, feedback=order_feedback.state)\n            # nedostaje agregaciona feedback statistika za store"],[0,"\n\n##"]],"start1":166628,"start2":166628,"length1":1524,"length2":8269},{"diffs":[[0,"##\n#"],[-1," OBJECT"],[0," LOG"],[1,"S"],[0," - 1"]],"start1":200415,"start2":200415,"length1":19,"length2":13},{"diffs":[[0,"##\n\n# done!\n"],[1,"# funkcija ObjectLog-a je da radi historization objekata koji se loguju i da radi messaging!\n"],[0,"class Object"]],"start1":200507,"start2":200507,"length1":24,"length2":117},{"diffs":[[0,"bjectLog"],[-1,""],[0,""],[1,"\n\n# done!\nclass PayPalTransactionLog(ndb.Expando):\n    \n    # ancestor Order, BillingOrder\n    # not logged\n    # ako budemo radili analizu sa pojedinacnih ordera onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    txn_id = ndb.StringProperty('2', required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # ipn_message = ndb.TextProperty('3', required=True)\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n    }\n    \n    @ndb.transactional\n    def create():\n        # ipn algoritam\n        # **Preamble**\n        # https://docs.google.com/document/d/1cHymrH2q6pHH19XOtOyLLsznR0tEb0-pkcU5ZGfS1hQ/edit#bookmark=id.fmp7h260u37l\n        # na raspolaganju imamo kompletan ipn objekat, ili mozda skup variabla, kako se vec bude to formatiralo.\n        # **Duplicate Check**\n        if not (ipn.verified):\n            # samo verifikovane ipn poruke dolaze u obzir\n            return None\n        # Kada stigne novi ipn, prvo se radi upit na PayPalTransactionLog i izvlace se svi entiteti koji imaju istu vrednost txn_id kao i primljeni ipn.\n        transactions = PayPalTransactionLog.query(PayPalTransactionLog.txn_id == ipn.txn_id).fetch()\n        if (transactions):\n            # Ukoliko ima rezultata, radi se provera da pristigla ipn poruka nije duplikat nekog od snimljenih entiteta.\n            for transaction in transactions:\n                # Provera duplikata se vrsi tako sto se uporedjuje payment_status.\n                # Za sve upisane transakcije sa istim txn_id, vrednosti payment_status moraju biti razlicite.\n                # za sada se uzdamo u payment_status da garantuje uniqueness, ali mozda otkrijemo da to nije dobro resenje...\n                if (transaction.payment_status == ipn.payment_status):\n                    # Ukoliko je pristigla ipn poruka duplikat onda se tiho odbacuje i algoritam se prekida.\n                    return None\n        # Ukoliko nema rezultata iz upita na PayPalTransactionLog, ili je pristigla poruka unikatna, onda se prelazi na IPN Algoritam - Fraud Check.\n        # **Fraud check**\n        # Prvo ipn polje koje se proverava je custom koje bi trebalo da nosi referencu na Order entitet.\n        # Ukoliko ovo polje nema vrednosti ili vrednost ne referencira Order entitet,\n        # radi se dispatch na notification engine sa detaljima sta se dogodilo (kako bi se obavestilo da je pristigla \n        # validna poruka sa nevazecom referencom na Order), radi se logging i algoritam se prekida.\n        if not (ipn.custom):\n            return None\n        order = ipn.custom.get()\n        if not (order):\n            return None\n        paypal_transaction = PayPalTransactionLog(parent=order.key, txn_id=ipn.txn_id, ipn_message=ipn)\n        paypal_transaction_key = paypal_transaction.put()\n        # Ukoliko je poredjenje receiver_email sa paypal emailom prodavca kojem je transakcija\n        # isla u korist bilo neuspesno, a poredjenje business sa paypal emailom prodavca \n        # kojem je transakcija isla u korist bilo uspesno, onda se radi dispatch na \n        # notification engine sa detaljima sta se dogodilo, radi se logging i prelazi se na IPN Algoritam - Actions.\n        if (order_fraud_check):\n            if not (match_order(order=order)):\n                return None\n        # Ukoliko je doslo do fail-ova u poredjenjima, \n        # radi se dispatch na notification engine sa detaljima sta se dogodilo, radi se logging i algoritam se prekida.\n        if (billing_fraud_check):\n            if not (match_billing(miraclestyle_settings=miraclestyle_settings)):\n                return None\n        # Ukoliko su sve komparacije prosle onda se prelazi na IPN Algoritam - Actions.\n        # **Actions**\n        if (order.paypal_payment_status == ipn.payment_status):\n            return None\n        if (order.paypal_payment_status == 'Pending'):\n            if (ipn.payment_status == 'Completed' or ipn.payment_status == 'Denied')):\n                update_paypal_payment_status = True\n        elif (order.paypal_payment_status == 'Completed'):\n            if (ipn.payment_status == 'Refunded' or ipn.payment_status == 'Reversed')):\n                update_paypal_payment_status = True\n        if (update_paypal_payment_status):\n            # ovo se verovatno treba jos doterati..\n            if (order.state == 'processing' and ipn.payment_status == 'Completed'):\n                order.state = 'completed'\n                order.paypal_payment_status = ipn.payment_status\n                order_key = order.put()\n                object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='update_order', state=order.state, log=order)\n                object_log.put()\n            elif (order.state == 'processing' and ipn.payment_status == 'Denied'): # ovo cemo jos da razmotrimo\n                order.state = 'canceled'\n                order.paypal_payment_status = ipn.payment_status\n                order_key = order.put()\n                object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='update_order', state=order.state, log=order)\n                object_log.put()\n            elif (order.state == 'completed'):\n                order.paypal_payment_status = ipn.payment_status\n                order_key = order.put()\n                object_log = ObjectLog(parent=order_key, agent=kwargs.get('user_key'), action='update_order', state=order.state, log=order)\n                object_log.put()\n        # Feedback kupca se suspenduje/sprecva u slucajevima kada je order: \n        # Canceled_Reversal (treba dalje ispitati), \n        # Denied, \n        # Failed, \n        # Pending, \n        # Refunded (Moguci problem prilikom refunda je taj sto tu prodavac moze umanjiti iznos refunda, \n        # tako da se to treba proveravati i handlati na odgovarajuci nacin...).\n        # Feedback od kupca je aktivan u slucajevima kada je order: \n        # Completed, \n        # Reversed (treba dalje ispitati).\n        # Ova funkcija jos uvek ne dokumentuje sve detalje iz dokumenta, tako da je dokument supplement ovome..\n    \n    @ndb.transactional\n    def match_order(**kwargs):\n        order = kwargs.get('order')\n        mismatches = []\n        if (order.paypal_email != ipn.receiver_email):\n            mismatches.append('receiver_email')\n        if (order.paypal_email != ipn.business):\n            mismatches.append('business')\n        if (order.currency.code != ipn.mc_currency):\n            mismatches.append('mc_currency')\n        if (order.total_amount != ipn.mc_gross):\n            mismatches.append('mc_gross')\n        if (order.tax_amount != ipn.tax):\n            mismatches.append('tax')\n        if (order.reference != ipn.invoice): # order.reference bi mozda mogao da bude user.key.id-order.key.id ili mozda order.key.id ?\n            mismatches.append('invoice')\n        if (order.shipping_address.country != ipn.address_country):\n            mismatches.append('address_country')\n        if (order.shipping_address.country_code != ipn.address_country_code):\n            mismatches.append('address_country_code')\n        if (order.shipping_address.city != ipn.address_city):\n            mismatches.append('address_city')\n        if (order.shipping_address.name != ipn.address_name):\n            mismatches.append('address_name')\n        if (order.shipping_address.region != ipn.address_state):\n            mismatches.append('address_state')\n        if (order.shipping_address.street_address != ipn.address_street): \n            # PayPal spaja vrednosti koje su prosledjene u cart upload procesu (address1 i address2), \n            # tako da u povratu putem IPN-a, polje address_street izgleda ovako address1\\r\\naddress2. \n            # Primer: u'address_street': [u'1 Edi St\\r\\nApartment 7'], gde je vrednost Street Address \n            # od kupca bilo \"Edi St\", a vrednost Street Address (Optional) \"Apartment 7\".\n            mismatches.append('address_street')\n        if (order.shipping_address.postal_code != ipn.address_zip):\n            mismatches.append('address_zip')\n        for line in order.lines:\n            if (line.code != ipn['item_number%s' % str(line.sequence])): # ovo nije u order funkcijama implementirano tako da ne znamo da li cemo to imati..\n                mismatches.append('item_number%s' % str(line.sequence]))\n            if (line.description != ipn['item_name%s' % str(line.sequence])):\n                mismatches.append('item_name%s' % str(line.sequence]))\n            if (line.quantity != ipn['quantity%s' % str(line.sequence)]):\n                mismatches.append('quantity%s' % str(line.sequence]))\n            if ((line.subtotal + line.tax_subtotal) != ipn['mc_gross%s' % str(line.sequence])):\n                mismatches.append('mc_gross%s' % str(line.sequence]))\n        # Ukoliko je doslo do fail-ova u poredjenjima (izuzev receiver_email slucaja), \n        # radi se dispatch na notification engine sa detaljima sta se dogodilo, radi se logging i algoritam se prekida.\n        if (len(mismatches) > 1):\n            return False\n        elif ((len(mismatches) == 1) and (mismatches.count('receiver_email') == 0)):\n            return False\n        return True\n    \n    @ndb.transactional\n    def match_billing(**kwargs):\n        miraclestyle_settings = kwargs.get('miraclestyle_settings')\n        mismatches = []\n        if (miraclestyle_settings.paypal_email != ipn.receiver_email):\n            mismatches.append('receiver_email')\n        if (miraclestyle_settings.paypal_email != ipn.business):\n            mismatches.append('business')\n        if (miraclestyle_settings.currency_code != ipn.mc_currency):\n            mismatches.append('mc_currency')\n        if (miraclestyle_settings.amounts.count(ipn.mc_gross - ipn.tax) == 0):\n            mismatches.append('mc_gross')\n        if (len(mismatches) > 0):\n            return False\n        return True\n\n# done!\nclass BillingLog(ndb.Model):\n    \n    # root (namespace Domain) / ancestor Domain ?\n    # key za BillingLog ce se graditi na sledeci nacin:\n    # key: namespace=domain.key, id=str(reference_key) ili mozda neki drugi destiled id iz key-a\n    # idempotency je moguc ako se pre inserta proverava da li postoji record sa id-jem reference_key\n    # not logged\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    amount = DecimalProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass BillingCreditAdjustment(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    adjusted = ndb.DateTimeProperty('2', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('3', kind=User, required=True, indexed=False)\n    amount = DecimalProperty('4', required=True, indexed=False)\n    message = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    note = ndb.TextProperty('6')# soft limit 64kb - to determine char count\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n    }\n    \n    # Ova akcija azurira billing log.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-BillingCreditAdjustment'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'\n        billing_credit_adjustment = BillingCreditAdjustment(namespace=domain_key, agent=agent_key, amount=var_amount, message=var_message, note=var_note)\n        billing_credit_adjustment_key = billing_credit_adjustment.put()\n        # ovo bi trebalo ici preko task queue\n        # idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n        billing_log = BillingLog.query().order(-BillingLog.logged).fetch(1)\n        new_billing_log = BillingLog(namespace=domain_key, id=str(billing_credit_adjustment_key), amount=billing_credit_adjustment.amount, balance=billing_log.balance + billing_credit_adjustment.amount)\n        new_billing_log.put()"],[0,"\n\n# neki"]],"start1":201539,"start2":201539,"length1":16,"length2":12187}]],"length":214156,"saved":false}
{"ts":1381483641311,"patch":[[{"diffs":[[0,", required=True)"],[1," # verovatno ide u expando"],[0,"\n    _default_in"]],"start1":201107,"start2":201107,"length1":32,"length2":58}]],"length":214182,"saved":false}
{"ts":1381483693068,"patch":[[{"diffs":[[0,"nvenciju"],[1," (states, transitions, actions....)"],[0,".\n\nfrom "]],"start1":2647,"start2":2647,"length1":16,"length2":51}]],"length":214217,"saved":false}
{"ts":1381483697162,"patch":[[{"diffs":[[0,"s....).\n"],[-1,"\n"],[0,"from goo"]],"start1":2684,"start2":2684,"length1":17,"length2":16}]],"length":214216,"saved":false}
{"ts":1381483716988,"patch":[[{"diffs":[[0,"te\n'''\n\n"],[1,"# treba odluciti konvenciju imenovanja objekata!\n\n"],[0,"# Kind I"]],"start1":2507,"start2":2507,"length1":16,"length2":66},{"diffs":[[0,"odel"],[-1," - treba odluciti konvenciju imenovanja objekata!"],[0,"\ncla"]],"start1":3743,"start2":3743,"length1":57,"length2":8}]],"length":214217,"saved":false}
{"ts":1381484439515,"patch":[[{"diffs":[[0,"date\n'''\n\n# "],[-1,"t"],[1,"T"],[0,"reba odlucit"]],"start1":2505,"start2":2505,"length1":25,"length2":25},{"diffs":[[0,"bjekata!"],[1,"!!!!!!!!!!!!!!!!!!!!!!!!!!!"],[0,"\n\n# Kind"]],"start1":2555,"start2":2555,"length1":16,"length2":43}]],"length":214244,"saved":false}
{"ts":1381485289797,"patch":[[{"diffs":[[0,"!!!!!!\n\n"],[1,"# struktura i konvencija:\n\n# app/\n# app/modules\n# app/modules/core\n# app/modules/domain\n# app/modules/buyer\n# app/modules/misc\n\n\n"],[0,"# Kind I"]],"start1":2584,"start2":2584,"length1":16,"length2":145}]],"length":214373,"saved":false}
{"ts":1381487871502,"patch":[[{"diffs":[[0,"ncija:\n\n"],[1,"# package-i ce organizovati logicke celine aplikacije: \n\n"],[0,"# app/\n#"]],"start1":2611,"start2":2611,"length1":16,"length2":73},{"diffs":[[0,"s/misc\n\n"],[1,"# moduli ce organizovati entitetske grupe, pa makar to bio samo jedan model!\n"],[0,"\n# Kind "]],"start1":2769,"start2":2769,"length1":16,"length2":93}]],"length":214507,"saved":false}
{"ts":1381487883797,"patch":[[{"diffs":[[0,"\n\n# "],[-1,"Treba odlucit"],[1,"struktura "],[0,"i ko"]],"start1":2513,"start2":2513,"length1":21,"length2":18},{"diffs":[[0,"onvencij"],[-1,"u"],[1,"a"],[0," imenova"]],"start1":2530,"start2":2530,"length1":17,"length2":17},{"diffs":[[0,"kata"],[-1,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n# struktura i konvencija"],[0,":\n\n#"]],"start1":2555,"start2":2555,"length1":62,"length2":8}]],"length":214450,"saved":false}
{"ts":1381487963296,"patch":[[{"diffs":[[0," model!\n"],[1,"# Sto se tice ndb-a, konvencija prati sledece:"],[0,"\n# Kind "]],"start1":2789,"start2":2789,"length1":16,"length2":62},{"diffs":[[0,"QUE "],[-1,"unutar citave aplikacije."],[1,"UNUTAR CITAVE APLIKACIJE!"],[0,"\n# S"]],"start1":2870,"start2":2870,"length1":33,"length2":33},{"diffs":[[0," su "],[-1,"unique unutar modela"],[1,"UNIQUE UNUTAR MODELA"],[0,", i "]],"start1":2924,"start2":2924,"length1":28,"length2":28},{"diffs":[[0,"s....).\n"],[1,"\n"],[0,"from goo"]],"start1":3013,"start2":3013,"length1":16,"length2":17}]],"length":214497,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381599508508,"patch":[[{"diffs":[[0,"##############\n\n"],[1,"# ovde jos nedostaje i Role(ndb.Model) koji je isto sto i Role(ndb.Model) u domain modulu.\n\n"],[0,"# done! - sudo k"]],"start1":74072,"start2":74072,"length1":32,"length2":124}]],"length":214589,"saved":false}
{"ts":1381599512923,"patch":[[{"diffs":[[0,"o sto i "],[1,"Domain"],[0,"Role(ndb"]],"start1":74138,"start2":74138,"length1":16,"length2":22}]],"length":214595,"saved":false}
{"ts":1381599697005,"patch":[[{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"Role(ndb"]],"start1":10385,"start2":10385,"length1":22,"length2":16},{"diffs":[[0,"ole(ndb.Model):\n"],[1,""],[0,"    \n    # root "]],"start1":10394,"start2":10394,"length1":32,"length2":32},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"User(ndb"]],"start1":13124,"start2":13124,"length1":22,"length2":16},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"Rule(ndb"]],"start1":18063,"start2":18063,"length1":22,"length2":16},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"Field(nd"]],"start1":18489,"start2":18489,"length1":22,"length2":16},{"diffs":[[0,"!\nclass "],[-1,"DomainBusinessUnit"],[1,"Company"],[0,"(ndb.Exp"]],"start1":18794,"start2":18794,"length1":34,"length2":23},{"diffs":[[0,"model\nclass "],[-1,"Domain"],[0,"Store(ndb.Ex"]],"start1":19986,"start2":19986,"length1":30,"length2":24},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"StoreFeedbac"]],"start1":27414,"start2":27414,"length1":30,"length2":24},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"StoreContent"]],"start1":28426,"start2":28426,"length1":30,"length2":24},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"StoreShi"]],"start1":30568,"start2":30568,"length1":22,"length2":16},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"Tax(ndb."]],"start1":32666,"start2":32666,"length1":22,"length2":16},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"Carrier(ndb."]],"start1":35257,"start2":35257,"length1":30,"length2":24},{"diffs":[[0,"\n\n# done!\nclass "],[-1,"Domain"],[0,"CarrierLine(ndb."]],"start1":37715,"start2":37715,"length1":38,"length2":32},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"CarrierL"]],"start1":40317,"start2":40317,"length1":22,"length2":16},{"diffs":[[0,"model\nclass "],[-1,"Domain"],[0,"Catalog(ndb."]],"start1":41157,"start2":41157,"length1":30,"length2":24},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"CatalogImage"]],"start1":48201,"start2":48201,"length1":30,"length2":24},{"diffs":[[0,"!\nclass "],[-1,"Domain"],[0,"CatalogP"]],"start1":50187,"start2":50187,"length1":22,"length2":16},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"ProductTempl"]],"start1":53405,"start2":53405,"length1":30,"length2":24},{"diffs":[[0,"\n\n# done!\nclass "],[-1,"Domain"],[0,"ProductInstance("]],"start1":64187,"start2":64187,"length1":38,"length2":32},{"diffs":[[0,"queue\nclass "],[-1,"Domain"],[0,"ProductInven"]],"start1":67379,"start2":67379,"length1":30,"length2":24},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"ProductInven"]],"start1":68147,"start2":68147,"length1":30,"length2":24},{"diffs":[[0,"done!\nclass "],[-1,"Domain"],[0,"ProductVaria"]],"start1":70069,"start2":70069,"length1":30,"length2":24},{"diffs":[[0,"# done!\n"],[1,""],[0,"class "],[-1,"Domain"],[0,"ProductC"]],"start1":72190,"start2":72190,"length1":28,"length2":22}]],"length":214458,"saved":false}
{"ts":1381599802223,"patch":[[{"diffs":[[0,"o sto i "],[-1,"Domain"],[0,"Role(ndb"]],"start1":74001,"start2":74001,"length1":22,"length2":16}]],"length":214452,"saved":false}
{"ts":1381599811859,"patch":[[{"diffs":[[0,"#####\n# "],[-1,"User"],[1,"Core"],[0," - 3\n###"]],"start1":73852,"start2":73852,"length1":20,"length2":20}]],"length":214452,"saved":false}
{"ts":1381599886553,"patch":[[{"diffs":[[0,"####\n# C"],[-1,"ore"],[1,"ORE"],[0," - 3\n###"]],"start1":73853,"start2":73853,"length1":19,"length2":19}]],"length":214452,"saved":false}
{"ts":1381599909880,"patch":[[{"diffs":[[0,"##\n#"],[-1," USER"],[0," REQ"]],"start1":89616,"start2":89616,"length1":13,"length2":8},{"diffs":[[0,"UEST - 2"],[1," - mozda bude u misc"],[0,"\n#######"]],"start1":89624,"start2":89624,"length1":16,"length2":36}]],"length":214467,"saved":false}
{"ts":1381599951353,"patch":[[{"diffs":[[0,"les/misc"],[1,"\n# app/modules/logs"],[0,"\n\n# modu"]],"start1":2710,"start2":2710,"length1":16,"length2":35}]],"length":214486,"saved":false}
{"ts":1381599960028,"patch":[[{"diffs":[[0,"les/logs"],[1," - mozda za logove ?"],[0,"\n\n# modu"]],"start1":2729,"start2":2729,"length1":16,"length2":36}]],"length":214506,"saved":false}
{"ts":1381600004663,"patch":[[{"diffs":[[0,"- mozda "],[-1,"bude"],[1,"prebaciti"],[0," u misc\n"]],"start1":89672,"start2":89672,"length1":20,"length2":25},{"diffs":[[0,"LOGS - 1"],[1," - mozda prebaciti u core"],[0,"\n#######"]],"start1":200749,"start2":200749,"length1":16,"length2":41}]],"length":214536,"saved":false}
{"ts":1381600025456,"patch":[[{"diffs":[[0,"misc"],[-1,"\n# app/modules/logs - mozda za logove ?"],[0,"\n\n# "]],"start1":2714,"start2":2714,"length1":47,"length2":8}]],"length":214497,"saved":false}
{"ts":1381600107206,"patch":[[{"diffs":[[0,"arriers\n\n# done!"],[1," - ovaj model se verovatno izbacuje"],[0,"\nclass BillingOr"]],"start1":159520,"start2":159520,"length1":32,"length2":67}]],"length":214532,"saved":false}
{"ts":1381600117091,"patch":[[{"diffs":[[0,"#\n# "],[-1,"TRA"],[1,"OR"],[0,"DE"],[1,"R"],[0," - 1"]],"start1":99450,"start2":99450,"length1":13,"length2":13}]],"length":214532,"saved":false}
{"ts":1381600122217,"patch":[[{"diffs":[[0,"#####\n# "],[-1,"OR"],[1,"TRA"],[0,"DE"],[-1,"R"],[0," - 11\n##"]],"start1":99446,"start2":99446,"length1":21,"length2":21}]],"length":214532,"saved":false}
{"ts":1381600168705,"patch":[[{"diffs":[[0,"ADE - 11"],[1," - ili mozda da se zove order"],[0,"\n#######"]],"start1":99456,"start2":99456,"length1":16,"length2":45}]],"length":214561,"saved":false}
{"ts":1381600184480,"patch":[[{"diffs":[[0,"les/misc"],[1,"\n# app/modules/trade"],[0,"\n\n# modu"]],"start1":2710,"start2":2710,"length1":16,"length2":36}]],"length":214581,"saved":false}
{"ts":1381600360723,"patch":[[{"diffs":[[0,"ate-"],[-1,"Domain"],[0,"Role'. \n"],[1,""],[0,"    "]],"start1":11128,"start2":11128,"length1":22,"length2":16},{"diffs":[[0,"\n        role = "],[-1,"Domain"],[0,"Role(name=var_na"]],"start1":11210,"start2":11210,"length1":38,"length2":32},{"diffs":[[0,"'update-"],[-1,"Domain"],[0,"Role'.\n "]],"start1":11662,"start2":11662,"length1":22,"length2":16},{"diffs":[[0,"  def delete():\n"],[1,""],[0,"        # ovu ak"]],"start1":12045,"start2":12045,"length1":32,"length2":32},{"diffs":[[0,"'delete-"],[-1,"Domain"],[0,"Role'.\n "]],"start1":12140,"start2":12140,"length1":22,"length2":16}]],"length":214557,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381749382941,"patch":[[{"diffs":[[0,"app/"],[-1,"modules\n# app/modules/core\n# app/modules/domain\n# app/modules/buyer\n# app/modules/misc\n# app/modules/trade"],[1,"core\n# app/core/user.py\n# app/core/buyer.py\n# app/core/misc.py\n# app/core/order.py\n# app/core/logs.py\n# app/domain\n# app/domain/"],[0,"\n\n# "]],"start1":2628,"start2":2628,"length1":114,"length2":136}]],"length":214579,"saved":false}
{"ts":1381749718324,"patch":[[{"diffs":[[0,"pp/core/"],[-1,"user"],[1,"auth"],[0,".py\n# ap"]],"start1":2640,"start2":2640,"length1":20,"length2":20}]],"length":214579,"saved":false}
{"ts":1381749735353,"patch":[[{"diffs":[[0,"core/aut"],[-1,"h"],[1,"orization"],[0,".py\n# ap"]],"start1":2643,"start2":2643,"length1":17,"length2":25}]],"length":214587,"saved":false}
{"ts":1381749817746,"patch":[[{"diffs":[[0,"/domain/"],[1,"domain.py\n# app/domain/role.py\n# app/domain/user.py\n# app/domain/store.py\n# app/domain/tax.py\n# app/domain/carrier.py\n# app/domain/catalog.py"],[0,"\n\n# modu"]],"start1":2760,"start2":2760,"length1":16,"length2":157}]],"length":214728,"saved":false}
