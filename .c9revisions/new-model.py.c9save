{"ts":1378921097340,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1378921185716,"patch":[[{"diffs":[[1,"#coding=UTF-8\n\n#MASTER MODEL FILE\n\n# NAPOMENA!!! - Sve mapirane informacije koje se snimaju u datastore trebaju biti hardcoded, tj. u samom aplikativnom codu a ne u settings.py\n# u settings.py se cuvaju one informacije koje se ne cuvaju u datastore i koje se ne koriste u izgradnji datastore recorda...\n\n# pitanje je da li ce nam trebati composite indexi za query-je poput:\n# BuyerAddress.query(ancestor=key).order(BuyerAddress.name) ili AggregateUserPermission.query(AggregateUserPermission.reference == key, ancestor=key)\n# ali je highly unlikely, zato sto se ancestor ne mora ukljucivati u slucajevima composite indexa\n# odgovor na gore postavljeno pitanje se mozda moze pronaci na: \n# https://developers.google.com/appengine/docs/python/datastore/indexes#Python_Index_configuration\n# https://github.com/GoogleCloudPlatform/appengine-guestbook-python\n# za sada smo resili osnovne query-je sa composite indexima koji podrazumevaju ancestor filtere,\n# pa mozemo kasnije tokom razvoja funkcionalne logike to dalje unaprediti.\n\n# datastore ne podrzava LIKE statement kao sto to podrzavaju struktuirane baze, umesto LIKE se moze korititi index range scan, kao napr:\n# SELECT * FROM Country WHERE name >= 'B' AND name < 'C' ORDER BY name\n# mnogi modeli koji ce imati opciju pretraga po osnovu user custom entry-ja ce koristiti ovaj mehanizam,\n# i na njima se moraju pripremiti indexi za ove funkcije.\n\n# treba se ispitati \"_default_indexed = False\" za Expando modele\n\n# problem 1 write per sec unutar transakcija kojie se commitaju na jednu entity grupu se treba normalizovati.\n# ovaj problem se odnosi na broj write operacija koje se mogu odvijati na istoj entity grupi.\n# jedan primer gde ovaj problem moze postojati je u slucaju AggregateBuyerCollectionCatalog!!\n\n# detalji oko modeliranja podataka i skaliranja su prezentirani na dole navedenim linkovima\n# https://developers.google.com/appengine/articles/datastore/overview\n# https://developers.google.com/appengine/articles/scaling/overview\n\n# skontati idempotency modela koji ce ucestvovati u transakcijama (ovo je najbolje uraditi u fazi razvoja funkcionalne logike)\n# idempotency se odnosi na sve modele, i treba nastojati uciniti sve transakcije idempotent-ne, u najmanju ruku, kada je to moguce!\n\n'''\nOvo su zabranjena imena propertija:\n\nall\napp\ncopy\ndelete\nentity\nentity_type\nfields\nfrom_entity\nget\ngql\ninstance_properties\nis_saved\nkey\nkey_name\nkind\nparent\nparent_key\nproperties\nput\nsetdefault\nto_xml\nupdate\n'''\n\nfrom google.appengine.ext import blobstore\nfrom google.appengine.ext import ndb\nfrom decimal import *\n\n\nclass DecimalProperty(ndb.StringProperty):\n  def _validate(self, value):\n    if not isinstance(value, (decimal.Decimal)):\n      raise TypeError('expected an decimal, got %s' % repr(value))\n\n  def _to_base_type(self, value):\n    return str(value) # Doesn't matter if it's a decimal or string\n\n  def _from_base_type(self, value):\n    return decimal.Decimal(value)  # Always return a decimal\n\n################################################################################\n# User - \n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":10353}]],"length":10353,"saved":false}
{"ts":1378921455158,"patch":[[{"diffs":[[0,"False)\n\n"],[-1,"\n"],[1,"################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n################################################################################\n# DOMAIN - \n################################################################################\n\n# done!\nclass Domain(ndb.Expando):\n    \n    # root\n    # composite index: ancestor:no - state,name\n    name = ndb.StringProperty('1', required=True)\n    primary_contact = ndb.KeyProperty('2', kind=User, required=True, indexed=False)\n    state = ndb.IntegerProperty('3', required=True)\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 3\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n        'terminated' : (3, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'suspend' : 3,\n       'terminate' : 4,\n       'activate_suspended' : 5,\n       'activate_terminated' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate_suspended' : {\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n         'activate_terminated' : {\n            'from' : ('terminated',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n        'terminate' : {\n           'from' : ('active', 'suspended'),\n           'to'   : ('terminated',),\n        },\n    }\n    \n    # *** mozda treba zameniti dozvole za upravljanje domenom sa jednom dozvolom 'manage-Domain' ili tome slicno!\n    \n    # Ova akcija kreira novu domenu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        domain = Domain(name='deskriptivno ime po zelji kreatora', primary_contact=user_key, state='active')\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=user_key, action='create', state=domain.state, log=domain)\n        object_log.put()\n        role = Role(parent=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        #object_log = ObjectLog(parent=role_user_key, agent=user_key, action='accept', state=role_user.state, log=role_user)\n        #object_log.put()\n        sub_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        sub_role.put()\n    \n    # Ova akcija azurira postojecu domenu.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.name = 'promenjeno ime od strane administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='update', state=domain.state, log=domain)\n        object_log.put()\n    \n    # Ova akcija suspenduje aktivnu domenu. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'suspend-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.state = 'suspended'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='suspend', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija terminira aktivnu ili suspendovanu domenu. Ovde cemo dalje opisati posledice terminacije\n    @ndb.transactional\n    def terminate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'terminate-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' ili domain.state == 'suspended'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'terminate-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'terminated'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='terminate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira suspendovanu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_suspended():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'activate_suspended-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'suspended'.\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_suspended', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira terminiranu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_terminated():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate_terminated-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'terminated'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'activate_terminated-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_terminated', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass Role(ndb.Model):\n    \n    # root (namespace Domain/'MIRACLESTYLE')\n    # Role permissions affect Domain and it's related entities, with exception to Roles in 'MIRACLESTYLE' namespace.\n    # Roles in 'MIRACLESTYLE' namespace globally affect Miraclestyle Application and all of it's related entities.\n    # ancestor User (for caching/optimization purposes) - Role(namespace=domain_key, parent=user_key, id=str(role_key.id()), ....)\n    # TREBA TESTIRATI DA LI RADE QUERY: Role.query(namespace=..., ancestor=..., id=....)\n    # mozda bude trebalo jos indexa u zavistnosti od potreba u UIUX\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    permissions = ndb.StringProperty('2', repeated=True, indexed=False)# soft limit 1000x - action-Model - create-Store\n    readonly = ndb.BooleanProperty('3', default=True, indexed=False)\n    \n    _KIND = 6\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Role'. \n        # u slucaju kreiranja Role u 'MIRACLESTYLE' domeni, agent mora biti Application Admin (users.is_current_user_admin()).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        # domena 'MIRACLESTYLE' je uvek evaluated 'active'\n        role = Role(namespace=domain_key, name='Store Managers', permissions=['create_store', 'update_store',], readonly=False) # readonly je uvek False za user generated Roles\n        role_key = role.put()\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='create', state='none', log=role)\n        object_log.put()\n    \n    # Azurira postojecu rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def update():\n        # (u slucaju da agent treba azurirati globalne Role imacemo problem posto bi globalna dozvola 'update-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'update-Role').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Role'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role.name = 'New Store Managers'\n        role.permissions = ['create_store',]\n        role_key = role.put()\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='update', state='none', log=role)\n        object_log.put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        # ovo uraditi sa taskletima za async operacije\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            sub_role = key.get()\n            sub_role.name = role.name\n            sub_role.permissions = role.permissions\n            sub_role.put()\n    \n    # Brise postojecu rolu domene, ili globalnu rolu.\n    @ndb.transactional\n    def delete():\n        # (u slucaju da agent treba brisati globalne Role imacemo problem posto bi globalna dozvola 'delete-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'delete-Role').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Role'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=role_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        roles = []\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            roles.append(key)\n        ndb.delete_multi(roles)\n        ndb.delete_multi(role_users)\n        role_key.delete()\n\n# done!\nclass RoleUser(ndb.Model):\n    \n    # ancestor Role\n    # id = str(user_key.id())\n    # mozda bude trebalo jos indexa u zavistnosti od potreba u UIUX\n    # composite index: ancestor:yes - user\n    user = ndb.KeyProperty('1', kind=User, required=True)\n    state = ndb.IntegerProperty('2', required=True)# invited/accepted\n    \n    _KIND = 7\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'invited' : (1, ),\n        'accepted' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'invite' : 1,\n       'remove' : 2,\n       'accept' : 3,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'accept' : {\n            'from' : ('invited',),\n            'to' : ('accepted',),\n        },\n    }\n    \n    # Poziva novog usera u rolu domene, ili globalnu rolu\n    @ndb.transactional\n    def invite():\n        # (u slucaju da se user treba invite na globalnu Rolu imacemo problem posto bi globalna dozvola 'invite-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'invite').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'invite-RoleUser'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role_user = RoleUser(parent=role_key, user='123673472829', state='invited')\n        role_user_key = role_user.put()\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='invite', state=role_user.state, log=role_user)\n        object_log.put()\n        # salje se notifikacija korisniku da je dobio poziv za dodavanje u Rolu.\n    \n    # Uklanja postojeceg usera iz role domene, ili globalne role.\n    @ndb.transactional\n    def remove():\n        # (u slucaju da se user treba remove sa globalne Role imacemo problem posto bi globalna dozvola 'remove-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'remove').\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'remove-RoleUser', ili agent koji je referenciran u entitetu (role_user.user == agent).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='remove', state=role_user.state)\n        object_log.put()\n        role_user_key.delete()\n        key = ndb.Key(namespace=domain_key, parent=role_user.user, str(role_key.id()))\n        # ovaj delete ce fail ukoliko nije napravljen entitet sa tim kljucem, napr: ako je role_user.state == 'invited'\n        key.delete()\n    \n    # Prihvata poziv novog usera u rolu (lokalne ili globalne - \"MIRACLESTYLE\") domene\n    @ndb.transactional\n    def accept():\n        # ovu akciju moze izvrsiti samo agent koji je referenciran u entitetu (role_user.user == agent).\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        role_user.state = 'accepted'\n        role_user_key = role_user.put()\n        object_log = ObjectLog(parent=role_user_key, agent=agent_key, action='accept', role_user.state)\n        object_log.put()\n        sub_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='~', permissions=['~',], readonly='True/False')\n        sub_role.put()\n\n# future implementation - prototype!\nclass Rule(ndb.Model):\n    \n    # root\n    name = ndb.StringProperty('1', required=True)\n    model_kind = ndb.StringProperty('2', required=True)\n    actions = ndb.StringProperty('3', repeated=True)\n    fields = ndb.LocalStructuredProperty(Field, '4', repeated=True)\n    condition = ndb.TextProperty('5')\n    roles = ndb.KeyProperty('6', kind=Role, repeated=True)\n\n# future implementation - prototype!\nclass Field(ndb.Model):\n    \n    # LocalStructuredProperty model\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    writable = ndb.BooleanProperty('2', default=True, indexed=False)\n    visible = ndb.BooleanProperty('3', default=True, indexed=False)"],[0,"\n\n\n\n\n\n\n\n"]],"start1":10333,"start2":10333,"length1":17,"length2":34320}]],"length":44656,"saved":false}
{"ts":1378921597485,"patch":[[{"diffs":[[0,"False)\n\n"],[-1,"\n"],[1,"# done!\nclass Store(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - state,name\n    name = ndb.StringProperty('1', required=True)\n    logo = blobstore.BlobKeyProperty('2', required=True)# blob ce se implementirati na GCS\n    state = ndb.IntegerProperty('3', required=True)\n    _default_indexed = False\n    pass\n    #Expando\n    #\n    # Company\n    # company_name = ndb.StringProperty('4', required=True)\n    # company_country = ndb.KeyProperty('5', kind=Country, required=True)\n    # company_region = ndb.KeyProperty('6', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # company_region = ndb.StringProperty('6', required=True)# ako je potreban key val onda se ovo preskace\n    # company_city = ndb.StringProperty('7', required=True)\n    # company_postal_code = ndb.StringProperty('8', required=True)\n    # company_street_address = ndb.StringProperty('9', required=True)\n    # company_street_address2 = ndb.StringProperty('10')\n    # company_email = ndb.StringProperty('11')\n    # company_telephone = ndb.StringProperty('12')\n    #\n    # Payment\n    # currency = ndb.KeyProperty('13', kind=Currency, required=True)\n    # tax_buyer_on ?\n    # paypal_email = ndb.StringProperty('14')\n    # paypal_shipping ?\n    #\n    # Analytics \n    # tracking_id = ndb.StringProperty('15')\n    #\n    # Feedback\n    # feedbacks = ndb.LocalStructuredProperty(StoreFeedback, '16', repeated=True)# soft limit 120x\n\n# done!\nclass StoreFeedback(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # ovaj model dozvoljava da se radi feedback trending per month per year\n    # mozda bi se mogla povecati granulacija per week, tako da imamo oko 52 instance per year, ali mislim da je to nepotrebno!\n    # ovde treba voditi racuna u scenarijima kao sto je napr. promena feedback-a iz negative u positive state,\n    # tako da se za taj record uradi negative_feedback_count - 1 i positive_feedback_count + 1\n    month = ndb.IntegerProperty('1', required=True, indexed=False)\n    year = ndb.IntegerProperty('2', required=True, indexed=False)\n    positive_feedback_count = ndb.IntegerProperty('3', required=True, indexed=False)\n    negative_feedback_count = ndb.IntegerProperty('4', required=True, indexed=False)\n    neutral_feedback_count = ndb.IntegerProperty('5', required=True, indexed=False)\n\n# done!\nclass StoreContent(ndb.Model):\n    \n    # ancestor Store (Catalog - for caching)\n    # composite index: ancestor:yes - sequence\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n    sequence = ndb.IntegerProperty('3', required=True)\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x\n\n# done!\nclass Carrier(ndb.Model):\n    \n    # root (namespace Domain)\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L27\n    # http://hg.tryton.org/modules/carrier/file/tip/carrier.py#l10\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    active = ndb.BooleanProperty('2', default=True)\n\n# done!\nclass CarrierLine(ndb.Expando):\n    \n    # ancestor Carrier\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L170\n    # composite index: ancestor:yes - sequence; ancestor:yes - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    location_exclusion = ndb.BooleanProperty('3', default=False, indexed=False)\n    active = ndb.BooleanProperty('4', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '5', repeated=True)# soft limit 300x\n    # rules = ndb.LocalStructuredProperty(CarrierLineRule, '6', repeated=True)# soft limit 300x\n\n# done!\nclass CarrierLineRule(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/saas-1/view/head:/delivery/delivery.py#L226\n    # ovde se cuvaju dve vrednosti koje su obicno struktuirane kao formule, ovo je mnogo fleksibilnije nego hardcoded struktura informacija koje se cuva kao sto je bio prethodni slucaj\n    condition = ndb.StringProperty('1', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: True ili weight[kg] >= 5 ili volume[m3] = 0.002\n    price = ndb.StringProperty('2', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: amount = 35.99 ili amount = weight[kg]*0.28\n    # weight - kg; volume - m3; ili sta vec odlucimo, samo je bitno da se podudara sa measurementsima na ProductTemplate/ProductInstance\n\n# done!\nclass Catalog(ndb.Expando):\n    \n    # root (namespace Domain)\n    # https://support.google.com/merchants/answer/188494?hl=en&hlrm=en#other\n    # composite index: ???\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    name = ndb.StringProperty('2', required=True)\n    publish = ndb.DateTimeProperty('3', required=True)# today\n    discontinue = ndb.DateTimeProperty('4', required=True)# +30 days\n    cover = blobstore.BlobKeyProperty('5', required=True)# blob ce se implementirati na GCS\n    cost = DecimalProperty('6', required=True, indexed=False)\n    state = ndb.IntegerProperty('7', required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # Search improvements\n    # product count per product category\n    # rank coefficient based on store feedback\n\n# done!\nclass CatalogImage(Image):\n    \n    # ancestor Catalog\n    # composite index: ancestor:yes - sequence\n\n# done!\nclass CatalogPricetag(ndb.Model):\n    \n    # ancestor Catalog\n    product_template = ndb.KeyProperty('1', kind=ProductTemplate, required=True, indexed=False)\n    container_image = blobstore.BlobKeyProperty('2', required=True, indexed=False)# blob ce se implementirati na GCS\n    source_width = ndb.FloatProperty('3', required=True, indexed=False)\n    source_height = ndb.FloatProperty('4', required=True, indexed=False)\n    source_position_top = ndb.FloatProperty('5', required=True, indexed=False)\n    source_position_left = ndb.FloatProperty('6', required=True, indexed=False)\n    value = ndb.StringProperty('7', required=True, indexed=False)# $ 19.99 - ovo se handla unutar transakcije kada se radi update na unit_price od ProductTemplate ili ProductInstance\n\n# done!\nclass ProductTemplate(ndb.Expando):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - name\n    product_category = ndb.KeyProperty('1', kind=ProductCategory, required=True, indexed=False)\n    name = ndb.StringProperty('2', required=True)\n    description = ndb.TextProperty('3', required=True)# soft limit 64kb\n    product_uom = ndb.KeyProperty('4', kind=ProductUOM, required=True, indexed=False)\n    unit_price = DecimalProperty('5', required=True)\n    state = ndb.IntegerProperty('6', required=True, indexed=False)\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando\n    # mozda treba uvesti customer lead time??\n    # product_template_variants = ndb.KeyProperty('7', kind=ProductVariant, repeated=True)# soft limit 100x\n    # product_template_contents = ndb.KeyProperty('8', kind=ProductContent, repeated=True)# soft limit 100x\n    # product_template_images = ndb.LocalStructuredProperty(Image, '9', repeated=True)# soft limit 100x\n    # weight = ndb.StringProperty('10')# prekompajlirana vrednost, napr: 0.2[kg] - gde je [kg] jediniva mere, ili sta vec odlucimo\n    # volume = ndb.StringProperty('11')# prekompajlirana vrednost, napr: 0.03[m3] - gde je [m3] jediniva mere, ili sta vec odlucimo\n\n# done!\nclass ProductInstance(ndb.Expando):\n    \n    # ancestor ProductTemplate\n    #variant_signature se gradi na osnovu ProductVariant entiteta vezanih za ProductTemplate-a (od aktuelne ProductInstance) preko ProductTemplateVariant \n    #key name ce se graditi tako sto se uradi MD5 na variant_signature\n    #query ce se graditi tako sto se prvo izgradi variant_signature vrednost na osnovu odabira od strane krajnjeg korisnika a potom se ta vrednost hesira u MD5 i koristi kao key identifier\n    #mana ove metode je ta sto se uvek mora izgraditi kompletan variant_signature, tj moraju se sve varijacije odabrati (svaka varianta mora biti mandatory_variant_type)\n    #default vrednost code ce se graditi na osnovu sledecih informacija: ancestorkey-n, gde je n incremental integer koji se dodeljuje instanci prilikom njenog kreiranja\n    #ukoliko user ne odabere multivariant opciju onda se za ProductTemplate generise samo jedna ProductInstance i njen key se gradi automatski.\n    # composite index: ancestor:yes - code\n    code = ndb.StringProperty('1', required=True)\n    state = ndb.IntegerProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando\n    # description = ndb.TextProperty('3', required=True)# soft limit 64kb\n    # unit_price = DecimalProperty('4', required=True)\n    # product_instance_contents = ndb.KeyProperty('5', kind=ProductContent, repeated=True)# soft limit 100x\n    # product_instance_images = ndb.LocalStructuredProperty(Image, '6', repeated=True)# soft limit 100x\n    # low_stock_quantity = DecimalProperty('7', default=0.00)# notify store manager when qty drops below X quantity\n    # weight = ndb.StringProperty('8')# prekompajlirana vrednost, napr: 0.2[kg] - gde je [kg] jediniva mere, ili sta vec odlucimo\n    # volume = ndb.StringProperty('9')# prekompajlirana vrednost, napr: 0.03[m3] - gde je [m3] jediniva mere, ili sta vec odlucimo\n    # variant_signature = ndb.TextProperty('10', required=True)# soft limit 64kb - ova vrednost kao i vrednosti koje kupac manuelno upise kao opcije variante se prepisuju u order line description prilikom Add to Cart\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass ProductInventoryLog(ndb.Model):\n    \n    # ancestor ProductInstance\n    # not logged\n    # composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)# idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan \n    quantity = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass ProductInventoryAdjustment(ndb.Model):\n    \n    # ancestor ProductInstance\n    # not logged\n    adjusted = ndb.DateTimeProperty('1', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('2', kind=User, required=True, indexed=False)\n    quantity = DecimalProperty('3', required=True, indexed=False, indexed=False)\n    comment = ndb.StringProperty('4', required=True, indexed=False)\n\n# done!\nclass ProductVariant(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # http://v6apps.openerp.com/addon/1809\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    description = ndb.TextProperty('2')# soft limit 64kb\n    options = ndb.StringProperty('3', repeated=True, indexed=False)# soft limit 1000x\n    allow_custom_value = ndb.BooleanProperty('4', default=False, indexed=False)# ovu vrednost buyer upisuje u definisano polje a ona se dalje prepisuje u order line description prilikom Add to Cart \n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)"],[0,"\n\n\n\n\n\n\n\n"]],"start1":44639,"start2":44639,"length1":17,"length2":13570}]],"length":58209,"saved":false}
{"ts":1378921649192,"patch":[[{"diffs":[[0,"d=True)\n\n\n\n\n"],[1,"################################################################################\n# TRADE - 11\n################################################################################\n\n# done!\nclass Order(ndb.Expando):\n    \n    # ancestor User (namespace Domain)\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l28\n    # http://hg.tryton.org/modules/purchase/file/tip/purchase.py#l32\n    # http://doc.tryton.org/2.8/modules/sale/doc/index.html\n    # http://doc.tryton.org/2.8/modules/purchase/doc/index.html\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L48\n    # buyer = ndb.KeyProperty('1', kind=User, required=True)\n    # composite index: \n    # ancestor:no - store,state,updated:desc; ancestor:no - store,state,order_date:desc\n    # ancestor:no - state,updated:desc; ancestor:no - state,order_date:desc\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,order_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    order_date = ndb.DateTimeProperty('2', auto_now_add=True, required=True)# updated on checkout\n    currency = ndb.LocalStructuredProperty(OrderCurrency, '3', required=True)\n    untaxed_amount = DecimalProperty('4', required=True, indexed=False)\n    tax_amount = DecimalProperty('5', required=True, indexed=False)\n    total_amount = DecimalProperty('6', required=True)\n    state = ndb.IntegerProperty('7', required=True) \n    updated = ndb.DateTimeProperty('8', auto_now=True, required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # company_address = ndb.LocalStructuredProperty(OrderAddress, '9', required=True)\n    # billing_address = ndb.LocalStructuredProperty(OrderAddress, '10', required=True)\n    # shipping_address = ndb.LocalStructuredProperty(OrderAddress, '11', required=True)\n    # reference = ndb.StringProperty('12', required=True)\n    # comment = ndb.TextProperty('13')# 64kb limit\n    # company_address_reference = ndb.KeyProperty('14', kind=Store, required=True)\n    # billing_address_reference = ndb.KeyProperty('15', kind=BuyerAddress, required=True)\n    # shipping_address_reference = ndb.KeyProperty('16', kind=BuyerAddress, required=True)\n    # carrier_reference = ndb.KeyProperty('17', kind=StoreCarrier, required=True)\n    # feedback = ndb.IntegerProperty('18', required=True)\n    # store_name = ndb.StringProperty('19', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n    # store_logo = blobstore.BlobKeyProperty('20', required=True, indexed=True)# testirati da li ovo indexiranje radi, tj overrid-a _default_indexed = False\n\n# done!\nclass OrderFeedback(ndb.Model):\n    \n    # ancestor Order\n    state = ndb.IntegerProperty('1', required=True, indexed=False)\n\n# done!\nclass BillingOrder(ndb.Expando):\n    \n    # root (namespace Domain)\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l28\n    # http://hg.tryton.org/modules/purchase/file/tip/purchase.py#l32\n    # http://doc.tryton.org/2.8/modules/sale/doc/index.html\n    # http://doc.tryton.org/2.8/modules/purchase/doc/index.html\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L48\n    order_date = ndb.DateTimeProperty('1', auto_now_add=True, required=True, indexed=False)# updated on checkout\n    currency = ndb.LocalStructuredProperty(OrderCurrency, '2', required=True)\n    untaxed_amount = DecimalProperty('3', required=True, indexed=False)\n    tax_amount = DecimalProperty('4', required=True, indexed=False)\n    total_amount = DecimalProperty('5', required=True, indexed=False)\n    state = ndb.IntegerProperty('6', required=True, indexed=False) \n    updated = ndb.DateTimeProperty('7', auto_now=True, required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # company_address = ndb.LocalStructuredProperty(OrderAddress, '8', required=True)\n    # billing_address = ndb.LocalStructuredProperty(OrderAddress, '9', required=True)\n    # shipping_address = ndb.LocalStructuredProperty(OrderAddress, '10', required=True)\n    # reference = ndb.StringProperty('11', required=True)\n    # comment = ndb.TextProperty('12')# 64kb limit\n\n# done!\nclass OrderAddress(ndb.Expando):\n    \n    # LocalStructuredProperty model\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    country = ndb.StringProperty('2', required=True, indexed=False)\n    country_code = ndb.StringProperty('3', required=True, indexed=False)\n    region = ndb.StringProperty('4', required=True, indexed=False)\n    region_code = ndb.StringProperty('5', required=True, indexed=False)\n    city = ndb.StringProperty('6', required=True, indexed=False)\n    postal_code = ndb.StringProperty('7', required=True, indexed=False)\n    street_address = ndb.StringProperty('8', required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n\n# done!\nclass OrderCurrency(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/currency/file/tip/currency.py#l14\n    # http://en.wikipedia.org/wiki/ISO_4217\n    # http://hg.tryton.org/modules/currency/file/tip/currency.xml#l107\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_currency.py#L32\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)\n    code = ndb.StringProperty('3', required=True, indexed=False)\n    numeric_code = ndb.StringProperty('4', indexed=False)\n    rounding = DecimalProperty('5', required=True, indexed=False)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    #formating\n    grouping = ndb.StringProperty('7', required=True, indexed=False)\n    decimal_separator = ndb.StringProperty('8', required=True, indexed=False)\n    thousands_separator = ndb.StringProperty('9', indexed=False)\n    positive_sign_position = ndb.IntegerProperty('10', required=True, indexed=False)\n    negative_sign_position = ndb.IntegerProperty('11', required=True, indexed=False)\n    positive_sign = ndb.StringProperty('12', indexed=False)\n    negative_sign = ndb.StringProperty('13', indexed=False)\n    positive_currency_symbol_precedes = ndb.BooleanProperty('14', default=True, indexed=False)\n    negative_currency_symbol_precedes = ndb.BooleanProperty('15', default=True, indexed=False)\n    positive_separate_by_space = ndb.BooleanProperty('16', default=True, indexed=False)\n    negative_separate_by_space = ndb.BooleanProperty('17', default=True, indexed=False)\n\n# done!\nclass OrderLine(ndb.Expando):\n    \n    # ancestor Order, BillingOrder\n    # http://hg.tryton.org/modules/sale/file/tip/sale.py#l888\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/sale/sale.py#L649\n    # composite index: ancestor:yes - sequence\n    description = ndb.TextProperty('1', required=True)# soft limit 64kb\n    quantity = DecimalProperty('2', required=True, indexed=False)\n    product_uom = ndb.LocalStructuredProperty(OrderLineProductUOM, '3', required=True)\n    unit_price = DecimalProperty('4', required=True, indexed=False)\n    discount = DecimalProperty('5', default=0.00, indexed=False)\n    sequence = ndb.IntegerProperty('6', required=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # taxes = ndb.LocalStructuredProperty(OrderLineTax, '7', repeated=True)# soft limit 500x\n    # product_category_complete_name = ndb.TextProperty('8', required=True)# soft limit 64kb\n    # product_category = ndb.KeyProperty('9', kind=ProductCategory, required=True)\n    # catalog_pricetag_reference = ndb.KeyProperty('10', kind=CatalogPricetag, required=True)\n    # product_instance_reference = ndb.KeyProperty('11', kind=ProductInstance, required=True)\n    # tax_references = ndb.KeyProperty('12', kind=StoreTax, repeated=True)# soft limit 500x\n\n# done!\nclass OrderLineProductUOM(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l28\n    # http://hg.tryton.org/modules/product/file/tip/uom.xml#l63 - http://hg.tryton.org/modules/product/file/tip/uom.xml#l312\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L89\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)\n    category = ndb.StringProperty('3', required=True, indexed=False)# ProductUOMCategory.name\n    rounding = DecimalProperty('4', required=True, indexed=False)\n    digits = ndb.IntegerProperty('5', required=True, indexed=False)\n\n# done!\nclass OrderLineTax(ndb.Model):\n    \n    # LocalStructuredProperty model\n    # http://hg.tryton.org/modules/account/file/tip/tax.py#l545\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    amount = ndb.StringProperty('2', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n\n# done!\nclass PayPalTransaction(ndb.Model):\n    \n    # ancestor Order, BillingOrder\n    # not logged\n    # ako budemo radili analizu sa pojedinacnih ordera onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    txn_id = ndb.StringProperty('2', required=True)\n    ipn_message = ndb.TextProperty('3', required=True)\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass BillingLog(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)# idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n    amount = DecimalProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    balance = DecimalProperty('4', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n\n# done!\nclass BillingCreditAdjustment(ndb.Model):\n    \n    # root (namespace Domain)\n    # not logged\n    adjusted = ndb.DateTimeProperty('2', auto_now_add=True, required=True, indexed=False)\n    agent = ndb.KeyProperty('3', kind=User, required=True, indexed=False)\n    amount = DecimalProperty('4', required=True, indexed=False)\n    message = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    note = ndb.TextProperty('6')# soft limit 64kb - to determine char count"],[0,"\n\n\n"]],"start1":58194,"start2":58194,"length1":15,"length2":10559}]],"length":68753,"saved":false}
{"ts":1378921718028,"patch":[[{"diffs":[[0,"=True)\n\n"],[-1,"\n\n\n"],[0,"########"]],"start1":58195,"start2":58195,"length1":19,"length2":16},{"diffs":[[0," count\n\n"],[1,"################################################################################\n# OBJECT LOG - 1\n################################################################################\n\n# done!\nclass ObjectLog(ndb.Expando):\n    \n    # ancestor Any - ancestor je objekat koji se ujedno i pickle u log property, i moze biti bilo koji objekat osim pojedinih objekata koji su independent\n    # reference i type izvlacimo iz kljuca - key.parent()\n    # composite index: ???\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    agent = ndb.KeyProperty('2', kind=User, required=True)\n    action = ndb.IntegerProperty('3', required=True)\n    state = ndb.IntegerProperty('4', required=True)\n    _default_indexed = False\n    pass\n    # message / m = ndb.TextProperty('5')# soft limit 64kb - to determine char count\n    # note / n = ndb.TextProperty('6')# soft limit 64kb - to determine char count\n    # log / l = ndb.PickleProperty('7')\n    \n    # ovako se smanjuje storage u Datastore, i trebalo bi sprovesti to isto na sve modele\n    @classmethod\n    def _get_kind(cls):\n      return datastore_key_kinds.ObjectLog"],[0,"\n"]],"start1":68741,"start2":68741,"length1":9,"length2":1132}]],"length":69873,"saved":false}
{"ts":1378921976286,"patch":[[{"diffs":[[0," count\n\n"],[1,"################################################################################\n# MISC - 12\n################################################################################\n\n# done!\nclass Content(ndb.Model):\n    \n    # root\n    # composite index: ancestor:no - category,state,sequence\n    updated = ndb.DateTimeProperty('1', auto_now=True, required=True)\n    title = ndb.StringProperty('2', required=True)\n    category = ndb.IntegerProperty('3', required=True)\n    body = ndb.TextProperty('4', required=True)\n    sequence = ndb.IntegerProperty('5', required=True)\n    state = ndb.IntegerProperty('6', required=True)# published/unpublished\n\n# done!\nclass Image(ndb.Model):\n    \n    # base class/structured class\n    image = blobstore.BlobKeyProperty('1', required=True, indexed=False)# blob ce se implementirati na GCS\n    content_type = ndb.StringProperty('2', required=True, indexed=False)\n    size = ndb.FloatProperty('3', required=True, indexed=False)\n    width = ndb.IntegerProperty('4', required=True, indexed=False)\n    height = ndb.IntegerProperty('5', required=True, indexed=False)\n    sequence = ndb.IntegerProperty('6', required=True)\n\n# done!\nclass Country(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/country/file/tip/country.py#l8\n    # http://en.wikipedia.org/wiki/ISO_3166\n    # http://hg.tryton.org/modules/country/file/tip/country.xml\n    # http://downloads.tryton.org/2.8/trytond_country-2.8.0.tar.gz\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L42\n    # composite index: ancestor:no - active,name\n    code = ndb.StringProperty('1', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    name = ndb.StringProperty('2', required=True)\n    active = ndb.BooleanProperty('3', default=True)\n\n# done!\nclass CountrySubdivision(ndb.Model):\n    \n    # ancestor Country\n    # http://hg.tryton.org/modules/country/file/tip/country.py#l52\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L86\n    # koliko cemo drilldown u ovoj strukturi zavisi od kasnijih odluka u vezi povezivanja lokativnih informacija sa informacijama ovog modela..\n    # composite index: ancestor:yes - name; ancestor:yes - active,name\n    parent_record = ndb.KeyProperty('1', kind=CountrySubdivision, indexed=False)\n    code = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    name = ndb.StringProperty('3', required=True)\n    type = ndb.IntegerProperty('4', required=True, indexed=False)\n    active = ndb.BooleanProperty('5', default=True)\n\n# done!\nclass Location(ndb.Expando):\n    \n    # base class/structured class\n    country = ndb.KeyProperty('1', kind=Country, required=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # region = ndb.KeyProperty('2', kind=CountrySubdivision)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('2')# ako je potreban key val onda se ovo preksace\n    # postal_code_from = ndb.StringProperty('3')\n    # postal_code_to = ndb.StringProperty('4')\n    # city = ndb.StringProperty('5')# ako se javi potreba za ovim ??\n\n# done!\nclass ProductCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/category.py#l8\n    # https://support.google.com/merchants/answer/1705911\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L227\n    # composite index: ancestor:no - state,name\n    parent_record = ndb.KeyProperty('1', kind=ProductCategory, indexed=False)\n    name = ndb.StringProperty('2', required=True)\n    complete_name = ndb.TextProperty('3', required=True)# da je ovo indexable bilo bi idealno za projection query\n    state = ndb.IntegerProperty('4', required=True)\n\n# done!\nclass ProductUOMCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l16\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L81\n    # mozda da ovi entiteti budu non-deletable i non-editable ??\n    name = ndb.StringProperty('1', required=True)\n\n# done!\nclass ProductUOM(ndb.Model):\n    \n    # ancestor ProductUOMCategory\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l28\n    # http://hg.tryton.org/modules/product/file/tip/uom.xml#l63 - http://hg.tryton.org/modules/product/file/tip/uom.xml#l312\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L89\n    # mozda da ovi entiteti budu non-deletable i non-editable ??\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    rate = DecimalProperty('3', required=True, indexed=False)# The coefficient for the formula: 1 (base unit) = coef (this unit) - digits=(12, 12)\n    factor = DecimalProperty('4', required=True, indexed=False)# The coefficient for the formula: coef (base unit) = 1 (this unit) - digits=(12, 12)\n    rounding = DecimalProperty('5', required=True, indexed=False)# Rounding Precision - digits=(12, 12)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    active = ndb.BooleanProperty('7', default=True)\n\n# done!\nclass Currency(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/currency/file/tip/currency.py#l14\n    # http://en.wikipedia.org/wiki/ISO_4217\n    # http://hg.tryton.org/modules/currency/file/tip/currency.xml#l107\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_currency.py#L32\n    # composite index: ancestor:no - active,name\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    code = ndb.StringProperty('3', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    numeric_code = ndb.StringProperty('4', indexed=False)\n    rounding = DecimalProperty('5', required=True, indexed=False)\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    active = ndb.BooleanProperty('7', default=True)\n    #formating\n    grouping = ndb.StringProperty('8', required=True, indexed=False)\n    decimal_separator = ndb.StringProperty('9', required=True, indexed=False)\n    thousands_separator = ndb.StringProperty('10', indexed=False)\n    positive_sign_position = ndb.IntegerProperty('11', required=True, indexed=False)\n    negative_sign_position = ndb.IntegerProperty('12', required=True, indexed=False)\n    positive_sign = ndb.StringProperty('13', indexed=False)\n    negative_sign = ndb.StringProperty('14', indexed=False)\n    positive_currency_symbol_precedes = ndb.BooleanProperty('15', default=True, indexed=False)\n    negative_currency_symbol_precedes = ndb.BooleanProperty('16', default=True, indexed=False)\n    positive_separate_by_space = ndb.BooleanProperty('17', default=True, indexed=False)\n    negative_separate_by_space = ndb.BooleanProperty('18', default=True, indexed=False)\n\n# done!\n# ostaje da se ispita u preprodukciji!!\nclass Message(ndb.Model):\n    \n    # root\n    outlet = ndb.IntegerProperty('1', required=True, indexed=False)\n    group = ndb.IntegerProperty('2', required=True, indexed=False)\n    state = ndb.IntegerProperty('3', required=True)\n\n"],[0,"########"]],"start1":68741,"start2":68741,"length1":16,"length2":7486}]],"length":77343,"saved":false}
{"ts":1378922020131,"patch":[[{"diffs":[[0,"MISC - 1"],[-1,"2"],[1,"0"],[0,"\n#######"]],"start1":68832,"start2":68832,"length1":17,"length2":17}]],"length":77343,"saved":false}
{"ts":1378922071913,"patch":[[{"diffs":[[0,"OMAIN - "],[1,"20"],[0,"\n#######"]],"start1":29382,"start2":29382,"length1":16,"length2":18}]],"length":77345,"saved":false}
{"ts":1378922082655,"patch":[[{"diffs":[[0," User - "],[1,"3"],[0,"\n#######"]],"start1":3048,"start2":3048,"length1":16,"length2":17}]],"length":77346,"saved":false}
{"ts":1378922793336,"patch":[[{"diffs":[[0,"al\n\n"],[-1,"################################################################################\n# User - 3\n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n"],[0,"####"]],"start1":2962,"start2":2962,"length1":26341,"length2":8},{"diffs":[[0,"required=True)\n\n"],[1,"################################################################################\n# User - 3\n################################################################################\n\n# done!\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    emails = ndb.StringProperty('2', repeated=True)# soft limit 100x\n    identities = ndb.StructuredProperty(UserIdentity, '3', repeated=True)# soft limit 100x\n    _default_indexed = False\n    pass\n    #Expando\n    \n    _KIND = 2\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'active' : (1, ),\n        'suspended' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'register' : 1,\n       'update' : 2,\n       'login' : 3,\n       'logout' : 4,\n       'suspend' : 5,\n       'activate' : 6,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'activate' : {\n             # from where to where this transition can be accomplished?\n            'from' : ('suspended',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n    }\n    \n    # Ova akcija nastaje prilikom prve autentikacije kada korisnik nije jos registrovan.\n    # Ukoliko se prilikom \"login\" akcije ustanovi da korisnik nikada nije evidentiran u bazi, nastupa akcija \"register\". \n    @ndb.transactional\n    def register():\n        # ovu akciju moze izvrsiti samo neregistrovani neautenticirani agent.\n        user = User(state='active', emails=['user@email.com',], identities=[UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),])\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='register', state=user.state, log=user)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija radi insert/update/delete na neki prop. (izuzev state) u User objektu.\n    @ndb.transactional\n    def update():\n        user.emails = ['user@email.com',]\n        user.identities = [UserIdentity(identity='abc123', email='user@email.com', associated=True, primary=True),]\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='update', state=user.state, log=user)\n        object_log.put()\n        # ukoliko se u listi user.identities promenio prop. user.identities.primary, \n        # radi se potraga za eventualnim BuyerCollection entietom usera koji je imao prethodnu email adresu, \n        # i radi se buyer_collection.primary_email prop.\n    \n    # Ova akcija se izvrsava svaki put kada neautenticirani korisnik stupi u proces autentikacije.\n    # Prvo se proverava da li je korisnik vec registrovan. Ukoliko User ne postoji onda se prelazi na akciju \"register\".\n    # Ukoliko user postoji, onda se dalje ispituje. \n    # Proverava se da li ima nekih izmena na postojecim podacima, i ukoliko ima, onda se poziva \"update\" akcija.\n    # Dalje se proverava da li je useru dozvoljen login (User.state == 'active'). Ako mu je dozvoljen login onda se izvrsava \"login\" akcija.\n    @ndb.transactional\n    def login():\n        # ovde bi mogla da stoji provera continue if(User.state == 'active'), ili van ove funkcije, videcemo.\n        object_log = ObjectLog(parent=user_key, agent=user_key, action='login', state=user.state)\n        object_log.put()\n        # UserIPAddress se pravi nakon pravljenja ObjectLog-a zato sto se ne loguje.\n        user_ip_address = UserIPAddress(parent=user_key, ip_address='127.0.0.1')\n        user_ip_address.put()\n    \n    # Ova akcija se izvrsava svaki put kada autenticirani korisnik stupi u proces deautentikacije.\n    @ndb.transactional\n    def logout():\n        object_log = ObjectLog(parent=user_key, agent='user_key/agent_key', action='logout', state=user.state)\n        object_log.put()\n    \n    # Ova akcija sluzi za suspenziju aktivnog korisnika, i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da suspenzija usera ujedno znaci i izuzimanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan.\n    ''' Suspenzija user account-a zabranjuje njegovom vlasniku autenticirani pristup na mstyle, \n    i deaktivira sve negativne i neutralne feedback-ove koji su sa ovog user account-a ostavljeni. \n    Ni jedan asocirani email suspendovanog korisnickog racuna se vise ne moze upotrebiti na mstyle \n    (za otvaranje novog account-a, ili neke druge operacije). \n    Account koji je suspendovan se moze opet reaktivirati od strane administratora sistema. '''\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'suspend-User'.\n        # akcija se moze pozvati samo ako je user.state == 'active'.\n        user.state = 'suspended'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='suspend', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        # poziva se akcija \"logout\";\n        User.logout()\n    \n    # Ova akcija sluzi za aktiviranje suspendovanog korisnika i izvrsava je privilegovani/administrativni agent.\n    # Treba obratiti paznju na to da aktivacija usera ujedno znaci i vracanje svih negativnih i neutralnih feedbackova koje je user ostavio dok je bio aktivan, a koji su bili izuzeti dok je bio suspendovan.\n    # Aktivni user account je u potpunosti funkcionalan i operativan.\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate-User'.\n        # akcija se moze pozvati samo ako je user.state == 'suspended'.\n        user.state = 'active'\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent='agent_key', action='activate', state=user.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass UserIdentity(ndb.Model):\n    \n    # StructuredProperty model\n    identity = ndb.StringProperty('1', required=True)# spojen je i provider name sa id-jem\n    email = ndb.StringProperty('2', required=True)\n    associated = ndb.BooleanProperty('3', default=True)\n    primary = ndb.BooleanProperty('4', default=True)\n\n# done! mozemo li ovo da stavljamo u app engine log ? - ovo sam verovatno i ranje pitao...\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # ako budemo radili per user istragu loga onda nam treba composite index: ancestor:yes - logged:desc\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    ip_address = ndb.StringProperty('2', required=True, indexed=False)\n\n################################################################################\n# BUYER - 4\n################################################################################\n\n# done!\nclass BuyerAddress(ndb.Expando):\n    \n    # ancestor User\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    city = ndb.StringProperty('3', required=True, indexed=False)\n    postal_code = ndb.StringProperty('4', required=True, indexed=False)\n    street_address = ndb.StringProperty('5', required=True, indexed=False)\n    default_shipping = ndb.BooleanProperty('6', default=True, indexed=False)\n    default_billing = ndb.BooleanProperty('7', default=True, indexed=False)\n    _default_indexed = False\n    pass\n    # Expando\n    # naredna dva polja su required!!!\n    # region = ndb.KeyProperty('8', kind=CountrySubdivision, required=True)# ako je potreban string val onda se ovo preskace \n    # region = ndb.StringProperty('8', required=True)# ako je potreban key val onda se ovo preskace\n    # street_address2 = ndb.StringProperty('9')\n    # email = ndb.StringProperty('10')\n    # telephone = ndb.StringProperty('11')\n    \n    _KIND = 18\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu adresu korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_address = BuyerAddress(parent=user_key, name='Home', country='82736563', city='Beverly Hills', postal_code='90210', street_address='First Street, 10', region='656776533')\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='create', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Azurira postojecu adresu korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        buyer_address.name = 'Home in Miami'\n        buyer_address.country = '82736563'\n        buyer_address.city = 'Miami'\n        buyer_address.postal_code = '26547'\n        buyer_address.street_address = 'Second Street, 10'\n        buyer_address.region = '514133'\n        buyer_address_key = buyer_address.put()\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='update', state='none', log=buyer_address)\n        object_log.put()\n    \n    # Brise postojecu adresu korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_address.parent == agent).\n        object_log = ObjectLog(parent=buyer_address_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_address_key.delete()\n\n# done!\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    # mozda bude trebao index na primary_email radi mogucnosti update-a kada user promeni primarnu email adresu na svom profilu\n    # composite index: ancestor:yes - name\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False)\n    primary_email = ndb.StringProperty('3', required=True, indexed=False)\n    \n    _KIND = 19\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Pravi novu kolekciju za korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection = BuyerCollection(parent=user_key, name='Favorites', notifications=True, primary_email=user_primary_email)\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='create', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Azurira postojecu kolekciju korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        buyer_collection.name = 'Shoes'\n        buyer_collection.notifications = True\n        for identity in user.identities:\n            if(identity.primary == True):\n                user_primary_email = identity.email\n                break\n        buyer_collection.primary_email = user_primary_email\n        buyer_collection_key = buyer_collection.put()\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='update', state='none', log=buyer_collection)\n        object_log.put()\n    \n    # Brise postojecu kolekciju korisnika\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_key.delete()\n\n# done!\nclass BuyerCollectionStore(ndb.Model):\n    \n    # ancestor User\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True)# soft limit 500x\n    \n    _KIND = 20\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Dodaje novi store u korisnikovu listu i odredjuje clanstvo u kolekcijama korisnika\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        buyer_collection_store = BuyerCollectionStore(parent=user_key, store='7464536', collections=['1234'])\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='create', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Menja clanstvo store u kolekcijama korisnika\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        buyer_collection_store.collections = ['1234', '56433']\n        buyer_collection_store_key = buyer_collection_store.put()\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='update', state='none', log=buyer_collection_store)\n        object_log.put()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n    \n    # Brise store iz korisnikove liste\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo entity owner (buyer_collection_store.parent == agent).\n        object_log = ObjectLog(parent=buyer_collection_store_key, agent=user_key, action='delete', state='none')\n        object_log.put()\n        buyer_collection_store_key.delete()\n        # izaziva se update AggregateBuyerCollectionCatalog preko task queue\n        # ndb.delete_multi(AggregateBuyerCollectionCatalog.query(AggregateBuyerCollectionCatalog.store == buyer_collection_store.store, ancestor=user_key))\n\n# done! contention se moze zaobici ako write-ovi na ove entitete budu explicitno izolovani preko task queue\nclass AggregateBuyerCollectionCatalog(ndb.Model):\n    \n    # ancestor User\n    # not logged\n    # task queue radi agregaciju prilikom nekih promena na store-u\n    # mogao bi da se uvede index na collections radi filtera: AggregateBuyerCollectionCatalog.collections = 'collection', \n    # ovo moze biti dobra situacija za upotrebu MapReduce ??\n    # composite index: ancestor:yes - catalog_published_date:desc\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    collections = ndb.KeyProperty('2', kind=BuyerCollection, repeated=True, indexed=False)# soft limit 500x\n    catalog = ndb.KeyProperty('3', kind=Catalog, required=True, indexed=False)\n    catalog_cover = blobstore.BlobKeyProperty('4', required=True, indexed=False)# blob ce se implementirati na GCS\n    catalog_published_date = ndb.DateTimeProperty('5', required=True)\n\n################################################################################\n# USER REQUEST - 2\n################################################################################\n\n# done!\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n    \n    _KIND = 8\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'reviewing' : (2, ),\n        'duplicate' : (3, ),\n        'accepted' : (4, ),\n        'dismissed' : (5, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'review' : 3,\n       'close' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'review' : {\n            'from' : ('new',),\n            'to' : ('reviewing',),\n         },\n        'close' : {\n           'from' : ('reviewing', ),\n           'to'   : ('duplicate', 'accepted', 'dismissed',),\n        },\n    }\n    \n    # Ova akcija sluzi za slanje feedback-a miraclestyle timu od strane krajnjih korisnika.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        feedback_request = FeedbackRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=user_key, action='create', state=feedback_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant FeedbackRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-FeedbackRequest'. / ? # ovu akciju moze izvrsiti samo entity owner (feedback_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-FeedbackRequest'.\n        # Radi se update FeedbackRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na FeedbackRequest.updated prop.)\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='update', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'reviewing'.\n    @ndb.transactional\n    def review():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'review-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'new'.\n        feedback_request.state = 'reviewing'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='review', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje FeedbackRequest entiteta u 'duplicate', 'accepted', ili 'dismissed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'close-FeedbackRequest'.\n        # akcija se moze pozvati samo ako je feedback_request.state == 'reviewing'.\n        feedback_request.state = 'duplicate' | 'accepted' | 'dismissed'\n        feedback_request_key = feedback_request.put()\n        object_log = ObjectLog(parent=feedback_request_key, agent=agent_key, action='close', state=feedback_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    # ako uopste bude vidljivo useru onda mozemo razmatrati indexing\n    # ako hocemo da dozvolimo sva sortiranja, i dodatni filter po state-u uz sortiranje, onda nam trebaju slecedi indexi\n    # composite index:\n    # ancestor:yes - updated:desc; ancestor:yes - created:desc;\n    # ancestor:yes - state,updated:desc; ancestor:yes - state,created:desc\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    _KIND = 9\n    \n    OBJECT_DEFAULT_STATE = 'new'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za state none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'new' : (1, ),\n        'opened' : (2, ),\n        'awaiting_closure' : (3, ),\n        'closed' : (4, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'open' : 3,\n       'propose_close' : 4,\n       'close' : 5,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('new',),\n            'to' : ('opened',),\n         },\n        'propose_close' : {\n           'from' : ('opened', ),\n           'to'   : ('awaiting_closure',),\n        },\n        'close' : {\n           'from' : ('opened', 'awaiting_closure',),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija krajnjem korisniku sluzi za pravljenje zahteva za pomoc (ticket-a) od miraclestyle tima.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        support_request = SupportRequest(parent=user_key, reference='https://www,miraclestyle.com/...', state='new')\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=user_key, action='create', state=support_request.state, message='poruka od agenta - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija sluzi za insert ObjectLog-a koji je descendant SupportRequest entitetu.\n    # Insertom ObjectLog-a dozvoljeno je unosenje poruke (i privatnog komentara), sto je i smisao ove akcije.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'update-SupportRequest'\n        # Radi se update SupportRequest-a bez izmena na bilo koji prop. (u cilju izazivanja promene na SupportRequest.updated prop.)\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='update', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'opened'.\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'open-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'new'.\n        support_request.state = 'opened'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='open', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom privilegovani/administrativni agent menja stanje SupportRequest entiteta u 'awaiting_closure'.\n    @ndb.transactional\n    def propose_close():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'propose_close-SupportRequest'.\n        # akcija se moze pozvati samo ako je support_request.state == 'opened'.\n        support_request.state = 'awaiting_closure'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='propose_close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n    \n    # Ovom akcijom agent menja stanje SupportRequest entiteta u 'closed'.\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo entity owner (support_request.parent == agent) ili agent koji ima globalnu dozvolu 'close-SupportRequest' (sto ce verovatno imati sistemski account koji ce preko cron-a izvrsiti akciju).\n        # akcija se moze pozvati samo ako je support_request.state == 'opened' ili support_request.state == 'awaiting_closure'.\n        support_request.state = 'closed'\n        support_request_key = support_request.put()\n        object_log = ObjectLog(parent=support_request_key, agent=agent_key, action='close', state=support_request.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima/non-owner-ima) - obavezno polje!')\n        object_log.put()\n\n"],[0,"################"]],"start1":31857,"start2":31857,"length1":32,"length2":26365}]],"length":77346,"saved":false}
{"ts":1378922956999,"patch":[[{"diffs":[[0," ),\n"],[-1,"        'terminated' : (3, ),\n"],[0,"    }\n"],[1,""],[0,"    "]],"start1":4037,"start2":4037,"length1":44,"length2":14},{"diffs":[[0,"   '"],[-1,"terminate' : 4,\n       'activate_suspended' : 5,\n       'activate_terminated' : 6"],[1,"activate' : 4"],[0,",\n  "]],"start1":4143,"start2":4143,"length1":89,"length2":21}]],"length":77248,"saved":false}
{"ts":1378922989612,"patch":[[{"diffs":[[0,"activate"],[-1,"_suspended"],[0,""],[1,""],[0,"' : {\n  "]],"start1":4209,"start2":4209,"length1":26,"length2":16},{"diffs":[[0,"    "],[-1," 'activate_terminated' : {\n            'from' : ('terminated',),\n            'to' : ('active',),\n         },\n        'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspended',),\n        },\n        'terminate' : {\n           'from' : ('active', 'suspended'),\n           'to'   : ('terminat"],[1,"'suspend' : {\n           'from' : ('active', ),\n           'to'   : ('suspend"],[0,"ed',"]],"start1":4308,"start2":4308,"length1":319,"length2":85}]],"length":77004,"saved":false}
{"ts":1378923025325,"patch":[[{"diffs":[[0,"   \n"],[-1,"    # Ova akcija terminira aktivnu ili suspendovanu domenu. Ovde cemo dalje opisati posledice terminacije\n    @ndb.transactional\n    def terminate():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'terminate-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' ili domain.state == 'suspended'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'terminate-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'terminated'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='terminate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n"],[0,"    "]],"start1":6880,"start2":6880,"length1":1074,"length2":8},{"diffs":[[0,"activate"],[-1,"_suspended"],[0,"():\n    "]],"start1":7007,"start2":7007,"length1":26,"length2":16},{"diffs":[[0,"ut()"],[-1,"\n    \n    # Ova akcija aktivira terminiranu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate_terminated():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'activate_terminated-Domain'.\n        # akcija se moze pozvati samo ako je domain.state == 'terminated'.\n        # ova akcija treba biti mozda drugacije protected od ostalih akcija, to se moze resiti na dva nacina:\n        # prvi nacin je da se domain administrativnim userima zabrani mogucnost dodavanja dozvole 'activate_terminated-Domain' u listi dozvola na domain-specific Rolama\n        # drugi nacin je da se ova metoda drugacije evaluira, tako da ignorise proveru domain-specific Rola\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate_terminated', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# "]],"start1":7544,"start2":7544,"length1":1067,"length2":8}]],"length":74869,"saved":false}
{"ts":1378923117210,"patch":[[{"diffs":[[0," = Role("],[-1,"parent"],[1,"namespace"],[0,"=domain_"]],"start1":4984,"start2":4984,"length1":22,"length2":25}]],"length":74872,"saved":false}
{"ts":1378923151131,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        #object_log = ObjectLog(parent=role_user_key, agent=user_key, action='accept', state=role_user.state, log=role_user)\n        #object_log.put()\n"],[0,"    "]],"start1":5216,"start2":5216,"length1":159,"length2":8}]],"length":74721,"saved":false}
{"ts":1378923170763,"patch":[[{"diffs":[[0,"r.put()\n        "],[-1,"sub"],[1,"user"],[0,"_role = Role(nam"]],"start1":5212,"start2":5212,"length1":35,"length2":36},{"diffs":[[0,"y=True)\n        "],[-1,"sub"],[1,"user"],[0,"_role.put()\n    "]],"start1":5362,"start2":5362,"length1":35,"length2":36}]],"length":74723,"saved":false}
{"ts":1378923456971,"patch":[[{"diffs":[[0,"activate"],[-1,"_suspended"],[0,"-Domain'"]],"start1":6953,"start2":6953,"length1":26,"length2":16}]],"length":74713,"saved":false}
{"ts":1378923469849,"patch":[[{"diffs":[[0,"vate"],[-1,"_suspended"],[0,"', s"]],"start1":7194,"start2":7194,"length1":18,"length2":8}]],"length":74703,"saved":false}
{"ts":1378923560276,"patch":[[{"diffs":[[0,"main"],[-1,"/'MIRACLESTYLE')\n    # Role permissions affect Domain and it's related entities, with exception to Roles in 'MIRACLESTYLE' namespace.\n    # Roles in 'MIRACLESTYLE' namespace globally affect Miraclestyle Application and all of it's related entities."],[1,")"],[0,"\n   "]],"start1":7444,"start2":7444,"length1":256,"length2":9}]],"length":74456,"saved":false}
{"ts":1378923577055,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":8197,"start2":8197,"length1":34,"length2":8}]],"length":74430,"saved":false}
{"ts":1378923591928,"patch":[[{"diffs":[[0,"'. \n"],[-1,"        # u slucaju kreiranja Role u 'MIRACLESTYLE' domeni, agent mora biti Application Admin (users.is_current_user_admin()).\n"],[0,"    "]],"start1":8334,"start2":8334,"length1":135,"length2":8},{"diffs":[[0,"e'.\n"],[-1,"        # domena 'MIRACLESTYLE' je uvek evaluated 'active'\n"],[0,"    "]],"start1":8405,"start2":8405,"length1":67,"length2":8}]],"length":74244,"saved":false}
{"ts":1378923643044,"patch":[[{"diffs":[[0," = Role("],[-1,"namespace=domain_key, "],[0,"name='St"]],"start1":8421,"start2":8421,"length1":38,"length2":16}]],"length":74222,"saved":false}
{"ts":1378923689210,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":8754,"start2":8754,"length1":34,"length2":8},{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da agent treba azurirati globalne Role imacemo problem posto bi globalna dozvola 'update-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'update-Role').\n"],[0,"    "]],"start1":8796,"start2":8796,"length1":233,"length2":8}]],"length":73971,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378926067612,"patch":[[{"diffs":[[0,"ima "],[-1,"za"],[1,"u"],[0," async "],[-1,"oper"],[1,"radi optimiz"],[0,"acij"]],"start1":9334,"start2":9334,"length1":21,"length2":28}]],"length":73978,"saved":false}
{"ts":1378926213850,"patch":[[{"diffs":[[0,")))\n            "],[-1,"sub"],[1,"user"],[0,"_role = key.get("]],"start1":9483,"start2":9483,"length1":35,"length2":36},{"diffs":[[0,"            "],[-1,"sub"],[1,"user"],[0,"_role.name ="]],"start1":9521,"start2":9521,"length1":27,"length2":28},{"diffs":[[0,"            "],[-1,"sub"],[1,"user"],[0,"_role.permis"]],"start1":9560,"start2":9560,"length1":27,"length2":28},{"diffs":[[0,"ons\n            "],[-1,"sub"],[1,"user"],[0,"_role.put()\n    "]],"start1":9609,"start2":9609,"length1":35,"length2":36}]],"length":73982,"saved":false}
{"ts":1378926276591,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu."],[0,"\n   "]],"start1":9668,"start2":9668,"length1":35,"length2":8},{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da agent treba brisati globalne Role imacemo problem posto bi globalna dozvola 'delete-Role'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'delete-Role').\n"],[0,"    "]],"start1":9710,"start2":9710,"length1":231,"length2":8}]],"length":73732,"saved":false}
{"ts":1378926375850,"patch":[[{"diffs":[[0,"tor Role"],[-1,"\n    #"],[1," (namespace Domain) -"],[0," id = st"]],"start1":10409,"start2":10409,"length1":22,"length2":37}]],"length":73747,"saved":false}
{"ts":1378926399826,"patch":[[{"diffs":[[0,"d = str("],[-1,"user"],[1,"role"],[0,"_key.id("]],"start1":10440,"start2":10440,"length1":20,"length2":20}]],"length":73747,"saved":false}
{"ts":1378926437979,"patch":[[{"diffs":[[0," - id = str("],[-1,"role"],[1,"user"],[0,"_key.id())\n "]],"start1":10436,"start2":10436,"length1":28,"length2":28}]],"length":73747,"saved":false}
{"ts":1378926448711,"patch":[[{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da se user treba invite na globalnu Rolu imacemo problem posto bi globalna dozvola 'invite-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'invite').\n"],[0,"    "]],"start1":11604,"start2":11604,"length1":234,"length2":8}]],"length":73521,"saved":false}
{"ts":1378926535066,"patch":[[{"diffs":[[0,"rolu"],[-1," domene, ili globalnu rolu"],[0,"\n   "]],"start1":11536,"start2":11536,"length1":34,"length2":8}]],"length":73495,"saved":false}
{"ts":1378926539481,"patch":[[{"diffs":[[0,"role"],[-1," domene, ili globalne role."],[0,"\n   "]],"start1":12145,"start2":12145,"length1":35,"length2":8}]],"length":73468,"saved":false}
{"ts":1378926544784,"patch":[[{"diffs":[[0,"():\n"],[-1,"        # (u slucaju da se user treba remove sa globalne Role imacemo problem posto bi globalna dozvola 'remove-RoleUser'\n        # po trenutnom konceptu znacila da user sa ovom dozvolom moze u svakoj domeni raditi 'remove').\n"],[0,"    "]],"start1":12187,"start2":12187,"length1":234,"length2":8}]],"length":73242,"saved":false}
{"ts":1378926672318,"patch":[[{"diffs":[[0,"user == agent).\n"],[1,"        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom\n"],[0,"        # akcija"]],"start1":12342,"start2":12342,"length1":32,"length2":148}]],"length":73358,"saved":false}
{"ts":1378926897247,"patch":[[{"diffs":[[0,"ete "],[1,"ne"],[0,"ce "],[-1,"fail"],[1,"uspeti"],[0," uko"]],"start1":12816,"start2":12816,"length1":15,"length2":19},{"diffs":[[0,"iko "],[-1,"nije napravljen entitet sa tim kljucem"],[1,"entitet ne postoji"],[0,", na"]],"start1":12836,"start2":12836,"length1":46,"length2":26}]],"length":73342,"saved":false}
{"ts":1378927005808,"patch":[[{"diffs":[[0,"rolu"],[-1," (lokalne ili globalne - \"MIRACLESTYLE\") domene"],[0,"\n   "]],"start1":12963,"start2":12963,"length1":55,"length2":8}]],"length":73295,"saved":false}
{"ts":1378927078563,"patch":[[{"diffs":[[0,"er.user == agent"],[1,"_key"],[0,").\n        # akc"]],"start1":13095,"start2":13095,"length1":32,"length2":36}]],"length":73299,"saved":false}
{"ts":1378927087487,"patch":[[{"diffs":[[0,"== agent"],[-1,"_key"],[0,").\n     "]],"start1":13103,"start2":13103,"length1":20,"length2":16}]],"length":73295,"saved":false}
{"ts":1378927150296,"patch":[[{"diffs":[[0,"ccept', "],[1,"state="],[0,"role_use"]],"start1":13341,"start2":13341,"length1":16,"length2":22}]],"length":73301,"saved":false}
{"ts":1378927214128,"patch":[[{"diffs":[[0,"t()\n        "],[-1,"sub"],[1,"user"],[0,"_role = Role"]],"start1":13393,"start2":13393,"length1":27,"length2":28},{"diffs":[[0,"    "],[-1,"sub"],[1,"user"],[0,"_rol"]],"start1":13547,"start2":13547,"length1":11,"length2":12}]],"length":73303,"saved":false}
{"ts":1378927453448,"patch":[[{"diffs":[[0,"nt=role_key,"],[1," id='123673472829',"],[0," user='12367"]],"start1":11784,"start2":11784,"length1":24,"length2":43},{"diffs":[[0," = Role("],[-1,"namespace=domain_key, "],[0,"parent=r"]],"start1":13433,"start2":13433,"length1":38,"length2":16}]],"length":73300,"saved":false}
{"ts":1378927587673,"patch":[[{"diffs":[[0," domenom"],[1,"."],[0,"\n       "]],"start1":12484,"start2":12484,"length1":16,"length2":17}]],"length":73301,"saved":false}
{"ts":1378927676619,"patch":[[{"diffs":[[0," \n    # root"],[1," (namespace Domain)"],[0,"\n    name = "]],"start1":13629,"start2":13629,"length1":24,"length2":43}]],"length":73320,"saved":false}
{"ts":1378927722624,"patch":[[{"diffs":[[0,"###\n\n# done!"],[1," - ovde ce nam trebati kontrola"],[0,"\nclass Domai"]],"start1":3138,"start2":3138,"length1":24,"length2":55}]],"length":73351,"saved":false}
{"ts":1378927762222,"patch":[[{"diffs":[[0,"g.put()\n\n# done!"],[1," ovo cemo iskoristiti za globalne dozvole"],[0,"\nclass Role(ndb."]],"start1":7406,"start2":7406,"length1":32,"length2":73},{"diffs":[[0,"e()\n\n# done!"],[1," ovo cemo iskoristiti za globalne dozvole"],[0,"\nclass RoleU"]],"start1":10425,"start2":10425,"length1":24,"length2":65}]],"length":73433,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378987130179,"patch":[[{"diffs":[[0,"one!"],[-1," ovo cemo iskoristiti za globalne dozvole"],[0,"\ncla"]],"start1":7418,"start2":7418,"length1":49,"length2":8},{"diffs":[[0,"one!"],[-1," ovo cemo iskoristiti za globalne dozvole"],[0,"\ncla"]],"start1":10392,"start2":10392,"length1":49,"length2":8}]],"length":73351,"saved":false}
{"ts":1378987294782,"patch":[[{"diffs":[[0,"mit 120x"],[1,"\n    \n    _KIND = 3\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novu domenu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo registrovani autenticirani agent.\n        domain = Domain(name='deskriptivno ime po zelji kreatora', primary_contact=user_key, state='active')\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=user_key, action='create', state=domain.state, log=domain)\n        object_log.put()\n        role = Role(namespace=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        user_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role.put()\n    \n    # Ova akcija azurira postojecu domenu.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.name = 'promenjeno ime od strane administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='update', state=domain.state, log=domain)\n        object_log.put()\n    \n    # Ova akcija suspenduje aktivnu domenu. Ovde cemo dalje opisati posledice suspenzije\n    @ndb.transactional\n    def suspend():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'suspend-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        domain.state = 'suspended'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='suspend', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija aktivira suspendovanu domenu. Ovde cemo dalje opisati posledice aktivacije\n    @ndb.transactional\n    def activate():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'activate-Domain'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'suspended'.\n        domain.state = 'active'\n        domain_key = domain.put()\n        object_log = ObjectLog(parent=domain_key, agent=agent_key, action='activate', state=domain.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done"]],"start1":15790,"start2":15790,"length1":16,"length2":3774}]],"length":77109,"saved":false}
{"ts":1378987321991,"patch":[[{"diffs":[[0,"a kreira nov"],[-1,"u domenu"],[1,"i store"],[0,".\n    @ndb.t"]],"start1":16726,"start2":16726,"length1":32,"length2":31},{"diffs":[[0,"amo "],[-1,"registrovani autenticirani agent"],[1,"agent koji ima domain-specific dozvolu 'create-Store'. ***\n        # akcija se moze pozvati samo ako je domain.state == 'active'"],[0,".\n  "]],"start1":16824,"start2":16824,"length1":40,"length2":136}]],"length":77204,"saved":false}
{"ts":1378987410051,"patch":[[{"diffs":[[0,"e'.\n        "],[-1,"domain = Domain"],[1,"store = Store"],[0,"(name='deskr"]],"start1":16954,"start2":16954,"length1":39,"length2":37},{"diffs":[[0,"a', "],[-1,"primary_contact=user_key"],[1,"logo='referenca kljuca do bloba'"],[0,", st"]],"start1":17019,"start2":17019,"length1":32,"length2":40},{"diffs":[[0," bloba', state='"],[-1,"active"],[1,"open"],[0,"')\n        domai"]],"start1":17048,"start2":17048,"length1":38,"length2":36}]],"length":77208,"saved":false}
{"ts":1378987440876,"patch":[[{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17071,"start2":17071,"length1":35,"length2":33}]],"length":77206,"saved":false}
{"ts":1378987487914,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=user"]],"start1":17125,"start2":17125,"length1":38,"length2":37},{"diffs":[[0,"tore_key, agent="],[-1,"user"],[1,"agent"],[0,"_key, action='cr"]],"start1":17142,"start2":17142,"length1":36,"length2":37},{"diffs":[[0,"ate="],[-1,"domain.state, log=domain)\n        object_log.put()\n        role = Role(namespace=domain_key, name='Domain Admins', permissions=['*',], readonly=True)\n        role_key = role.put()\n        role_user = RoleUser(parent=role_key, user=user_key, state='accepted')\n        role_user_key = role_user.put()\n        user_role = Role(namespace=domain_key, parent=role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role"],[1,"store.state, log=store)\n        object_log"],[0,".put"]],"start1":17188,"start2":17188,"length1":474,"length2":50}]],"length":76782,"saved":false}
{"ts":1378987570656,"patch":[[{"diffs":[[0,"azurira "],[-1,"postojecu domenu"],[1,"i store"],[0,".\n    @n"]],"start1":17263,"start2":17263,"length1":32,"length2":23},{"diffs":[[0,"dozvolu 'update-"],[-1,"Domain"],[1,"Store"],[0,"'. ***\n        #"]],"start1":17392,"start2":17392,"length1":38,"length2":37},{"diffs":[[0,"ctive'.\n        "],[-1,"domain"],[1,"store"],[0,".name = 'promenj"]],"start1":17483,"start2":17483,"length1":38,"length2":37},{"diffs":[[0,"ane "],[-1,"administratora domene'\n        domain.primary_contact = agent_key # u ovaj prop. se moze upisati samo key user-a koji ima domain-specific dozvolu 'manage_security-Domain'. ? provericemo kako je to na google apps"],[1,"korisnika'\n        store.logo = blob_key"],[0,"\n   "]],"start1":17534,"start2":17534,"length1":219,"length2":48},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17579,"start2":17579,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":17633,"start2":17633,"length1":38,"length2":37},{"diffs":[[0,"'update', state="],[-1,"domain"],[1,"store"],[0,".state, log=doma"]],"start1":17684,"start2":17684,"length1":38,"length2":37},{"diffs":[[0,"tore.state, log="],[-1,"domain"],[1,"store"],[0,")\n        object"]],"start1":17701,"start2":17701,"length1":38,"length2":37}]],"length":76595,"saved":false}
{"ts":1378987974154,"patch":[[{"diffs":[[0,"me='"],[-1,"deskriptivno ime po zelji kreatora', logo='referenca kljuca do bloba'"],[1,"Store Name', logo=blob_key"],[0,", st"]],"start1":16982,"start2":16982,"length1":77,"length2":34}]],"length":76552,"saved":false}
{"ts":1378988065093,"patch":[[{"diffs":[[0,"   \n"],[-1,"    # *** mozda treba zameniti dozvole za upravljanje domenom sa jednom dozvolom 'manage-Domain' ili tome slicno!\n    \n"],[0,"    "]],"start1":4445,"start2":4445,"length1":127,"length2":8},{"diffs":[[0,"ra novu domenu.\n"],[1,""],[0,"    @ndb.transac"]],"start1":4470,"start2":4470,"length1":32,"length2":32},{"diffs":[[0,"'update-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":5474,"start2":5474,"length1":36,"length2":32},{"diffs":[[0,"suspend-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":6213,"start2":6213,"length1":36,"length2":32},{"diffs":[[0,"def activate():\n"],[1,""],[0,"        # ovu ak"]],"start1":6761,"start2":6761,"length1":32,"length2":32},{"diffs":[[0,"ctivate-Domain'."],[-1," ***"],[0,"\n        # akcij"]],"start1":6858,"start2":6858,"length1":36,"length2":32},{"diffs":[[0," 'create-Store'."],[-1," ***"],[0,"\n        # akcij"]],"start1":16735,"start2":16735,"length1":36,"length2":32},{"diffs":[[0,"-Store'."],[-1," ***"],[0,"\n       "]],"start1":17229,"start2":17229,"length1":20,"length2":16}]],"length":76413,"saved":false}
{"ts":1378988145986,"patch":[[{"diffs":[[0,"ame="],[-1,"'Store N"],[1,"var_n"],[0,"ame"],[-1,"'"],[0,", logo="],[1,"var_"],[0,"blob"]],"start1":16846,"start2":16846,"length1":27,"length2":27}]],"length":76413,"saved":false}
{"ts":1378988159483,"patch":[[{"diffs":[[0,"ogo=var_"],[-1,"b"],[0,"lo"],[-1,"b_key"],[1,"go"],[0,", state="]],"start1":16861,"start2":16861,"length1":24,"length2":20}]],"length":76409,"saved":false}
{"ts":1378988204356,"patch":[[{"diffs":[[0,"e = "],[-1,"'promenjeno ime od strane korisnika'"],[1,"var_name"],[0,"\n   "]],"start1":17322,"start2":17322,"length1":44,"length2":16},{"diffs":[[0,"o = "],[-1,"blob_key"],[1,"var_logo"],[0,"\n   "]],"start1":17352,"start2":17352,"length1":16,"length2":16}]],"length":76381,"saved":false}
{"ts":1378988237655,"patch":[[{"diffs":[[0,"ija "],[-1,"suspenduje aktivnu domenu"],[1,"zatvara otvoren store"],[0,". Ov"]],"start1":17553,"start2":17553,"length1":33,"length2":29},{"diffs":[[0,"i posledice "],[-1,"suspenzije"],[1,"zatvaranja..."],[0,"\n    @ndb.tr"]],"start1":17602,"start2":17602,"length1":34,"length2":37}]],"length":76380,"saved":false}
{"ts":1378988336250,"patch":[[{"diffs":[[0,"ctional\n    def "],[-1,"suspend"],[1,"close"],[0,"():\n        # ov"]],"start1":17643,"start2":17643,"length1":39,"length2":37},{"diffs":[[0,"ozvolu '"],[-1,"suspend-Domain"],[1,"close-Store"],[0,"'. ***\n "]],"start1":17740,"start2":17740,"length1":30,"length2":27},{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        domain"]],"start1":17819,"start2":17819,"length1":32,"length2":56},{"diffs":[[0,"domain.state = '"],[-1,"suspend"],[1,"clos"],[0,"ed'\n        doma"]],"start1":17869,"start2":17869,"length1":39,"length2":36}]],"length":76396,"saved":false}
{"ts":1378988351919,"patch":[[{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        store."]],"start1":17287,"start2":17287,"length1":32,"length2":56}]],"length":76420,"saved":false}
{"ts":1378988429936,"patch":[[{"diffs":[[0,"'open'.\n        "],[-1,"domain"],[1,"store"],[0,".state = 'closed"]],"start1":17877,"start2":17877,"length1":38,"length2":37},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":17916,"start2":17916,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":17970,"start2":17970,"length1":38,"length2":37},{"diffs":[[0,"nt_key, action='"],[-1,"suspend"],[1,"close"],[0,"', state=domain."]],"start1":18006,"start2":18006,"length1":39,"length2":37},{"diffs":[[0,"='close', state="],[-1,"domain"],[1,"store"],[0,".state, message="]],"start1":18020,"start2":18020,"length1":38,"length2":37}]],"length":76413,"saved":false}
{"ts":1378988517703,"patch":[[{"diffs":[[0,"-Store'."],[-1," ***"],[0,"\n       "]],"start1":17777,"start2":17777,"length1":20,"length2":16},{"diffs":[[0,"ija "],[-1,"aktivira suspendovanu domenu"],[1,"otvara zatvoreni store"],[0,". Ov"]],"start1":18225,"start2":18225,"length1":36,"length2":30},{"diffs":[[0,"i posledice "],[-1,"aktivacije"],[1,"otvaranja..."],[0,"\n    @ndb.tr"]],"start1":18275,"start2":18275,"length1":34,"length2":36},{"diffs":[[0,"nal\n    def "],[-1,"activate"],[1,"open"],[0,"():\n        "]],"start1":18319,"start2":18319,"length1":32,"length2":28},{"diffs":[[0,"lu '"],[-1,"activate-Domain'. ***"],[1,"open-Store'."],[0,"\n   "]],"start1":18415,"start2":18415,"length1":29,"length2":20},{"diffs":[[0,"omain.state == '"],[-1,"suspend"],[1,"active' i store.state == 'clos"],[0,"ed'.\n        dom"]],"start1":18478,"start2":18478,"length1":39,"length2":62}]],"length":76415,"saved":false}
{"ts":1378988547480,"patch":[[{"diffs":[[0,"losed'.\n        "],[-1,"domain"],[1,"store"],[0,".state = 'active"]],"start1":18521,"start2":18521,"length1":38,"length2":37},{"diffs":[[0," store.state = '"],[-1,"active"],[1,"open"],[0,"'\n        domain"]],"start1":18536,"start2":18536,"length1":38,"length2":36},{"diffs":[[0,"        "],[-1,"domain"],[1,"store"],[0,"_key = "],[-1,"domain"],[1,"store"],[0,".put()\n "]],"start1":18558,"start2":18558,"length1":35,"length2":33},{"diffs":[[0,"bjectLog(parent="],[-1,"domain"],[1,"store"],[0,"_key, agent=agen"]],"start1":18612,"start2":18612,"length1":38,"length2":37},{"diffs":[[0,"ey, action='"],[-1,"activate"],[1,"open"],[0,"', state=dom"]],"start1":18652,"start2":18652,"length1":32,"length2":28},{"diffs":[[0,"n='open', state="],[-1,"domain"],[1,"store"],[0,".state, message="]],"start1":18661,"start2":18661,"length1":38,"length2":37}]],"length":76404,"saved":false}
{"ts":1378988776066,"patch":[[{"diffs":[[0,"for caching)"],[1," (namespace Domain)"],[0,"\n    # compo"]],"start1":19807,"start2":19807,"length1":24,"length2":43}]],"length":76423,"saved":false}
{"ts":1378988895240,"patch":[[{"diffs":[[0,"   \n    _KIND = "],[-1,"3"],[1,"0"],[0,"\n    \n    OBJECT"]],"start1":3511,"start2":3511,"length1":33,"length2":33},{"diffs":[[0,"_KIND = "],[-1,"6"],[1,"0"],[0,"\n    \n  "]],"start1":7929,"start2":7929,"length1":17,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"7"],[1,"0"],[0,"\n    \n  "]],"start1":10611,"start2":10611,"length1":17,"length2":17},{"diffs":[[0,"_KIND = "],[-1,"3"],[1,"0"],[0,"\n    \n  "]],"start1":15677,"start2":15677,"length1":17,"length2":17},{"diffs":[[0,"r Store (Catalog"],[-1," -"],[0," for caching) (n"]],"start1":19788,"start2":19788,"length1":34,"length2":32},{"diffs":[[0," required=True)\n"],[-1,""],[0,"    sequence = n"]],"start1":19967,"start2":19967,"length1":32,"length2":32},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira i store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":20021,"start2":20021,"length1":32,"length2":3216}]],"length":79605,"saved":false}
{"ts":1378988968109,"patch":[[{"diffs":[[0," = '"],[-1,"active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        }"],[1,"none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3"],[0,",\n  "]],"start1":20086,"start2":20086,"length1":855,"length2":103},{"diffs":[[0,"reira novi store"],[1," content"],[0,".\n    @ndb.trans"]],"start1":20216,"start2":20216,"length1":32,"length2":40}]],"length":78861,"saved":false}
{"ts":1378989289379,"patch":[[{"diffs":[[0,"lu 'create-Store"],[1,"Content"],[0,"'.\n        # akc"]],"start1":20359,"start2":20359,"length1":32,"length2":39},{"diffs":[[0,"tate == 'active'"],[1," i store.state == 'open'"],[0,".\n        store "]],"start1":20438,"start2":20438,"length1":32,"length2":56}]],"length":78892,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378996521512,"patch":[[{"diffs":[[0,"g.put()\n\n# done!"],[1," mozda napraviti DomainUser u kojem je repeated prop. Roles, i onda u Expando od User modela dodati struct prop Roles(Domain, Roles)?"],[0,"\nclass Role(ndb."]],"start1":7275,"start2":7275,"length1":32,"length2":165},{"diffs":[[0," akcija azurira "],[-1,""],[0,""],[1,"postojec"],[0,"i store.\n    @nd"]],"start1":17206,"start2":17206,"length1":32,"length2":40},{"diffs":[[0,"tore"],[-1," = Store(name=var_name, logo=var_logo, state='open'"],[1,"_content = StoreContent(title=var_title, body=var_body, sequence=var_sequence"],[0,")\n  "]],"start1":20630,"start2":20630,"length1":59,"length2":85},{"diffs":[[0,")\n        store_"],[1,"content_"],[0,"key = store.put("]],"start1":20711,"start2":20711,"length1":32,"length2":40},{"diffs":[[0,"tent_key = store"],[1,"_content"],[0,".put()\n        o"]],"start1":20730,"start2":20730,"length1":32,"length2":40},{"diffs":[[0,"og(parent=store_"],[1,"content_"],[0,"key, agent=agent"]],"start1":20789,"start2":20789,"length1":32,"length2":40},{"diffs":[[0,"ate', state="],[-1,"store.state"],[1,"'none'"],[0,", log=store)"]],"start1":20846,"start2":20846,"length1":35,"length2":30},{"diffs":[[0,"none', log=store"],[1,"_content"],[0,")\n        object"]],"start1":20859,"start2":20859,"length1":32,"length2":40},{"diffs":[[0,"azurira "],[-1,"i "],[0,"store"],[1," content"],[0,".\n    @n"]],"start1":20932,"start2":20932,"length1":23,"length2":29},{"diffs":[[0,"lu 'update-Store"],[1,"Content"],[0,"'.\n        # akc"]],"start1":21072,"start2":21072,"length1":32,"length2":39},{"diffs":[[0,"       store"],[-1,".nam"],[1,"_content.titl"],[0,"e = var_"],[-1,"nam"],[1,"titl"],[0,"e\n        st"]],"start1":21194,"start2":21194,"length1":39,"length2":49},{"diffs":[[0,"   store"],[-1,".logo = var_logo"],[1,"_content.body = var_body\n        store_content.sequence = var_sequence"],[0,"\n       "]],"start1":21238,"start2":21238,"length1":32,"length2":86},{"diffs":[[0,"e\n        store_"],[1,"content_"],[0,"key = store.put("]],"start1":21315,"start2":21315,"length1":32,"length2":40},{"diffs":[[0,"tent_key = store"],[1,"_content"],[0,".put()\n        o"]],"start1":21334,"start2":21334,"length1":32,"length2":40},{"diffs":[[0,"og(parent=store_"],[1,"content_"],[0,"key, agent=agent"]],"start1":21393,"start2":21393,"length1":32,"length2":40},{"diffs":[[0,"ate', state="],[-1,"store.state"],[1,"'none'"],[0,", log=store)"]],"start1":21450,"start2":21450,"length1":35,"length2":30},{"diffs":[[0,"none', log=store"],[1,"_content"],[0,")\n        object"]],"start1":21463,"start2":21463,"length1":32,"length2":40},{"diffs":[[0,"ija "],[-1,"zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x"],[1,"brise store content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_content_key.delete()\n\n# done!\nclass StoreShippingExclusion(Location):\n    \n    # ancestor Store (Catalog - for caching)\n    # ovde bi se indexi mozda mogli dobro iskoristiti?\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi store shipping exclusion.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion = StoreShippingExclusion(country=var_country)\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='create', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija azurira store shipping exclusion.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion.country = var_country\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='update', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija brise store shipping exclusion.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_shipping_exclusion_key.delete()\n\n# done!\nclass Tax(ndb.Expando):\n    \n    # root (namespace Domain)\n    # composite index: ancestor:no - active,sequence\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    amount = ndb.StringProperty('3', required=True, indexed=False)# prekompajlirane vrednosti iz UI, napr: 17.00[%] ili 10.00[c] gde je [c] = currency\n    location_exclusion = ndb.BooleanProperty('4', default=False, indexed=False)# applies to all locations except/applies to all locations listed below\n    active = ndb.BooleanProperty('5', default=True)\n    _default_indexed = False\n    pass\n    # Expando\n    # locations = ndb.LocalStructuredProperty(Location, '6', repeated=True)# soft limit 300x\n    # product_categories = ndb.KeyProperty('7', kind=ProductCategory, repeated=True)# soft limit 100x\n    # carriers = ndb.KeyProperty('8', kind=Carrier, repeated=True)# soft limit 100x\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novu taxu.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Tax'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store_shipping_exclusion = StoreShippingExclusion(country=var_country)\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='create', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija azurira store shipping exclusion.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store_shipping_exclusion.country = var_country\n        store_shipping_exclusion_key = store_shipping_exclusion.put()\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='update', state='none', log=store_shipping_exclusion)\n        object_log.put()\n    \n    # Ova akcija brise store shipping exclusion.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-StoreShippingExclusion'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        object_log = ObjectLog(parent=store_shipping_exclusion_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        store_shipping_exclusion_key.delete()"],[0,"\n\n# "]],"start1":21532,"start2":21532,"length1":2343,"length2":5177}]],"length":82024,"saved":false}
{"ts":1378996629631,"patch":[[{"diffs":[[0,"    "],[-1,"store_shipping_exclusion = StoreShippingExclusion(country=var_country"],[1,"tax = Tax(name=var_name, sequence=var_sequence, amount=var_amount, location_exclusion=var_location_exclusion, active=True"],[0,")\n  "]],"start1":25301,"start2":25301,"length1":77,"length2":129}]],"length":82076,"saved":false}
{"ts":1378996786919,"patch":[[{"diffs":[[0,"    "],[-1,"store_shipping_exclusion_key = store_shipping_exclusion"],[1,"tax_key = tax"],[0,".put"]],"start1":25432,"start2":25432,"length1":63,"length2":21},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":25490,"start2":25490,"length1":32,"length2":11},{"diffs":[[0,"log="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,")\n  "]],"start1":25551,"start2":25551,"length1":32,"length2":11},{"diffs":[[0,"ira "],[-1,"store shipping exclusion"],[1,"taxu"],[0,".\n  "]],"start1":25611,"start2":25611,"length1":32,"length2":12},{"diffs":[[0,"'update-"],[-1,"StoreShippingExclusion"],[1,"Tax"],[0,"'.\n     "]],"start1":25741,"start2":25741,"length1":38,"length2":19},{"diffs":[[0,"ive'"],[-1," i store.state == 'open'.\n        store_shipping_exclusion.c"],[1,".\n        tax.name = var_name\n        tax.sequence = var_sequence\n        tax.am"],[0,"ount"],[-1,"ry"],[0," = var_"],[-1,"c"],[1,"am"],[0,"ount"],[-1,"ry"],[0,"\n   "]],"start1":25820,"start2":25820,"length1":88,"length2":105},{"diffs":[[0,"    "],[-1,"store_shipping_exclusion_key = store_shipping_exclusion"],[1,"tax.location_exclusion = var_location_exclusion\n        tax.active = var_active\n        tax_key = tax"],[0,".put"]],"start1":25926,"start2":25926,"length1":63,"length2":109},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26072,"start2":26072,"length1":32,"length2":11},{"diffs":[[0,"log="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,")\n  "]],"start1":26133,"start2":26133,"length1":32,"length2":11}]],"length":81974,"saved":false}
{"ts":1378996831945,"patch":[[{"diffs":[[0,"'delete-"],[-1,"StoreShippingExclusion"],[1,"Tax"],[0,"'.\n     "]],"start1":26341,"start2":26341,"length1":38,"length2":19},{"diffs":[[0,"ive'"],[-1," i store.state == 'open'"],[0,".\n  "]],"start1":26420,"start2":26420,"length1":32,"length2":8},{"diffs":[[0,"ent="],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26460,"start2":26460,"length1":32,"length2":11},{"diffs":[[0,"    "],[-1,"store_shipping_exclusion"],[1,"tax"],[0,"_key"]],"start1":26550,"start2":26550,"length1":32,"length2":11}]],"length":81889,"saved":false}
{"ts":1378998190330,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi carrier.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier = Carrier(name=var_name, active=True)\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='create', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija azurira carrier.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier.name = var_name\n        carrier.active = var_active\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='update', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija brise carrier.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=tax_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        tax_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":26946,"start2":26946,"length1":32,"length2":1546}]],"length":83403,"saved":false}
{"ts":1378998199309,"patch":[[{"diffs":[[0,"ise "],[-1,"store shipping exclusion"],[1,"taxu"],[0,".\n  "]],"start1":26191,"start2":26191,"length1":32,"length2":12}]],"length":83383,"saved":false}
{"ts":1378998339580,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"tax"],[1,"carrier"],[0,"_key, agent=agen"]],"start1":28334,"start2":28334,"length1":35,"length2":39},{"diffs":[[0,"g.put()\n        "],[-1,"tax"],[1,"carrier"],[0,"_key.delete()\n\n#"]],"start1":28428,"start2":28428,"length1":35,"length2":39}]],"length":83391,"saved":false}
{"ts":1378998416649,"patch":[[{"diffs":[[0,"(Catalog"],[1,","],[0," for cac"]],"start1":19937,"start2":19937,"length1":16,"length2":17},{"diffs":[[0,"(Catalog"],[-1," -"],[1,","],[0," for cac"]],"start1":22036,"start2":22036,"length1":18,"length2":17},{"diffs":[[0,"caching)"],[1," (namespace Domain)"],[0,"\n    # o"]],"start1":22050,"start2":22050,"length1":16,"length2":35},{"diffs":[[0,"mit 300x"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi carrier.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier = Carrier(name=var_name, active=True)\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='create', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija azurira carrier.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        carrier.name = var_name\n        carrier.active = var_active\n        carrier_key = carrier.put()\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='update', state='none', log=carrier)\n        object_log.put()\n    \n    # Ova akcija brise carrier.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Carrier'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        object_log = ObjectLog(parent=carrier_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        carrier_key.delete()"],[0,"\n\n# done"]],"start1":29206,"start2":29206,"length1":16,"length2":1538}]],"length":84932,"saved":false}
{"ts":1378998468422,"patch":[[{"diffs":[[0," Carrier"],[1," (namespace Domain)"],[0,"\n    # h"]],"start1":28544,"start2":28544,"length1":16,"length2":35}]],"length":84951,"saved":false}
{"ts":1378998497453,"patch":[[{"diffs":[[0,"ira novi carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":29414,"start2":29414,"length1":32,"length2":37},{"diffs":[[0," 'create-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":29556,"start2":29556,"length1":32,"length2":36}]],"length":84960,"saved":false}
{"ts":1378998570369,"patch":[[{"diffs":[[0,"\n        carrier"],[1,"_line"],[0," = Carrier(name="]],"start1":29649,"start2":29649,"length1":32,"length2":37},{"diffs":[[0,"r_line = Carrier"],[1,"Line"],[0,"(name=var_name, "]],"start1":29664,"start2":29664,"length1":32,"length2":36},{"diffs":[[0,"e(name=var_name,"],[1," sequence=var_sequence, location_exclusion=var_location_exclusion,"],[0," active=True)\n  "]],"start1":29683,"start2":29683,"length1":32,"length2":98}]],"length":85035,"saved":false}
{"ts":1378998742243,"patch":[[{"diffs":[[0,"        carrier_"],[1,"line_"],[0,"key = carrier.pu"]],"start1":29779,"start2":29779,"length1":32,"length2":37},{"diffs":[[0,"ne_key = carrier"],[1,"_line"],[0,".put()\n        o"]],"start1":29797,"start2":29797,"length1":32,"length2":37},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":29855,"start2":29855,"length1":32,"length2":37},{"diffs":[[0,"ne', log=carrier"],[1,"_line"],[0,")\n        object"]],"start1":29924,"start2":29924,"length1":32,"length2":37},{"diffs":[[0," azurira carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":29993,"start2":29993,"length1":32,"length2":37},{"diffs":[[0," 'update-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":30135,"start2":30135,"length1":32,"length2":36},{"diffs":[[0,"\n        carrier"],[1,"_line"],[0,".name = var_name"]],"start1":30228,"start2":30228,"length1":32,"length2":37},{"diffs":[[0,"\n        carrier"],[1,"_line.sequence = var_sequence\n        carrier_line.location_exclusion = var_location_exclusion\n        carrier_line"],[0,".active = var_ac"]],"start1":30265,"start2":30265,"length1":32,"length2":147},{"diffs":[[0,"        carrier_"],[1,"line_"],[0,"key = carrier.pu"]],"start1":30417,"start2":30417,"length1":32,"length2":37},{"diffs":[[0,"ne_key = carrier"],[1,"_line"],[0,".put()\n        o"]],"start1":30435,"start2":30435,"length1":32,"length2":37},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":30493,"start2":30493,"length1":32,"length2":37},{"diffs":[[0,"ne', log=carrier"],[1,"_line"],[0,")\n        object"]],"start1":30562,"start2":30562,"length1":32,"length2":37},{"diffs":[[0,"ja brise carrier"],[1," line"],[0,".\n    @ndb.trans"]],"start1":30629,"start2":30629,"length1":32,"length2":37},{"diffs":[[0," 'delete-Carrier"],[1,"Line"],[0,"'.\n        # akc"]],"start1":30771,"start2":30771,"length1":32,"length2":36},{"diffs":[[0,"(parent=carrier_"],[1,"line_"],[0,"key, agent=agent"]],"start1":30895,"start2":30895,"length1":32,"length2":37},{"diffs":[[0,"\n        carrier"],[-1,""],[0,""],[1,"_line"],[0,"_key.delete()\n\n#"]],"start1":30993,"start2":30993,"length1":32,"length2":37}]],"length":85223,"saved":false}
{"ts":1378998810724,"patch":[[{"diffs":[[0,"feedback"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'active'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'open' : (1, ),\n        'closed' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira postojeci store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# done"]],"start1":32627,"start2":32627,"length1":16,"length2":3208}]],"length":88415,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379251225782,"patch":[[{"diffs":[[0,"Content("],[-1,""],[0,""],[1,"parent=store_key, "],[0,"title=va"]],"start1":20651,"start2":20651,"length1":16,"length2":34},{"diffs":[[0,"clusion("],[-1,""],[0,""],[1,"parent=store_key, "],[0,"country="]],"start1":22664,"start2":22664,"length1":16,"length2":34},{"diffs":[[0,"bject_log.put()\n"],[1,"        carrier_lines = CarrierLine.query(ancestor=carrier_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog carrier_line entiteta, pa se trebati ustvari pozivati CarrierLine.delete() sa listom kljuceva.\n        # CarrierLine.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog Carrier entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(carrier_lines)\n"],[0,"        carrier_"]],"start1":28475,"start2":28475,"length1":32,"length2":532},{"diffs":[[0,"ierLine("],[-1,""],[0,""],[1,"parent=carrier_key, "],[0,"name=var"]],"start1":30213,"start2":30213,"length1":16,"length2":36},{"diffs":[[0,"te-ova\n        '"],[-1,"open"],[1,"unpublished"],[0,"' : (1, ),\n     "]],"start1":33692,"start2":33692,"length1":36,"length2":43},{"diffs":[[0,"),\n        '"],[-1,"closed' : (2"],[1,"locked' : (2, ),\n        'published' : (3, ),\n        'discontinued' : (4"],[0,", ),\n    }\n "]],"start1":33727,"start2":33727,"length1":36,"length2":97},{"diffs":[[0," 2,\n       '"],[-1,"close"],[1,"lock' : 3,\n       'publish"],[0,"' : "],[-1,"3"],[1,"4"],[0,",\n       'op"]],"start1":33889,"start2":33889,"length1":34,"length2":55},{"diffs":[[0," 4,\n       '"],[-1,"open"],[1,"discontinue"],[0,"' : "],[-1,"4"],[1,"5"],[0,",\n    }\n    "]],"start1":33930,"start2":33930,"length1":33,"length2":40},{"diffs":[[0,"NS = {\n        '"],[-1,"open"],[1,"lock"],[0,"' : {\n          "]],"start1":33991,"start2":33991,"length1":36,"length2":36},{"diffs":[[0,"     'from' : ('"],[-1,"clos"],[1,"unpublish"],[0,"ed',),\n         "]],"start1":34024,"start2":34024,"length1":36,"length2":41},{"diffs":[[0,"   'to' : ('"],[-1,"open"],[1,"locked',),\n         },\n        'publish' : {\n           'from' : ('locked"],[0,"',"],[1," "],[0,"),\n "],[1,"          'to'   : ('published',),\n"],[0,"        },\n "]],"start1":34065,"start2":34065,"length1":34,"length2":139},{"diffs":[[0,"    },\n        '"],[-1,"clos"],[1,"discontinu"],[0,"e' : {\n         "]],"start1":34196,"start2":34196,"length1":36,"length2":42},{"diffs":[[0,"     'from' : ('"],[-1,"open"],[1,"published"],[0,"', ),\n          "]],"start1":34235,"start2":34235,"length1":36,"length2":41},{"diffs":[[0,"     'to'   : ('"],[-1,"clos"],[1,"discontinu"],[0,"ed',),\n        }"]],"start1":34272,"start2":34272,"length1":36,"length2":42},{"diffs":[[0,"stor Catalog"],[-1,""],[0,""],[1," (namespace Domain)"],[0,"\n    # compo"]],"start1":36658,"start2":36658,"length1":24,"length2":43},{"diffs":[[0,"sequence"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija dodaje novu sliku u catalog.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_image = CatalogImage(parent=catalog_key, image=var_image, content_type=var_content_type, size=var_size, width=var_width, height=var_height, sequence=var_sequence)\n        catalog_image_key = catalog_image.put()\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='create', state='none', log=catalog_image)\n        object_log.put()\n    \n    # Ova akcija menja raspored slike u catalog-u.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_image.sequence = var_sequence\n        catalog_image_key = catalog_image.put()\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='update', state='none', log=catalog_image)\n        object_log.put()\n    \n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete()"],[0,"\n\n# done"]],"start1":36728,"start2":36728,"length1":16,"length2":1838},{"diffs":[[0," Catalog"],[-1,""],[0,""],[1," (namespace Domain)"],[0,"\n    pro"]],"start1":38621,"start2":38621,"length1":16,"length2":35},{"diffs":[[0," ProductInstance"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija dodaje novi pricetag na catalog.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_pricetag = CatalogPricetag(parent=catalog_key, product_template=var_product_template, container_image=var_container_image, source_width=var_source_width, source_height=var_source_height, source_position_top=var_source_position_top, source_position_left=var_source_position_left, value=var_value)\n        catalog_pricetag_key = catalog_pricetag.put()\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='create', state='none', log=catalog_pricetag)\n        object_log.put()\n    \n    # Ova akcija azurira pricetag na catalog-u.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        catalog_pricetag.product_template = var_product_template\n        catalog_pricetag.container_image = var_container_image\n        catalog_pricetag.source_width = var_source_width\n        catalog_pricetag.source_height = var_source_height\n        catalog_pricetag.source_position_top = var_source_position_top\n        catalog_pricetag.source_position_left = var_source_position_left\n        catalog_pricetag.value = var_value\n        catalog_pricetag_key = catalog_pricetag.put()\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='update', state='none', log=catalog_pricetag)\n        object_log.put()\n    \n    # Ova akcija brise pricetag sa catalog-a.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogPricetag'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_pricetag_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_pricetag_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":39332,"start2":39332,"length1":32,"length2":2428},{"diffs":[[0,"ue)\n"],[-1,"    state = ndb.IntegerProperty('6', required=True, indexed=False)\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n"],[0,"    "]],"start1":42249,"start2":42249,"length1":494,"length2":8},{"diffs":[[0,"odlucimo"],[1,"\n    # product_instance_count = ndb.IntegerProperty('12') cuvanje ovog podatka moze biti od koristi zbog prakticnog limita broja instanci na sistemu\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n       'generate_product_instances' : 4,\n    }\n    \n    # Ova akcija kreira novi product template.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_template = ProductTemplate(parent=catalog_key, product_category=var_product_category, name=var_name, description=var_description, product_uom=var_product_uom, unit_price=var_unit_price)\n        product_template_key = product_template.put()\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='create', state='none', log=product_template)\n        object_log.put()\n    \n    # Ova akcija azurira product template.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_template.product_category = var_product_category\n        product_template.name = var_name\n        product_template.description = var_description\n        product_template.product_uom = var_product_uom\n        product_template.unit_price = var_unit_price\n        product_template.state = var_state\n        product_template_key = product_template.put()\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state='none', log=product_template)\n        object_log.put()\n    \n    # Ova akcija brise product template.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_instance entiteta, pa se trebati ustvari pozivati ProductInstance.delete() sa listom kljuceva.\n        # ProductInstance.delete() nije za sada opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductTemplate entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_instances)\n        product_template_key.delete()\n    \n    # Ova akcija generise product instance.\n    @ndb.transactional\n    def generate_product_instances():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'generate_product_instances-ProductTemplate'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_instances)\n        \n        \n        \n        \n        variants []\n        for key in product_template_variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] = product_template_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n        variants = [\n            {'name': 'Color', 'options': ['Red', 'Green', 'Blue'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Size', 'options': ['Small', 'Medium', 'Large'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Fabric', 'options': ['Silk', 'Cotton'], 'position': 0, 'increment': False, 'reset': False},\n            {'name': 'Motif', 'options': ['Lace', 'Smooth', 'ZigZag', 'Butterfly'], 'position': 0, 'increment': False, 'reset': False},\n        ]\n                \n        variant_signatures = []\n        stay = True\n        while stay:\n            iterator = 0\n            for item in variants:\n                if (item['increment']):\n                    variants[iterator]['position'] += 1\n                    variants[iterator]['increment'] = False\n                if (item['reset']):\n                    variants[iterator]['position'] = 0\n                    variants[iterator]['reset'] = False\n                iterator += 1\n            dic = {}\n            iterator = 0\n            for item in variants:\n                dic[item['name']] = item['options'][item['position']]\n                if (iterator == 0):\n                    if (len(item['options']) == item['position'] + 1):\n                        variants[iterator]['reset'] = True\n                        variants[iterator + 1]['increment'] = True\n                    else:\n                        variants[iterator]['increment'] = True\n                elif not (len(variants) == iterator + 1):\n                    if (len(item['options']) == item['position'] + 1):\n                        if (variants[iterator - 1]['reset']):\n                            variants[iterator]['reset'] = True\n                            variants[iterator + 1]['increment'] = True\n                elif (len(variants) == iterator + 1):\n                    if (len(item['options']) == item['position'] + 1):\n                        if (variants[iterator - 1]['reset']):\n                            stay = False\n                            break\n                iterator += 1\n            variant_signatures.append(dic)\n        \n        variant_signatures = [\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        ]\n        \n            # ako nakon ove variante ima jos varianti onda mi treba broj option-sa u varianti i prvi option iz variante, \n            # ali treba zapamtiti redni broj option-a koji je trenutno izabran\n            \n            # \n            # treba mi index ucatne variante i treba mi ukupan broj varianti\n            # ako iza ove \n            for option in product_template_variant.options:\n                \n                \n                \n                \n                \n        product_instance = ProductInstance(parent=product_template_key, code=var_code, state=var_state)\n        product_instance_key = product_instance.put()\n        object_log = ObjectLog(parent=product_instance_key, agent=agent_key, action='create', state='none', log=product_instance)\n        object_log.put()"],[0,"\n\n# done"]],"start1":42925,"start2":42925,"length1":16,"length2":8018},{"diffs":[[0," to Cart"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'update' : 1,\n       'update_inventory' : 2,\n    }\n    \n    # Ova akcija azurira product instance.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductInstance'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        # u slucaju da je catalog.state == 'published' onda je moguce editovanje samo product_instance.state i product_instance.low_stock_quantity\n        product_instance.code = var_code\n        product_instance.state = var_state\n        product_instance_key = product_instance.put()\n        object_log = ObjectLog(parent=product_instance_key, agent=agent_key, action='update', state=product_instance.state, log=product_instance)\n        object_log.put()"],[0,"\n\n# done"]],"start1":53526,"start2":53526,"length1":16,"length2":914},{"diffs":[[0," ProductInstance"],[1," (namespace Domain)"],[0,"\n    # not logge"]],"start1":55212,"start2":55212,"length1":32,"length2":51},{"diffs":[[0,"    # not logged"],[1," ?"],[0,"\n    adjusted = "]],"start1":55248,"start2":55248,"length1":32,"length2":34},{"diffs":[[0,", indexed=False)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n    }\n    \n    # Ova akcija azurira product inventory.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductInventoryAdjustment'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'published'. - mozda budemo dozvolili adjustment bez obzira na catalog.state\n        product_inventory_adjustment = ProductInventoryAdjustment(parent=product_instance_key, agent=agent_key, quantity=var_quantity, comment=var_comment)\n        product_inventory_adjustment_key = product_inventory_adjustment.put()\n        object_log = ObjectLog(parent=product_inventory_adjustment_key, agent=agent_key, action='create', state='none', log=product_inventory_adjustment)\n        object_log.put()\n        # ovo bi trebalo ici preko task queue\n        # idempotency je moguc ako se pre inserta proverava da li je record sa tim reference-om upisan\n        product_inventory_log = ProductInventoryLog.query().order(-ProductInventoryLog.logged).fetch(1)\n        new_product_inventory_log = ProductInventoryLog(parent=product_instance_key, reference=product_inventory_adjustment_key, quantity=product_inventory_adjustment.quantity, balance=product_inventory_log.balance + product_inventory_adjustment.quantity)\n        new_product_inventory_log.put()"],[0,"\n\n# done!\nclass "]],"start1":55563,"start2":55563,"length1":32,"length2":1479},{"diffs":[[0,"g (future - root"],[-1," / "],[1,") ("],[0,"namespace Domain"]],"start1":57095,"start2":57095,"length1":35,"length2":35},{"diffs":[[0,"Cart"],[-1," \n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root / namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product variant.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductVariant'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_variant = ProductVariant(parent=catalog_key, name=var_name, description=var_description, options=var_options, allow_custom_value=var_allow_custom_value)\n        product_variant_key = product_variant.put()\n        object_log = ObjectLog(parent=product_variant_key, agent=agent_key, action='create', state='none', log=product_variant)\n        object_log.put()\n    \n    # Ova akcija azurira product variant.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductVariant'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_variant.name = var_name\n        product_variant.description = var_description\n        product_variant.options = var_options\n        product_variant.allow_custom_value = var_allow_custom_value\n        product_variant_key = product_variant.put()\n        object_log = ObjectLog(parent=product_variant_key, agent=agent_key, action='update', state='none', log=product_variant)\n        object_log.put()\n\n# done!\nclass ProductContent(ndb.Model):\n    \n    # ancestor Catalog (future - root) (namespace Domain)\n    # composite index: ancestor:yes - title\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product content.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content = ProductContent(parent=catalog_key, title=var_title, body=var_body)\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='create', state='none', log=product_content)\n        object_log.put()\n    \n    # Ova akcija azurira product content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content.title = var_title\n        product_content.body = var_body\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='update', state='none', log=product_content)\n        object_log.put("],[0,")\n\n#"]],"start1":57604,"start2":57604,"length1":256,"length2":3087}]],"length":106163,"saved":false}
{"ts":1379251882975,"patch":[[{"diffs":[[0," 1,\n"],[-1,"       'update_inventory' : 2,\n"],[0,"    "]],"start1":53638,"start2":53638,"length1":39,"length2":8}]],"length":106132,"saved":false}
{"ts":1379251995722,"patch":[[{"diffs":[[0,"sistemu\n"],[1,"    # default_product_instance_state = ndb.IntegerProperty('13') ovo sluzi samo da bi se state-ovi na instancama setovali na ovaj value\n"],[0,"    \n   "]],"start1":43074,"start2":43074,"length1":16,"length2":152}]],"length":106268,"saved":false}
{"ts":1379252073541,"patch":[[{"diffs":[[0,"se state"],[-1,"-ovi"],[1," na instancama setovao na ovaj value\n    # default_product_instance_low_stock_quantity = DecimalProperty('14') ovo sluzi samo da bi se low_stock_quantity"],[0," na inst"]],"start1":43168,"start2":43168,"length1":20,"length2":169},{"diffs":[[0,"a setova"],[-1,"li"],[1,"o"],[0," na ovaj"]],"start1":43342,"start2":43342,"length1":18,"length2":17}]],"length":106416,"saved":false}
{"ts":1379252178180,"patch":[[{"diffs":[[0," required=True)\n"],[1,"    state = ndb.IntegerProperty('2', required=True, indexed=False)# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n"],[0,"    _default_ind"]],"start1":42237,"start2":42237,"length1":32,"length2":571}]],"length":106955,"saved":false}
{"ts":1379252188422,"patch":[[{"diffs":[[0,"ntegerProperty('"],[-1,"2"],[1,"6"],[0,"', required=True"]],"start1":42270,"start2":42270,"length1":33,"length2":33}]],"length":106955,"saved":false}
{"ts":1379252316515,"patch":[[{"diffs":[[0,"quired=True)\n   "],[1," _default_indexed = False\n    pass\n    # Expando\n    #"],[0," state = ndb.Int"]],"start1":52819,"start2":52819,"length1":32,"length2":86},{"diffs":[[0,"lse)"],[-1,"# ukljuciti index ako bude trebao za projection query\n    # states: - ovo cemo pojasniti\n    # 'in stock'\n    # 'available for order'\n    # 'out of stock'\n    # 'preorder'\n    # 'auto manage inventory - available for order' (poduct is 'available for order' when inventory balance is <= 0)\n    # 'auto manage inventory - out of stock' (poduct is 'out of stock' when inventory balance is <= 0)\n    # https://support.google.com/merchants/answer/188494?hl=en&ref_topic=2473824\n    _default_indexed = False\n    pass\n    # Expando"],[1," overide state vrednosti sa product_template-a, inventory se uvek prati na nivou instanci, state je stavljen na template kako bi se olaksala kontrola state-ova. "],[0,"\n   "]],"start1":52948,"start2":52948,"length1":532,"length2":169}]],"length":106646,"saved":false}
{"ts":1379252389496,"patch":[[{"diffs":[[0,"  # "],[-1,"default_product_instance_state = ndb.IntegerProperty('13') ovo sluzi samo da bi se state na instancama"],[1,"low_stock_quantity = DecimalProperty('7', default=0.00)# notify"],[0," s"],[-1,"e"],[0,"to"],[-1,"vao na ovaj value\n    # default_product_instance_low_stock_quantity = DecimalProperty('14') ovo sluzi samo da bi se low_stock_quantity na instancama setovao na ovaj value"],[1,"re manager when qty drops below X quantity"],[0,"\n   "]],"start1":43623,"start2":43623,"length1":285,"length2":117}]],"length":106478,"saved":false}
{"ts":1379252410443,"patch":[[{"diffs":[[0,"ecimalProperty('"],[-1,"7"],[1,"13"],[0,"', default=0.00)"]],"start1":43649,"start2":43649,"length1":33,"length2":34}]],"length":106479,"saved":false}
{"ts":1379257278533,"patch":[[{"diffs":[[0,"ode\n"],[-1,"        product_instance.state = var_state\n"],[0,"    "]],"start1":54477,"start2":54477,"length1":51,"length2":8}]],"length":106436,"saved":false}
{"ts":1379257561808,"patch":[[{"diffs":[[0,"ec odlucimo\n"],[1,"    # low_stock_quantity = DecimalProperty('12', default=0.00)# notify store manager when qty drops below X quantity\n"],[0,"    # produc"]],"start1":43461,"start2":43461,"length1":24,"length2":141},{"diffs":[[0,"perty('1"],[-1,"2"],[1,"3"],[0,"') cuvan"]],"start1":43635,"start2":43635,"length1":17,"length2":17},{"diffs":[[0,"emu\n"],[-1,"    # low_stock_quantity = DecimalProperty('13', default=0.00)# notify store manager when qty drops below X quantity\n"],[0,"    "]],"start1":43734,"start2":43734,"length1":125,"length2":8}]],"length":106436,"saved":false}
{"ts":1379257726360,"patch":[[{"diffs":[[0,"it_price"],[1,", state=var_state"],[0,")\n      "]],"start1":44428,"start2":44428,"length1":16,"length2":33}]],"length":106453,"saved":false}
{"ts":1379257762825,"patch":[[{"diffs":[[0,"uired=True)\n    "],[1,"_default_indexed = False\n    pass\n    # Expando\n    #"],[0,"state = ndb.Inte"]],"start1":42241,"start2":42241,"length1":32,"length2":85},{"diffs":[[0,"824\n"],[-1,"    _default_indexed = False\n    pass\n    # Expando\n"],[0,"    "]],"start1":42841,"start2":42841,"length1":60,"length2":8}]],"length":106454,"saved":false}
{"ts":1379257768870,"patch":[[{"diffs":[[0,"do\n    #"],[1," "],[0,"state = "]],"start1":42302,"start2":42302,"length1":16,"length2":17}]],"length":106455,"saved":false}
{"ts":1379257802763,"patch":[[{"diffs":[[0,"s\n    # Expando\n"],[1,"    \n"],[0,"    # state = nd"]],"start1":42289,"start2":42289,"length1":32,"length2":37},{"diffs":[[0,"2473824\n"],[1,"    \n"],[0,"    # mo"]],"start1":42843,"start2":42843,"length1":16,"length2":21}]],"length":106465,"saved":false}
{"ts":1379257852124,"patch":[[{"diffs":[[0,"\n   "],[-1," _default_indexed = False\n    pass\n    # Expando\n    \n    #"],[0," sta"]],"start1":42252,"start2":42252,"length1":67,"length2":8},{"diffs":[[0,"2473824\n    "],[1,"_default_indexed = False\n    pass\n    # Expando"],[0,"\n    # mozda"]],"start1":42784,"start2":42784,"length1":24,"length2":71}]],"length":106453,"saved":false}
{"ts":1379257885871,"patch":[[{"diffs":[[0,"'create', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_te"]],"start1":44593,"start2":44593,"length1":38,"length2":54}]],"length":106469,"saved":false}
{"ts":1379257995819,"patch":[[{"diffs":[[0,"'update', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_te"]],"start1":45428,"start2":45428,"length1":38,"length2":54}]],"length":106485,"saved":false}
{"ts":1379258056185,"patch":[[{"diffs":[[0,"'delete', state="],[-1,"'none'"],[1,"product_template.state"],[0,")\n        object"]],"start1":45895,"start2":45895,"length1":38,"length2":54}]],"length":106501,"saved":false}
{"ts":1379258093792,"patch":[[{"diffs":[[0,"eta, pa se treba"],[-1,"ti"],[0," ustvari pozivat"]],"start1":46144,"start2":46144,"length1":34,"length2":32}]],"length":106499,"saved":false}
{"ts":1379258105454,"patch":[[{"diffs":[[0,"umvea da su svi "],[-1,"potomci"],[1,"children"],[0," izbrisani!!\n   "]],"start1":46414,"start2":46414,"length1":39,"length2":40}]],"length":106500,"saved":false}
{"ts":1379258206619,"patch":[[{"diffs":[[0,"es)\n"],[-1,"        \n        \n        \n        \n"],[0,"    "]],"start1":47015,"start2":47015,"length1":44,"length2":8},{"diffs":[[0," for key in "],[1,"product_template."],[0,"product_temp"]],"start1":47046,"start2":47046,"length1":24,"length2":41}]],"length":106481,"saved":false}
{"ts":1379258232003,"patch":[[{"diffs":[[0,"?\n    # "],[-1,"product_template_"],[0,"variants"]],"start1":42888,"start2":42888,"length1":33,"length2":16},{"diffs":[[0,"x\n    # "],[-1,"product_template_"],[0,"contents"]],"start1":42979,"start2":42979,"length1":33,"length2":16},{"diffs":[[0,"x\n    # "],[-1,"product_template_"],[0,"images ="]],"start1":43070,"start2":43070,"length1":33,"length2":16}]],"length":106430,"saved":false}
{"ts":1379258467120,"patch":[[{"diffs":[[0," 'unpublished'.\n"],[1,"        # brisemo postojece product instance\n"],[0,"        product_"]],"start1":46805,"start2":46805,"length1":32,"length2":77},{"diffs":[[0,"    "],[-1,"variants []\n        for key in product_template.product_template_variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] ="],[1,"# pripremamo listu varianti za"],[0," product"],[-1,"_"],[1," "],[0,"template"],[-1,"_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n       "],[1,"\n        # primer:\n        '''"],[0," var"]],"start1":47017,"start2":47017,"length1":422,"length2":85},{"diffs":[[0,"alse},\n        ]"],[1,"'''\n        variants []\n        for key in product_template.variants:\n            product_template_variant = key.get()\n            dic = {}\n            dic['name'] = product_template_variant.name\n            dic['options'] = product_template_variant.options\n            dic['position'] = 0\n            dic['increment'] = False\n            dic['reset'] = False\n            variants.append(dic)\n        \n        "],[0,"\n               "]],"start1":47596,"start2":47596,"length1":32,"length2":442}]],"length":106548,"saved":false}
{"ts":1379258491175,"patch":[[{"diffs":[[0,"    ]'''"],[1," "],[0,"\n       "]],"start1":47607,"start2":47607,"length1":16,"length2":17}]],"length":106549,"saved":false}
{"ts":1379258494965,"patch":[[{"diffs":[[0,"    ]'''"],[-1," "],[0,"\n       "]],"start1":47607,"start2":47607,"length1":17,"length2":16}]],"length":106548,"saved":false}
{"ts":1379258555985,"patch":[[{"diffs":[[0,"        "],[-1,"'''"],[1,"\"\"\""],[0," variant"]],"start1":47087,"start2":47087,"length1":19,"length2":19},{"diffs":[[0,"       ]"],[-1,"'''"],[1,"\"\"\""],[0,"\n       "]],"start1":47604,"start2":47604,"length1":19,"length2":19}]],"length":106548,"saved":false}
{"ts":1379258604026,"patch":[[{"diffs":[[0,"        "],[-1,"\"\"\""],[1,"#"],[0," variant"]],"start1":47087,"start2":47087,"length1":19,"length2":17},{"diffs":[[0," = [\n           "],[1," #"],[0," {'name': 'Color"]],"start1":47105,"start2":47105,"length1":32,"length2":34},{"diffs":[[0,"se},\n           "],[1," #"],[0," {'name': 'Size'"]],"start1":47226,"start2":47226,"length1":32,"length2":34},{"diffs":[[0,"se},\n           "],[1," #"],[0," {'name': 'Fabri"]],"start1":47350,"start2":47350,"length1":32,"length2":34},{"diffs":[[0,"        "],[1," #"],[0," {'name'"]],"start1":47474,"start2":47474,"length1":16,"length2":18},{"diffs":[[0,"    "],[-1,"]\"\"\""],[1,"# ]"],[0,"\n   "]],"start1":47613,"start2":47613,"length1":12,"length2":11}]],"length":106553,"saved":false}
{"ts":1379258656996,"patch":[[{"diffs":[[0,"e},\n"],[-1,"            # {'name': 'Motif', 'options': ['Lace', 'Smooth', 'ZigZag', 'Butterfly'], 'position': 0, 'increment': False, 'reset': False},\n"],[0,"    "]],"start1":47467,"start2":47467,"length1":146,"length2":8}]],"length":106415,"saved":false}
{"ts":1379258770662,"patch":[[{"diffs":[[0,"    "],[-1,"\n        \n                "],[1,"# generisemo sve moguce kombinacije variacija koje product instance moze imati"],[0,"\n   "]],"start1":47876,"start2":47876,"length1":34,"length2":86},{"diffs":[[0,"y:\n            i"],[-1,"terator"],[0,""],[1,""],[0," = 0\n           "]],"start1":48028,"start2":48028,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['position'] +="]],"start1":48137,"start2":48137,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['increment'] ="]],"start1":48186,"start2":48186,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['posit"]],"start1":48283,"start2":48283,"length1":23,"length2":16},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['reset'] = Fal"]],"start1":48323,"start2":48323,"length1":39,"length2":32},{"diffs":[[0,"               i"],[-1,"terator"],[0," += 1\n          "]],"start1":48359,"start2":48359,"length1":39,"length2":32},{"diffs":[[0,"       i"],[-1,"terator"],[0," = 0\n   "]],"start1":48407,"start2":48407,"length1":23,"length2":16},{"diffs":[[0,"   if (i"],[-1,"terator"],[0,""],[1,""],[0," == 0):\n"]],"start1":48537,"start2":48537,"length1":23,"length2":16},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0,"]['reset'] = Tru"]],"start1":48642,"start2":48642,"length1":39,"length2":32},{"diffs":[[0,"      variants[i"],[-1,"terator"],[0," + 1]['increment"]],"start1":48694,"start2":48694,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['incre"]],"start1":48788,"start2":48788,"length1":23,"length2":16},{"diffs":[[0,"n(variants) == i"],[-1,"terator"],[0," + 1):\n         "]],"start1":48846,"start2":48846,"length1":39,"length2":32},{"diffs":[[0,"  if (variants[i"],[-1,"terator"],[0," - 1]['reset']):"]],"start1":48962,"start2":48962,"length1":39,"length2":32},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,"]['reset"]],"start1":49025,"start2":49025,"length1":23,"length2":16},{"diffs":[[0,"riants[i"],[-1,"terator"],[0," + 1]['i"]],"start1":49081,"start2":49081,"length1":23,"length2":16},{"diffs":[[0,"ts) == i"],[-1,"terator"],[0," + 1):\n "]],"start1":49147,"start2":49147,"length1":23,"length2":16},{"diffs":[[0,"riants[i"],[-1,"terator"],[0,""],[1,""],[0," - 1]['r"]],"start1":49263,"start2":49263,"length1":23,"length2":16},{"diffs":[[0,"   i"],[-1,"terator"],[0,""],[1,""],[0," += "]],"start1":49376,"start2":49376,"length1":15,"length2":8}]],"length":106341,"saved":false}
{"ts":1379259031916,"patch":[[{"diffs":[[0,"e imati\n"],[1,"        # primer:\n        # variant_signatures = [\n            # {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            # {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            # {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            # {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            # {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            # {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            # {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            # {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        # ]\n"],[0,"        "]],"start1":47951,"start2":47951,"length1":16,"length2":1333},{"diffs":[[0,"    "],[-1,"variant_signatures = [\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Silk'},{'name\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Silk'},\n            {'Color': 'Red', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Small', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Medium', 'Fabric': 'Cotton'},\n            {'Color': 'Red', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Green', 'Size': 'Large', 'Fabric': 'Cotton'},\n            {'Color': 'Blue', 'Size': 'Large', 'Fabric': 'Cotton'},\n        ]"],[0,"\n   "]],"start1":50759,"start2":50759,"length1":1258,"length2":8}]],"length":106408,"saved":false}
{"ts":1379259056172,"patch":[[{"diffs":[[0," primer:\n       "],[-1," #"],[0," variants = [\n  "]],"start1":47078,"start2":47078,"length1":34,"length2":32},{"diffs":[[0," = [\n           "],[-1," #"],[0," {'name': 'Color"]],"start1":47103,"start2":47103,"length1":34,"length2":32},{"diffs":[[0,"se},\n           "],[-1," #"],[0," {'name': 'Size'"]],"start1":47222,"start2":47222,"length1":34,"length2":32},{"diffs":[[0,"        "],[-1," #"],[0," {'name'"]],"start1":47352,"start2":47352,"length1":18,"length2":16},{"diffs":[[0," False},\n       "],[-1," #"],[0," ]\n        varia"]],"start1":47454,"start2":47454,"length1":34,"length2":32}]],"length":106398,"saved":false}
{"ts":1379259120170,"patch":[[{"diffs":[[0,"   \n"],[-1,"        \n        \n            # ako nakon ove variante ima jos varianti onda mi treba broj option-sa u varianti i prvi option iz variante, \n            # ali treba zapamtiti redni broj option-a koji je trenutno izabran\n            \n            # \n            # treba mi index ucatne variante i treba mi ukupan broj varianti\n            # ako iza ove \n            for option in product_template_variant.options:\n                \n                \n                \n                \n                \n"],[0,"    "]],"start1":50741,"start2":50741,"length1":504,"length2":8}]],"length":105902,"saved":false}
{"ts":1379259209932,"patch":[[{"diffs":[[0,"primer:\n"],[-1,"        "],[0,"variants"]],"start1":47079,"start2":47079,"length1":24,"length2":16},{"diffs":[[0,"ariants = [\n"],[-1,"        "],[0,"    {'name':"]],"start1":47088,"start2":47088,"length1":32,"length2":24},{"diffs":[[0,"t': False},\n"],[-1,"        "],[0,"    {'name':"]],"start1":47199,"start2":47199,"length1":32,"length2":24},{"diffs":[[0,"False},\n"],[-1,"        "],[0,"    {'na"]],"start1":47317,"start2":47317,"length1":24,"length2":16},{"diffs":[[0,"False},\n"],[-1,"        "],[0,"]\n      "]],"start1":47423,"start2":47423,"length1":24,"length2":16},{"diffs":[[0,"    # ]\n"],[-1,"        "],[0,"variant_"]],"start1":49218,"start2":49218,"length1":24,"length2":16},{"diffs":[[0,"es = []\n"],[-1,"        "],[0,"stay = T"]],"start1":49242,"start2":49242,"length1":24,"length2":16},{"diffs":[[0," = True\n"],[-1,"        "],[0,"while st"]],"start1":49254,"start2":49254,"length1":24,"length2":16},{"diffs":[[0,"e stay:\n"],[-1,"        "],[0,"    i = "]],"start1":49266,"start2":49266,"length1":24,"length2":16},{"diffs":[[0,":\n    i = 0\n"],[-1,"        "],[0,"    for item"]],"start1":49272,"start2":49272,"length1":32,"length2":24},{"diffs":[[0,"ts:\n        "],[-1,"   "],[-1,"     "],[0,"if (item['in"]],"start1":49306,"start2":49306,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1,"     "],[0,"variants[i]["]],"start1":49342,"start2":49342,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[-1,"    "],[0,"variants[i]["]],"start1":49383,"start2":49383,"length1":32,"length2":24},{"diffs":[[0,"lse\n        "],[-1,"    "],[-1,"    "],[0,"if (item['re"]],"start1":49424,"start2":49424,"length1":32,"length2":24},{"diffs":[[0,"['reset']):\n"],[-1,"        "],[0,"            "]],"start1":49444,"start2":49444,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"     "],[-1,"   "],[0,"variants[i]["]],"start1":49496,"start2":49496,"length1":32,"length2":24},{"diffs":[[0,"t'] = False\n"],[-1,"        "],[0,"        i +="]],"start1":49525,"start2":49525,"length1":32,"length2":24},{"diffs":[[0,"     i += 1\n"],[-1,"        "],[0,"    dic = {}"]],"start1":49540,"start2":49540,"length1":32,"length2":24},{"diffs":[[0,"   dic = {}\n"],[-1,"        "],[0,"    i = 0\n  "]],"start1":49553,"start2":49553,"length1":32,"length2":24},{"diffs":[[0,"}\n    i = 0\n"],[-1,"        "],[0,"    for item"]],"start1":49563,"start2":49563,"length1":32,"length2":24},{"diffs":[[0,"n variants:\n"],[-1,"        "],[0,"        dic["]],"start1":49589,"start2":49589,"length1":32,"length2":24},{"diffs":[[0,"tion']]\n"],[-1,"        "],[0,"        "]],"start1":49655,"start2":49655,"length1":24,"length2":16},{"diffs":[[0,"            "],[-1,"        "],[0,"if (len(item"]],"start1":49684,"start2":49684,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"        "],[0,"variants[i]["]],"start1":49751,"start2":49751,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1," "],[-1,"       "],[0,"variants[i +"]],"start1":49795,"start2":49795,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"        "],[0,"else:\n  "]],"start1":49847,"start2":49847,"length1":24,"length2":16},{"diffs":[[0,"            "],[-1,"  "],[-1,"      "],[0,"variants[i]["]],"start1":49865,"start2":49865,"length1":32,"length2":24},{"diffs":[[0,"rue\n        "],[-1,"   "],[-1,"     "],[0,"elif not (le"]],"start1":49905,"start2":49905,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"   "],[-1,"     "],[0,"if (len(item"]],"start1":49952,"start2":49952,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"        "],[0,"if (variants"]],"start1":50019,"start2":50019,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"    "],[-1,"    "],[0,"variants[i]["]],"start1":50070,"start2":50070,"length1":32,"length2":24},{"diffs":[[0,"et'] = True\n"],[-1,"        "],[0,"            "]],"start1":50098,"start2":50098,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"     "],[-1,"   "],[0,"elif (le"]],"start1":50166,"start2":50166,"length1":24,"length2":16},{"diffs":[[0," == i + 1):\n"],[-1,"        "],[0,"            "]],"start1":50193,"start2":50193,"length1":32,"length2":24},{"diffs":[[0,"            "],[-1,"      "],[-1,"  "],[0,"if (variants"]],"start1":50272,"start2":50272,"length1":32,"length2":24},{"diffs":[[0,"        "],[-1,"        "],[0,"stay = F"]],"start1":50327,"start2":50327,"length1":24,"length2":16},{"diffs":[[0,"        "],[-1,"       "],[-1," "],[0,"break\n"],[-1,"        "],[0,"        "]],"start1":50360,"start2":50360,"length1":38,"length2":22},{"diffs":[[0,"     i += 1\n"],[-1,"        "],[0,"    variant_"]],"start1":50377,"start2":50377,"length1":32,"length2":24}]],"length":105590,"saved":false}
{"ts":1379259304950,"patch":[[{"diffs":[[0,"primer:\n"],[1,"        # "],[0,"variants"]],"start1":47079,"start2":47079,"length1":16,"length2":26},{"diffs":[[0,"ants = [\n   "],[1,"         #"],[0," {'name': 'C"]],"start1":47101,"start2":47101,"length1":24,"length2":34},{"diffs":[[0,"et': False},\n   "],[1,"         #"],[0," {'name': 'Size'"]],"start1":47218,"start2":47218,"length1":32,"length2":42},{"diffs":[[0,"se},\n   "],[1,"         #"],[0," {'name'"]],"start1":47350,"start2":47350,"length1":16,"length2":26},{"diffs":[[0,"False},\n"],[1,"        # "],[0,"]\n      "]],"start1":47463,"start2":47463,"length1":16,"length2":26},{"diffs":[[0,"    # ]\n"],[1,"        "],[0,"variant_"]],"start1":49268,"start2":49268,"length1":16,"length2":24},{"diffs":[[0,"es = []\n"],[1,"        "],[0,"stay = T"]],"start1":49300,"start2":49300,"length1":16,"length2":24},{"diffs":[[0," = True\n"],[1,"        "],[0,"while st"]],"start1":49320,"start2":49320,"length1":16,"length2":24},{"diffs":[[0,"e stay:\n"],[1,"        "],[0,"    i = "]],"start1":49340,"start2":49340,"length1":16,"length2":24},{"diffs":[[0,"          i = 0\n"],[1,"        "],[0,"    for item in "]],"start1":49350,"start2":49350,"length1":32,"length2":40},{"diffs":[[0,"riants:\n        "],[1,"   "],[1,"     "],[0,"if (item['increm"]],"start1":49392,"start2":49392,"length1":32,"length2":40},{"diffs":[[0,"]):\n            "],[1,"   "],[1,"     "],[0,"variants[i]['pos"]],"start1":49436,"start2":49436,"length1":32,"length2":40},{"diffs":[[0,"= 1\n            "],[1,"    "],[1,"    "],[0,"variants[i]['inc"]],"start1":49485,"start2":49485,"length1":32,"length2":40},{"diffs":[[0,"= False\n        "],[1,"    "],[1,"    "],[0,"if (item['reset'"]],"start1":49534,"start2":49534,"length1":32,"length2":40},{"diffs":[[0,"item['reset']):\n"],[1,"        "],[0,"            vari"]],"start1":49562,"start2":49562,"length1":32,"length2":40},{"diffs":[[0,"= 0\n            "],[1,"     "],[1,"   "],[0,"variants[i]['res"]],"start1":49622,"start2":49622,"length1":32,"length2":40},{"diffs":[[0,"reset'] = False\n"],[1,"        "],[0,"        i += 1\n "]],"start1":49659,"start2":49659,"length1":32,"length2":40},{"diffs":[[0,"     i += 1\n"],[1,"        "],[0,"    dic = {}"]],"start1":49686,"start2":49686,"length1":24,"length2":32},{"diffs":[[0,"   dic = {}\n"],[1,"        "],[0,"    i = 0\n  "]],"start1":49707,"start2":49707,"length1":24,"length2":32},{"diffs":[[0,"      i = 0\n"],[1,"        "],[0,"    for item"]],"start1":49725,"start2":49725,"length1":24,"length2":32},{"diffs":[[0,"em in variants:\n"],[1,"        "],[0,"        dic[item"]],"start1":49755,"start2":49755,"length1":32,"length2":40},{"diffs":[[0,"tion']]\n"],[1,"        "],[0,"        "]],"start1":49833,"start2":49833,"length1":16,"length2":24},{"diffs":[[0,"0):\n            "],[1,"        "],[0,"if (len(item['op"]],"start1":49866,"start2":49866,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"        "],[0,"variants[i]['res"]],"start1":49941,"start2":49941,"length1":32,"length2":40},{"diffs":[[0,"                "],[1," "],[1,"       "],[0,"variants[i + 1]["]],"start1":49993,"start2":49993,"length1":32,"length2":40},{"diffs":[[0,"        "],[1,"        "],[0,"else:\n  "]],"start1":50057,"start2":50057,"length1":16,"length2":24},{"diffs":[[0,"                "],[1,"  "],[1,"      "],[0,"variants[i]['inc"]],"start1":50079,"start2":50079,"length1":32,"length2":40},{"diffs":[[0,"rue\n        "],[1,"   "],[1,"     "],[0,"elif not (le"]],"start1":50131,"start2":50131,"length1":24,"length2":32},{"diffs":[[0,"1):\n            "],[1,"   "],[1,"     "],[0,"if (len(item['op"]],"start1":50182,"start2":50182,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"        "],[0,"if (variants[i -"]],"start1":50257,"start2":50257,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"    "],[1,"    "],[0,"variants[i]['res"]],"start1":50316,"start2":50316,"length1":32,"length2":40},{"diffs":[[0,"'reset'] = True\n"],[1,"        "],[0,"                "]],"start1":50352,"start2":50352,"length1":32,"length2":40},{"diffs":[[0,"rue\n        "],[1,"     "],[1,"   "],[0,"elif (len(va"]],"start1":50428,"start2":50428,"length1":24,"length2":32},{"diffs":[[0,"nts) == i + 1):\n"],[1,"        "],[0,"            if ("]],"start1":50463,"start2":50463,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"      "],[1,"  "],[0,"if (variants[i -"]],"start1":50550,"start2":50550,"length1":32,"length2":40},{"diffs":[[0,"            "],[1,"        "],[0,"stay = False"]],"start1":50613,"start2":50613,"length1":24,"length2":32},{"diffs":[[0,"                "],[1,"       "],[1," "],[0,"break\n"],[1,"        "],[0,"        i += 1\n "]],"start1":50650,"start2":50650,"length1":38,"length2":54},{"diffs":[[0,"     i += 1\n"],[1,"        "],[0,"    variant_"]],"start1":50691,"start2":50691,"length1":24,"length2":32}]],"length":105912,"saved":false}
{"ts":1379259355653,"patch":[[{"diffs":[[0,"'Silk'},"],[-1,"{'name"],[0,"\n       "]],"start1":48412,"start2":48412,"length1":22,"length2":16}]],"length":105906,"saved":false}
{"ts":1379259671184,"patch":[[{"diffs":[[0,"ic)\n        "],[1,"if (len(variant_signatures) > 1000):\n            "],[0,"\n        pro"]],"start1":50736,"start2":50736,"length1":24,"length2":73}]],"length":105955,"saved":false}
{"ts":1379259740407,"patch":[[{"diffs":[[0,"res.append(dic)\n"],[1,"        # postavljamo limit na broju product instanci koje mogu biti generisane\n"],[0,"        if (len("]],"start1":50724,"start2":50724,"length1":32,"length2":112}]],"length":106035,"saved":false}
{"ts":1379260490821,"patch":[[{"diffs":[[0,"            "],[-1,"\n"],[1,"product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n        else:\n            product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n            i = 0\n            for variant_signature in variant_signatures:\n                \n        "],[0,"        prod"]],"start1":50865,"start2":50865,"length1":25,"length2":756}]],"length":106766,"saved":false}
{"ts":1379260570769,"patch":[[{"diffs":[[0,"            "],[1,"code = product_template_key + \"-\" + i"],[0,"\n           "]],"start1":51588,"start2":51588,"length1":24,"length2":61}]],"length":106803,"saved":false}
{"ts":1379260603155,"patch":[[{"diffs":[[0,"            "],[1,"var_"],[0,"code = produ"]],"start1":51588,"start2":51588,"length1":24,"length2":28},{"diffs":[[0,"var_code"],[-1,", state=var_state"],[0,")\n      "]],"start1":51727,"start2":51727,"length1":33,"length2":16},{"diffs":[[0,"red=True"],[-1,", indexed=False"],[0,") overid"]],"start1":53115,"start2":53115,"length1":31,"length2":16}]],"length":106775,"saved":false}
{"ts":1379260677032,"patch":[[{"diffs":[[0,"r_code)\n"],[1,"        "],[0,"        "]],"start1":51729,"start2":51729,"length1":16,"length2":24},{"diffs":[[0,"_instance.put()\n"],[1,"        "],[0,"        object_l"]],"start1":51783,"start2":51783,"length1":32,"length2":40},{"diffs":[[0,"'create', state="],[-1,"'none'"],[1,"product_template.state"],[0,", log=product_in"]],"start1":51891,"start2":51891,"length1":38,"length2":54},{"diffs":[[0,"oduct_instance)\n"],[1,"        "],[0,"        object_l"]],"start1":51937,"start2":51937,"length1":32,"length2":40}]],"length":106815,"saved":false}
{"ts":1379260708257,"patch":[[{"diffs":[[0,"object_log.put()"],[1,"\n                i += 1"],[0,"\n\n# done!\nclass "]],"start1":51969,"start2":51969,"length1":32,"length2":55}]],"length":106838,"saved":false}
{"ts":1379260771421,"patch":[[{"diffs":[[0,"nerisane"],[1," i na osnovu limida odlucujemo da li pravimo instance ili samo pamtimo broj varijacija"],[0,"\n       "]],"start1":50811,"start2":50811,"length1":16,"length2":102}]],"length":106924,"saved":false}
{"ts":1379260833282,"patch":[[{"diffs":[[0," 'unpublished'.\n"],[1,"        # ova funkcija ce se u potpunosti oslanjati na task queue kako bi se resio problem velikog broja instanci.\n"],[0,"        # brisem"]],"start1":46805,"start2":46805,"length1":32,"length2":147}]],"length":107039,"saved":false}
{"ts":1379260952461,"patch":[[{"diffs":[[0,"nerisane"],[1,","],[0," i na os"]],"start1":50926,"start2":50926,"length1":16,"length2":17},{"diffs":[[0,"ovu limi"],[-1,"d"],[1,"t"],[0,"a odlucu"]],"start1":50944,"start2":50944,"length1":17,"length2":17},{"diffs":[[0,"rijacija"],[1," u product template"],[0,"\n       "]],"start1":51013,"start2":51013,"length1":16,"length2":35}]],"length":107059,"saved":false}
{"ts":1379260987126,"patch":[[{"diffs":[[0,"ic)\n"],[-1,"        # postavljamo limit na broju product instanci koje mogu biti generisane, i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template\n        if (len(variant_signatures) > 1000):\n    "],[0,"    "]],"start1":50851,"start2":50851,"length1":243,"length2":8},{"diffs":[[0,"atures)\n        "],[-1,"    "],[0,"product_template"]],"start1":50921,"start2":50921,"length1":36,"length2":32},{"diffs":[[0,"_template.put()\n"],[-1,"    "],[0,"        object_l"]],"start1":50967,"start2":50967,"length1":36,"length2":32},{"diffs":[[0,"mplate)\n        "],[-1,"    "],[0,"object_log.put()"]],"start1":51121,"start2":51121,"length1":36,"length2":32},{"diffs":[[0,"object_log.put()"],[1,"\n        # postavljamo limit na broju product instanci koje mogu biti generisane, i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template\n        if (len(variant_signatures) > 1000):\n            return"],[0,"\n        else:\n "]],"start1":51137,"start2":51137,"length1":32,"length2":282}]],"length":107062,"saved":false}
{"ts":1379261028991,"patch":[[{"diffs":[[0,"es) "],[-1,">"],[1,"<="],[0," 1000):\n"],[-1,"            return\n        else:\n            product_template.product_instance_count = len(variant_signatures)\n            product_template_key = product_template.put()\n            object_log = ObjectLog(parent=product_template_key, agent=agent_key, action='update', state=product_template.state, log=product_template)\n            object_log.put()\n"],[0,"    "]],"start1":51372,"start2":51372,"length1":365,"length2":18}]],"length":106715,"saved":false}
{"ts":1379261039793,"patch":[[{"diffs":[[0,"sane"],[-1,", i na osnovu limita odlucujemo da li pravimo instance ili samo pamtimo broj varijacija u product template"],[0,"\n   "]],"start1":51229,"start2":51229,"length1":114,"length2":8}]],"length":106609,"saved":false}
{"ts":1379261184829,"patch":[[{"diffs":[[0,"uct instance"],[1," - ovde imamo onaj isti problem oko nelogiranja izbrisanih product-a kao i prilikom brisanja product_template-a"],[0,"\n        pro"]],"start1":46968,"start2":46968,"length1":24,"length2":135},{"diffs":[[0,"nt_key, action='"],[-1,"update"],[1,"generate_product_instances"],[0,"', state=product"]],"start1":51163,"start2":51163,"length1":38,"length2":58}]],"length":106740,"saved":false}
{"ts":1379261190011,"patch":[[{"diffs":[[0,"t-a kao "],[1,"sto je "],[0,"i prilik"]],"start1":47045,"start2":47045,"length1":16,"length2":23}]],"length":106747,"saved":false}
{"ts":1379261226307,"patch":[[{"diffs":[[0,"likog broja "],[1,"pravljenja/brisanja "],[0,"instanci.\n  "]],"start1":46914,"start2":46914,"length1":24,"length2":44}]],"length":106767,"saved":false}
{"ts":1379261598276,"patch":[[{"diffs":[[0,"ce -"],[-1," ovde"],[0," imamo "],[-1,"onaj isti problem oko"],[1,"problem sto se brisanje product instanci"],[0," ne"],[1," "],[0,"log"],[-1,"iranja izbrisanih product-a kao "],[1,"uje\n        product_instances = ProductInstance.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_instances)\n        # brisemo po"],[0,"sto"],[-1," "],[0,"je"],[-1," i prilikom"],[1,"ce product inventory logove - imamo problem sto se"],[0," brisanj"],[-1,"a"],[1,"e"],[0," product"],[-1,"_template-a"],[1," inventory logova ne loguje"],[0,"\n   "]],"start1":46998,"start2":46998,"length1":124,"length2":332},{"diffs":[[0,"      product_in"],[-1,"stance"],[1,"ventory_log"],[0,"s = ProductInsta"]],"start1":47329,"start2":47329,"length1":38,"length2":43},{"diffs":[[0,"logs = ProductIn"],[-1,"stance"],[1,"ventoryLog"],[0,".query(ancestor="]],"start1":47353,"start2":47353,"length1":38,"length2":42},{"diffs":[[0,"i(product_in"],[-1,"stances)"],[1,"ventory_logs)\n        # brisemo postojece product inventory adjustment-e - imamo problem sto se brisanje product inventory adjustment-a ne loguje"],[0,"\n        # p"]],"start1":47462,"start2":47462,"length1":32,"length2":169}]],"length":107121,"saved":false}
{"ts":1379261634659,"patch":[[{"diffs":[[0,"ent-a ne loguje\n"],[1,"        product_inventory_adjustments = ProductInventoryAdjustment.query(ancestor=product_template_key).fetch(keys_only=True)\n        ndb.delete_multi(product_inventory_adjustments)\n"],[0,"        # pripre"]],"start1":47604,"start2":47604,"length1":32,"length2":214}]],"length":107303,"saved":false}
{"ts":1379262915684,"patch":[[{"diffs":[[0,"EFAULT_STATE = '"],[-1,"active"],[1,"unpublished"],[0,"'\n    \n    OBJEC"]],"start1":33228,"start2":33228,"length1":38,"length2":43}]],"length":107308,"saved":false}
{"ts":1379262981512,"patch":[[{"diffs":[[0,"EFAULT_STATE = '"],[-1,"active"],[1,"open"],[0,"'\n    \n    OBJEC"]],"start1":15837,"start2":15837,"length1":38,"length2":36}]],"length":107306,"saved":false}
{"ts":1379263429520,"patch":[[{"diffs":[[0,"    "],[-1,"cost = Decimal"],[1,"state = ndb.Integer"],[0,"Prop"]],"start1":32910,"start2":32910,"length1":22,"length2":27},{"diffs":[[0,"True"],[-1,", "],[1,")\n    _default_"],[0,"indexed"],[-1,"="],[1," = "],[0,"False"],[-1,")"],[0,"\n    "],[-1,"state = ndb.Integer"],[1,"pass\n    # Expando\n    # cost = Decimal"],[0,"Prop"]],"start1":32956,"start2":32956,"length1":48,"length2":82},{"diffs":[[0,"ecimalProperty('"],[-1,"7"],[1,"6"],[0,"', required=True"]],"start1":33028,"start2":33028,"length1":33,"length2":33},{"diffs":[[0,"True"],[-1,")\n    _default_"],[1,", "],[0,"indexed"],[-1," = "],[1,"="],[0,"False"],[-1,"\n    pass\n    # Expando"],[1,")"],[0,"\n   "]],"start1":33057,"start2":33057,"length1":61,"length2":24},{"diffs":[[0,"ija kreira novi "],[-1,"store"],[1,"catalog"],[0,".\n    @ndb.trans"]],"start1":34345,"start2":34345,"length1":37,"length2":39},{"diffs":[[0,"    "],[-1,"store = Store(name=var_name, logo=var_logo, state='open'"],[1,"catalog = Catalog(store=store_key, name=var_name, publish=var_publish, discontinue=var_discontinue, cover=var_cover, cost=var_cost"],[0,")\n  "]],"start1":34581,"start2":34581,"length1":64,"length2":138}]],"length":107384,"saved":false}
{"ts":1379263436984,"patch":[[{"diffs":[[0,"equired=True"],[-1,", indexed=False"],[0,")\n    # Sear"]],"start1":33049,"start2":33049,"length1":39,"length2":24}]],"length":107369,"saved":false}
{"ts":1379263700681,"patch":[[{"diffs":[[0,"dozvolu 'create-"],[-1,"Store"],[1,"Catalog"],[0,"'.\n        # akc"]],"start1":34467,"start2":34467,"length1":37,"length2":39},{"diffs":[[0,"er, "],[-1,"cost=var_cost)\n        store_key = store"],[1,"state='unpublished')\n        catalog_key = catalog"],[0,".put"]],"start1":34685,"start2":34685,"length1":48,"length2":58},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":34768,"start2":34768,"length1":37,"length2":39},{"diffs":[[0,"'create', state="],[-1,"store"],[1,"catalog"],[0,".state, log=stor"]],"start1":34821,"start2":34821,"length1":37,"length2":39},{"diffs":[[0,"alog.state, log="],[-1,"store"],[1,"catalog"],[0,")\n        object"]],"start1":34840,"start2":34840,"length1":37,"length2":39},{"diffs":[[0,"urira postojeci "],[-1,"store"],[1,"catalog"],[0,".\n    @ndb.trans"]],"start1":34914,"start2":34914,"length1":37,"length2":39},{"diffs":[[0,"dozvolu 'update-"],[-1,"Store"],[1,"Catalog"],[0,"'.\n        # akc"]],"start1":35051,"start2":35051,"length1":37,"length2":39},{"diffs":[[0,"e == 'active' i "],[-1,"store"],[1,"catalog"],[0,".state == 'open'"]],"start1":35133,"start2":35133,"length1":37,"length2":39},{"diffs":[[0,"== '"],[-1,"open'.\n        store.name = var_name\n        store.logo = var_logo"],[1,"unpublished'.\n        catalog.store = var_name\n        catalog.name = var_logo\n        catalog.publish = var_publish\n        catalog\n        catalog\n        "],[0,"\n   "]],"start1":35163,"start2":35163,"length1":74,"length2":165},{"diffs":[[0,"bject_log.put()\n"],[1,"        catalog.cover = \n"],[0,"    \n    # Ova a"]],"start1":38277,"start2":38277,"length1":32,"length2":57}]],"length":107509,"saved":false}
{"ts":1379263726295,"patch":[[{"diffs":[[0,"    "],[-1,"cover = blobstore.BlobKey"],[1,"state = ndb.Integer"],[0,"Prop"]],"start1":32818,"start2":32818,"length1":33,"length2":27},{"diffs":[[0,"rue)"],[-1,"# blob ce se implementirati na GCS\n    state = ndb.Integer"],[1,"\n    _default_indexed = False\n    pass\n    # Expando\n    # cover = blobstore.BlobKey"],[0,"Prop"]],"start1":32865,"start2":32865,"length1":66,"length2":92},{"diffs":[[0,"lobKeyProperty('"],[-1,"6"],[1,"5"],[0,"', required=True"]],"start1":32947,"start2":32947,"length1":33,"length2":33},{"diffs":[[0,"rue)"],[-1,"\n    _default_indexed = False\n    pass\n    # Expando"],[1,"# blob ce se implementirati na GCS"],[0,"\n   "]],"start1":32977,"start2":32977,"length1":60,"length2":42}]],"length":107511,"saved":false}
{"ts":1379263739459,"patch":[[{"diffs":[[0,"lobKeyProperty('"],[-1,"5"],[1,"6"],[0,"', required=True"]],"start1":32947,"start2":32947,"length1":33,"length2":33},{"diffs":[[0,"ecimalProperty('"],[-1,"6"],[1,"7"],[0,"', required=True"]],"start1":33030,"start2":33030,"length1":33,"length2":33}]],"length":107511,"saved":false}
{"ts":1379263818625,"patch":[[{"diffs":[[0,"nue,"],[-1," cover=var_cover,"],[0," sta"]],"start1":34669,"start2":34669,"length1":25,"length2":8},{"diffs":[[0,"log.store = var_"],[-1,"nam"],[1,"stor"],[0,"e\n        catalo"]],"start1":35178,"start2":35178,"length1":35,"length2":36},{"diffs":[[0,".name = var_"],[-1,"logo"],[1,"name"],[0,"\n        cat"]],"start1":35215,"start2":35215,"length1":28,"length2":28},{"diffs":[[0," catalog"],[-1,"\n        catalog"],[1,".discontinue = var_discontinue\n        catalog.state = var_state"],[0,"\n       "]],"start1":35277,"start2":35277,"length1":32,"length2":80}]],"length":107543,"saved":false}
{"ts":1379264150734,"patch":[[{"diffs":[[0,"    "],[-1,"\n        store_key = store"],[1,"catalog_key = catalog"],[0,".put"]],"start1":35354,"start2":35354,"length1":34,"length2":29},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":35408,"start2":35408,"length1":37,"length2":39},{"diffs":[[0,"'update', state="],[-1,"store"],[1,"catalog"],[0,".state, log=stor"]],"start1":35461,"start2":35461,"length1":37,"length2":39},{"diffs":[[0,"alog.state, log="],[-1,"store"],[1,"catalog"],[0,")\n        object"]],"start1":35480,"start2":35480,"length1":37,"length2":39},{"diffs":[[0,"alog"],[-1,".cover = "],[1,"_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()"],[0,"\n   "]],"start1":38339,"start2":38339,"length1":17,"length2":329}]],"length":107856,"saved":false}
{"ts":1379264246540,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    \n    # Ova a"]],"start1":37766,"start2":37766,"length1":32,"length2":369},{"diffs":[[0,"age_key.delete()"],[1,"\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()"],[0,"\n\n# done!\nclass "]],"start1":39432,"start2":39432,"length1":32,"length2":369}]],"length":108530,"saved":false}
{"ts":1379264293667,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno)\n"],[0,"        catalog_"]],"start1":37766,"start2":37766,"length1":32,"length2":105}]],"length":108603,"saved":false}
{"ts":1379264351191,"patch":[[{"diffs":[[0,"otrebno)"],[1," - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga"],[0,"\n       "]],"start1":37846,"start2":37846,"length1":16,"length2":112},{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n"],[0,"        catalog_"]],"start1":38818,"start2":38818,"length1":32,"length2":201}]],"length":108868,"saved":false}
{"ts":1379264360104,"patch":[[{"diffs":[[0,"ge_key.delete()\n"],[1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n"],[0,"        catalog_"]],"start1":39771,"start2":39771,"length1":32,"length2":201}]],"length":109037,"saved":false}
{"ts":1379264448570,"patch":[[{"diffs":[[0,"ut()"],[-1,"\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n# "]],"start1":36173,"start2":36173,"length1":653,"length2":8}]],"length":108392,"saved":false}
{"ts":1379264496607,"patch":[[{"diffs":[[0,"kcija za"],[-1,"tvara otvoren store"],[1,"kljucava unpublished catalog"],[0,". Ovde c"]],"start1":35546,"start2":35546,"length1":35,"length2":44},{"diffs":[[0,"ctional\n    def "],[-1,"c"],[0,"lo"],[-1,"se"],[1,"ck"],[0,"():\n        # ov"]],"start1":35647,"start2":35647,"length1":37,"length2":36}]],"length":108400,"saved":false}
{"ts":1379264631008,"patch":[[{"diffs":[[0,"ic dozvolu '"],[-1,"close-Store"],[1,"publish-Catalog"],[0,"'.\n        #"]],"start1":35739,"start2":35739,"length1":35,"length2":39},{"diffs":[[0,"' i "],[-1,"store.state == 'open'."],[1,"catalog.state == 'unpublished'.\n        catalog.state = 'locked'\n        catalog_key = store.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n    "],[1,"\n"],[0,"    "],[-1,"store"],[1,"# Ova akcija objavljuje locked catalog. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def publish():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'publish-Catalog'.\n        # akcija se moze pozvati samo ako je domain"],[0,".state ="],[1,"="],[0," '"],[-1,"clos"],[1,"active' i catalog.state == 'unpublish"],[0,"ed'"],[1,"."],[0,"\n   "]],"start1":35837,"start2":35837,"length1":61,"length2":713},{"diffs":[[0,"ished'.\n        "],[-1,"store"],[1,"catalog.state = 'locked'\n        catalog"],[0,"_key = store.put"]],"start1":36539,"start2":36539,"length1":37,"length2":72},{"diffs":[[0,"bjectLog(parent="],[-1,"store"],[1,"catalog"],[0,"_key, agent=agen"]],"start1":36636,"start2":36636,"length1":37,"length2":39},{"diffs":[[0,"nt_key, action='"],[-1,"c"],[0,"lo"],[-1,"se"],[1,"ck"],[0,"', state=store.s"]],"start1":36674,"start2":36674,"length1":37,"length2":36},{"diffs":[[0,"n='lock', state="],[-1,"store"],[1,"catalog"],[0,".state, message="]],"start1":36687,"start2":36687,"length1":37,"length2":39}]],"length":109094,"saved":false}
{"ts":1379264667971,"patch":[[{"diffs":[[0,"  catalog_key = "],[-1,"store"],[1,"catalog"],[0,".put()\n        o"]],"start1":35912,"start2":35912,"length1":37,"length2":39},{"diffs":[[0,"g.state == '"],[-1,"unpublish"],[1,"lock"],[0,"ed'.\n       "]],"start1":36523,"start2":36523,"length1":33,"length2":28},{"diffs":[[0,"atalog.state = '"],[-1,"lock"],[1,"publish"],[0,"ed'\n        cata"]],"start1":36553,"start2":36553,"length1":36,"length2":39},{"diffs":[[0,"talog_key = "],[-1,"store"],[1,"catalog"],[0,".put()\n     "]],"start1":36590,"start2":36590,"length1":29,"length2":31}]],"length":109096,"saved":false}
{"ts":1379264759301,"patch":[[{"diffs":[[0,"nt_key, action='"],[-1,"lock"],[1,"publish', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija prekida objavljen catalog. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def discontinue():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'discontinue-Catalog'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'published'.\n        catalog.state = 'discontinued'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='discontinue"],[0,"', state=catalog"]],"start1":36676,"start2":36676,"length1":36,"length2":734}]],"length":109794,"saved":false}
{"ts":1379264819978,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        # radimo update catalog-a sa novim cover-om\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    \n    # Ova a"]],"start1":36192,"start2":36192,"length1":32,"length2":421}]],"length":110183,"saved":false}
{"ts":1379264850114,"patch":[[{"diffs":[[0,"d'.\n"],[-1,"        catalog.state = 'locked'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n"],[0,"    "]],"start1":35869,"start2":35869,"length1":343,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        # zakljucavamo catalog\n        catalog.state = 'locked'\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='lock', state=catalog.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n        \n"],[0,"    \n    # Ova a"]],"start1":36246,"start2":36246,"length1":32,"length2":407}]],"length":110223,"saved":false}
{"ts":1379264947156,"patch":[[{"diffs":[[0,"cover-om"],[1," - ovde cemo verovatno raditi i presnimavanje entiteta iz store-a za koji je zakacen catalog, i svega ostalog sto je neophodno."],[0,"\n       "]],"start1":35916,"start2":35916,"length1":16,"length2":143}]],"length":110350,"saved":false}
{"ts":1379264991314,"patch":[[{"diffs":[[0,"t()\n    "],[-1,"    \n    "],[0,""],[1,""],[0,"\n    # O"]],"start1":36751,"start2":36751,"length1":25,"length2":16},{"diffs":[[0,"t()\n"],[-1,"        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n"],[0,"    "]],"start1":39082,"start2":39082,"length1":514,"length2":8},{"diffs":[[0,"    "],[-1,"    # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put()\n    \n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete()\n        # radimo update catalog-a sa novim cover-om (ako je to potrebno) - za sada ne znam bolji nacin od ovog, jedino da eventualno to bude prilikom publish-a cataloga\n        catalog_cover = CatalogImage.query(ancestor=catalog_key).order(CatalogImage.sequence).fetch(1, keys_only=True)\n        catalog.cover = catalog_cover\n        catalog_key = catalog.put()\n        object_log = ObjectLog(parent=catalog_key, agent=agent_key, action='update', state=catalog.state, log=catalog)\n        object_log.put"],[1,"\n    # Ova akcija brise sliku.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-CatalogImage'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        object_log = ObjectLog(parent=catalog_image_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        catalog_image_key.delete"],[0,"()\n\n"]],"start1":39632,"start2":39632,"length1":1460,"length2":448}]],"length":108823,"saved":false}
{"ts":1379265068396,"patch":[[{"diffs":[[0,", ),\n    }\n    \n"],[1,"    # nedostaju akcije za dupliciranje catalog-a, za clean-up, etc...\n"],[0,"    OBJECT_ACTIO"]],"start1":33804,"start2":33804,"length1":32,"length2":102}]],"length":108893,"saved":false}
{"ts":1379265101469,"patch":[[{"diffs":[[0,"nstance\n\n# done!"],[1," - ovde ce nam trebati kontrola"],[0,"\nclass Catalog(n"]],"start1":32393,"start2":32393,"length1":32,"length2":63}]],"length":108924,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379278251884,"patch":[[{"diffs":[[0,"!\nclass "],[-1,"Role"],[1,"Domain"],[0,"User(ndb"]],"start1":10397,"start2":10397,"length1":20,"length2":22},{"diffs":[[0,"  # "],[-1,"ancestor Role"],[1,"root"],[0," (na"]],"start1":10435,"start2":10435,"length1":21,"length2":12}]],"length":108917,"saved":false}
{"ts":1379278387920,"patch":[[{"diffs":[[0,"tor:"],[-1,"yes - user"],[1,"no - name\n    name = ndb.StringProperty('1', required=True)"],[0,"\n   "]],"start1":10585,"start2":10585,"length1":18,"length2":67},{"diffs":[[0,"db.KeyProperty('"],[-1,"1"],[1,"2"],[0,"', kind=User, re"]],"start1":10661,"start2":10661,"length1":33,"length2":33},{"diffs":[[0," required=True)\n"],[1,"    roles = ndb.KeyProperty('2', kind=Role, repeated=True)\n"],[0,"    state = ndb."]],"start1":10691,"start2":10691,"length1":32,"length2":91},{"diffs":[[0,"ntegerProperty('"],[-1,"2"],[1,"3"],[0,"', required=True"]],"start1":10783,"start2":10783,"length1":33,"length2":33}]],"length":109025,"saved":false}
{"ts":1379278505319,"patch":[[{"diffs":[[0,"quired=True)"],[1,"# ovo je deskriptiv koji administratoru sluzi kako bi lakse spoznao usera"],[0,"\n    user = "]],"start1":10636,"start2":10636,"length1":24,"length2":97},{"diffs":[[0,"EFAULT_STATE = '"],[-1,"none"],[1,"invited"],[0,"'\n    \n    OBJEC"]],"start1":10945,"start2":10945,"length1":36,"length2":39}]],"length":109101,"saved":false}
{"ts":1379279940595,"patch":[[{"diffs":[[0,"ainUser(ndb."],[-1,"Model"],[1,"Expando"],[0,"):\n    \n    "]],"start1":10408,"start2":10408,"length1":29,"length2":31},{"diffs":[[0,"db.KeyProperty('"],[-1,"2"],[1,"3"],[0,"', kind=Role, re"]],"start1":10795,"start2":10795,"length1":33,"length2":33},{"diffs":[[0,"ntegerProperty('"],[-1,"3"],[1,"4"],[0,"', required=True"]],"start1":10858,"start2":10858,"length1":33,"length2":33}]],"length":109103,"saved":false}
{"ts":1379279982432,"patch":[[{"diffs":[[0,"ccepted\n"],[1,"    _default_indexed = False\n    pass\n    #Expando\n"],[0,"    \n   "]],"start1":10903,"start2":10903,"length1":16,"length2":67}]],"length":109154,"saved":false}
{"ts":1379280086285,"patch":[[{"diffs":[[0,"'invite-"],[-1,"Role"],[1,"Domain"],[0,"User'.\n "]],"start1":11924,"start2":11924,"length1":20,"length2":22},{"diffs":[[0,"r = "],[-1,"RoleUser(parent=role_key, "],[1,"DomainUser("],[0,"id='"]],"start1":12032,"start2":12032,"length1":34,"length2":19},{"diffs":[[0,"472829',"],[1," name=var_name,"],[0," user='1"]],"start1":12057,"start2":12057,"length1":16,"length2":31}]],"length":109156,"saved":false}
{"ts":1379280098925,"patch":[[{"diffs":[[0,"e, user="],[-1,"'123673472829'"],[1,"var_user"],[0,", state="]],"start1":12078,"start2":12078,"length1":30,"length2":24}]],"length":109150,"saved":false}
{"ts":1379280151852,"patch":[[{"diffs":[[0,"ctive'.\n        "],[-1,"role"],[1,"domain"],[0,"_user = DomainUs"]],"start1":12008,"start2":12008,"length1":36,"length2":38},{"diffs":[[0,"(id="],[-1,"'123673472829'"],[1,"var_user.id()"],[0,", na"]],"start1":12048,"start2":12048,"length1":22,"length2":21}]],"length":109151,"saved":false}
{"ts":1379280358137,"patch":[[{"diffs":[[0,"a novog usera u "],[-1,"rol"],[1,"domen"],[0,"u\n    @ndb.trans"]],"start1":11783,"start2":11783,"length1":35,"length2":37},{"diffs":[[0,"vited')\n        "],[-1,"role"],[1,"domain"],[0,"_user_key = role"]],"start1":12108,"start2":12108,"length1":36,"length2":38},{"diffs":[[0,"main_user_key = "],[-1,"role"],[1,"domain"],[0,"_user.put()\n    "]],"start1":12126,"start2":12126,"length1":36,"length2":38},{"diffs":[[0,"bjectLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, agent"]],"start1":12182,"start2":12182,"length1":36,"length2":38},{"diffs":[[0,"'invite', state="],[-1,"role"],[1,"domain"],[0,"_user.state, log"]],"start1":12239,"start2":12239,"length1":36,"length2":38},{"diffs":[[0,"te, log="],[-1,"role"],[1,"domain"],[0,"_user)\n "]],"start1":12270,"start2":12270,"length1":20,"length2":22},{"diffs":[[0,"vanje u "],[-1,"Rol"],[1,"Domen"],[0,"u.\n    \n"]],"start1":12383,"start2":12383,"length1":19,"length2":21},{"diffs":[[0,"sera iz "],[-1,"rol"],[1,"domen"],[0,"e\n    @n"]],"start1":12430,"start2":12430,"length1":19,"length2":21},{"diffs":[[0,"'remove-"],[-1,"Role"],[1,"Domain"],[0,"User', i"]],"start1":12565,"start2":12565,"length1":20,"length2":22},{"diffs":[[0,"ran u entitetu ("],[-1,"role"],[1,"domain"],[0,"_user.user == ag"]],"start1":12613,"start2":12613,"length1":36,"length2":38},{"diffs":[[0,"bjectLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, agent"]],"start1":12867,"start2":12867,"length1":36,"length2":38},{"diffs":[[0,"'remove', state="],[-1,"role"],[1,"domain"],[0,"_user.state)\n   "]],"start1":12924,"start2":12924,"length1":36,"length2":38},{"diffs":[[0,"    "],[-1,"role_user_key.delete()\n        key = ndb.Key(namespace=domain_key, parent=role_user.user, str(role_key.id()))\n        # ovaj delete nece uspeti ukoliko entitet ne postoji, napr: ako je role_user.state == 'invited'\n        "],[1,"domain_user_"],[0,"key."]],"start1":12988,"start2":12988,"length1":230,"length2":20}]],"length":108965,"saved":false}
{"ts":1379280671536,"patch":[[{"diffs":[[0,"er_key.delete()\n"],[1,"        user = domain_user.user.get()\n        for role in domain_user.roles:\n            user.roles.remove(role)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()\n"],[0,"    \n    # Prihv"]],"start1":13001,"start2":13001,"length1":32,"length2":300}]],"length":109233,"saved":false}
{"ts":1379280732066,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        domain_user_key.delete()\n"],[0,"    "]],"start1":12980,"start2":12980,"length1":41,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        domain_user_key.delete()\n"],[0,"    \n    # Prihv"]],"start1":13236,"start2":13236,"length1":32,"length2":65}]],"length":109233,"saved":false}
{"ts":1379280766241,"patch":[[{"diffs":[[0,"e'.\n"],[-1,"        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n"],[0,"    "]],"start1":12841,"start2":12841,"length1":147,"length2":8},{"diffs":[[0,"bject_log.put()\n"],[1,"        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n"],[0,"        domain_u"]],"start1":13097,"start2":13097,"length1":32,"length2":171}]],"length":109233,"saved":false}
{"ts":1379280817503,"patch":[[{"diffs":[[0,"ar_user,"],[1," roles=var_roles,"],[0," state='"]],"start1":12090,"start2":12090,"length1":16,"length2":33},{"diffs":[[0,"usera u "],[-1,"rol"],[1,"domen"],[0,"u\n    @n"]],"start1":13334,"start2":13334,"length1":19,"length2":21}]],"length":109252,"saved":false}
{"ts":1379280857684,"patch":[[{"diffs":[[0,"User(id="],[1,"str("],[0,"var_user"]],"start1":12046,"start2":12046,"length1":16,"length2":20},{"diffs":[[0,"ser.id()"],[1,")"],[0,", name=v"]],"start1":12063,"start2":12063,"length1":16,"length2":17}]],"length":109257,"saved":false}
{"ts":1379281002213,"patch":[[{"diffs":[[0,"titetu ("],[-1,"role"],[1,"domain"],[0,"_user.us"]],"start1":13466,"start2":13466,"length1":20,"length2":22},{"diffs":[[0,"e'.\n        "],[-1,"role"],[1,"domain"],[0,"_user.state "]],"start1":13569,"start2":13569,"length1":28,"length2":30},{"diffs":[[0,"cepted'\n        "],[-1,"role"],[1,"domain"],[0,"_user_key = role"]],"start1":13604,"start2":13604,"length1":36,"length2":38},{"diffs":[[0,"main_user_key = "],[-1,"role"],[1,"domain"],[0,"_user.put()\n    "]],"start1":13622,"start2":13622,"length1":36,"length2":38},{"diffs":[[0,"tLog(parent="],[-1,"role"],[1,"domain"],[0,"_user_key, a"]],"start1":13682,"start2":13682,"length1":28,"length2":30},{"diffs":[[0,", state="],[-1,"role"],[1,"domain"],[0,"_user.st"]],"start1":13743,"start2":13743,"length1":20,"length2":22},{"diffs":[[0,"bject_log.put()\n"],[1,"        user = domain_user.user.get()\n        for role in domain_user.roles:\n            user.roles.append(role)\n"],[0,"        user_rol"]],"start1":13779,"start2":13779,"length1":32,"length2":145}]],"length":109382,"saved":false}
{"ts":1379281024154,"patch":[[{"diffs":[[0,"ser_"],[-1,"role = Role(parent=role_user.user, id=str(role_key.id()), name='~', permissions=['~',], readonly='True/False')\n        user_role"],[1,"key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log"],[0,".put"]],"start1":13917,"start2":13917,"length1":136,"length2":143}]],"length":109389,"saved":false}
{"ts":1379281118709,"patch":[[{"diffs":[[0,"user.user.get()\n"],[1,"        if (user.state == 'active'):\n    "],[0,"        for role"]],"start1":12889,"start2":12889,"length1":32,"length2":73},{"diffs":[[0,"es:\n            "],[1,"  "],[1,"  "],[0,"user.roles.remov"]],"start1":12981,"start2":12981,"length1":32,"length2":36},{"diffs":[[0,"e(role)\n        "],[1,"    "],[0,"user_key = user."]],"start1":13017,"start2":13017,"length1":32,"length2":36},{"diffs":[[0,"ey = user.put()\n"],[1,"    "],[0,"        object_l"]],"start1":13043,"start2":13043,"length1":32,"length2":36},{"diffs":[[0,"ate=user.state)\n"],[1,"    "],[0,"        object_l"]],"start1":13147,"start2":13147,"length1":32,"length2":36}]],"length":109446,"saved":false}
{"ts":1379281153699,"patch":[[{"diffs":[[0,"user.user.get()\n"],[1,"        if (user.state == 'active'):\n            for role in domain_user.roles:\n                user.roles.append(role)\n            user_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n        \n"],[0,"        for role"]],"start1":13874,"start2":13874,"length1":32,"length2":328}]],"length":109742,"saved":false}
{"ts":1379281172229,"patch":[[{"diffs":[[0,"ut()"],[-1,"\n        \n        for role in domain_user.roles:\n            user.roles.append(role)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()"],[0,"\n\n# "]],"start1":14172,"start2":14172,"length1":247,"length2":8}]],"length":109503,"saved":false}
{"ts":1379281195025,"patch":[[{"diffs":[[0,"ccept' : 3,\n"],[1,"       'update' : 4,\n"],[0,"    }\n    \n "]],"start1":11610,"start2":11610,"length1":24,"length2":45}]],"length":109524,"saved":false}
{"ts":1379281265736,"patch":[[{"diffs":[[0,"ct_log.put()"],[1,"\n    \n    # Azurira postojeceg usera u domeni\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'remove-DomainUser', ili agent koji je referenciran u entitetu (domain_user.user == agent).\n        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        user = domain_user.user.get()\n        if (user.state == 'active'):\n            for role in domain_user.roles:\n                user.roles.remove(role)\n            user_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n        domain_user_key.delete()"],[0,"\n\n# future i"]],"start1":14185,"start2":14185,"length1":24,"length2":966}]],"length":110466,"saved":false}
{"ts":1379281277910,"patch":[[{"diffs":[[0,"ecific dozvolu '"],[-1,"remov"],[1,"updat"],[0,"e-DomainUser', i"]],"start1":14348,"start2":14348,"length1":37,"length2":37},{"diffs":[[0,"ser'"],[-1,", ili agent koji je referenciran u entitetu (domain_user.user == agent)"],[0,".\n  "]],"start1":14378,"start2":14378,"length1":79,"length2":8}]],"length":110395,"saved":false}
{"ts":1379281295480,"patch":[[{"diffs":[[0,"r'.\n"],[-1,"        # agent koji je referenciran u domain.primary_contact prop. ne moze izgubiti dozvole za upravljanje domenom.\n"],[0,"    "]],"start1":14380,"start2":14380,"length1":125,"length2":8}]],"length":110278,"saved":false}
{"ts":1379281311669,"patch":[[{"diffs":[[0,"oze "],[-1,"izgu"],[0,"biti "],[-1,"dozvole za upravljanje"],[1,"izbacen iz"],[0," domen"],[-1,"om"],[1,"e"],[0,".\n  "]],"start1":12772,"start2":12772,"length1":47,"length2":30}]],"length":110261,"saved":false}
{"ts":1379281340846,"patch":[[{"diffs":[[0,"z domene"],[1," i izgubiti dozvole za upravljanje domenom"],[0,".\n      "]],"start1":12790,"start2":12790,"length1":16,"length2":58}]],"length":110303,"saved":false}
{"ts":1379281494973,"patch":[[{"diffs":[[0,"te == 'active'.\n"],[1,"        old_roles = domain_user.roles\n        new_roles = var_roles\n        domain_user.name = var_name\n        domain_user.roles = var_roles\n        domain_user_key = domain_user.put()\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='update', state=domain_user.state)\n        object_log.put()\n"],[0,"        user = d"]],"start1":14464,"start2":14464,"length1":32,"length2":357},{"diffs":[[0,"user.user.get()\n"],[-1,""],[0,"        if (user"]],"start1":14827,"start2":14827,"length1":32,"length2":32},{"diffs":[[0,"ate=user.state)\n"],[1,""],[0,"            obje"]],"start1":15085,"start2":15085,"length1":32,"length2":32},{"diffs":[[0,"ut()"],[-1,"\n        object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='remove', state=domain_user.state)\n        object_log.put()\n        domain_user_key.delete()"],[0,"\n\n# "]],"start1":15125,"start2":15125,"length1":180,"length2":8}]],"length":110456,"saved":false}
{"ts":1379281532419,"patch":[[{"diffs":[[0,"for role in "],[-1,"domain_user."],[1,"old_roles:\n                user.roles.remove(role)\n            for role in new_"],[0,"roles:\n     "]],"start1":14892,"start2":14892,"length1":36,"length2":103},{"diffs":[[0,"     user.roles."],[-1,"remove"],[1,"append"],[0,"(role)\n         "]],"start1":15001,"start2":15001,"length1":38,"length2":38}]],"length":110523,"saved":false}
{"ts":1379281625153,"patch":[[{"diffs":[[0,"    "],[-1,"old_roles = domain_user.roles"],[1,"# cuvamo stare role korisnika kako bi ih prvo sve izbacili iz liste user-ovih rola\n        old_roles = domain_user.roles\n        # cuvamo nove role korisnika kako bi ih posle sve ubacili u listu user-ovih rola"],[0,"\n   "]],"start1":14484,"start2":14484,"length1":37,"length2":217}]],"length":110703,"saved":false}
{"ts":1379282320179,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n        object"]],"start1":14942,"start2":14942,"length1":32,"length2":49}]],"length":110720,"saved":false}
{"ts":1379282353697,"patch":[[{"diffs":[[0,"    "],[-1,"# cuvamo stare role korisnika kako bi ih prvo sve izbacili iz liste user-ovih rola\n        old_roles = domain_user.roles\n        # cuvamo nove role korisnika kako bi ih posle sve ubacili u listu user-ovih rola"],[1,"old_roles = domain_user.roles"],[0,"\n   "]],"start1":14484,"start2":14484,"length1":217,"length2":37}]],"length":110540,"saved":false}
{"ts":1379282424808,"patch":[[{"diffs":[[0,"les\n"],[-1,"        new_roles = var_roles\n"],[0,"    "]],"start1":14514,"start2":14514,"length1":38,"length2":8},{"diffs":[[0,"role in "],[-1,"new_"],[1,"domain_user."],[0,"roles:\n "]],"start1":14958,"start2":14958,"length1":20,"length2":28}]],"length":110518,"saved":false}
{"ts":1379282467007,"patch":[[{"diffs":[[0,"?\nclass "],[1,"Domain"],[0,"Role(ndb"]],"start1":7423,"start2":7423,"length1":16,"length2":22}]],"length":110524,"saved":false}
{"ts":1379282502753,"patch":[[{"diffs":[[0,"ctive'.\n        "],[1,"domain_"],[0,"role = "],[1,"Domain"],[0,"Role(name='Store"]],"start1":8440,"start2":8440,"length1":39,"length2":52},{"diffs":[[0,"d Roles\n        "],[1,"domain_"],[0,"role_key = role."]],"start1":8608,"start2":8608,"length1":32,"length2":39},{"diffs":[[0,"main_role_key = "],[1,"domain_"],[0,"role.put()\n     "]],"start1":8626,"start2":8626,"length1":32,"length2":39},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":8682,"start2":8682,"length1":32,"length2":39},{"diffs":[[0,"ate='none', log="],[1,"domain_"],[0,"role)\n        ob"]],"start1":8751,"start2":8751,"length1":32,"length2":39}]],"length":110565,"saved":false}
{"ts":1379282515083,"patch":[[{"diffs":[[0,"one!"],[-1," mozda napraviti DomainUser u kojem je repeated prop. Roles, i onda u Expando od User modela dodati struct prop Roles(Domain, Roles)?"],[0,"\ncla"]],"start1":7287,"start2":7287,"length1":141,"length2":8}]],"length":110432,"saved":false}
{"ts":1379282611083,"patch":[[{"diffs":[[0,"vi novu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n   "]],"start1":8095,"start2":8095,"length1":16,"length2":23},{"diffs":[[0,"olu 'create-"],[-1,""],[0,""],[1,"Domain"],[0,"Role'. \n    "]],"start1":8231,"start2":8231,"length1":24,"length2":30},{"diffs":[[0,"urira postojecu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n    @ndb.tr"]],"start1":8698,"start2":8698,"length1":32,"length2":39},{"diffs":[[0,"'update-"],[1,"Domain"],[0,"Role'.\n "]],"start1":8846,"start2":8846,"length1":16,"length2":22},{"diffs":[[0,"e'.\n        "],[1,"domain_"],[0,"role.name = "]],"start1":8934,"start2":8934,"length1":24,"length2":31},{"diffs":[[0,"rs'\n        "],[1,"domain_"],[0,"role.permiss"]],"start1":8982,"start2":8982,"length1":24,"length2":31},{"diffs":[[0,"tore',]\n        "],[1,"domain_"],[0,"role_key = role."]],"start1":9030,"start2":9030,"length1":32,"length2":39},{"diffs":[[0,"main_role_key = "],[1,"domain_"],[0,"role.put()\n     "]],"start1":9048,"start2":9048,"length1":32,"length2":39},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":9104,"start2":9104,"length1":32,"length2":39},{"diffs":[[0,"e', log="],[1,"domain_"],[0,"role)\n  "]],"start1":9181,"start2":9181,"length1":16,"length2":23},{"diffs":[[0,"_log"],[-1,".put()\n        role_users = RoleUser.query(ancestor=role_key).fetch(projection=[RoleUser.user,])\n        # ovo uraditi sa taskletima u async radi optimizacije\n        for role_user in role_users:\n            key = ndb.Key(namespace=domain_key, parent=role_user, str(role_key.id()))\n            user_role = key.get()\n            user_role.name = role.name\n            user_role.permissions = role.permissions\n            user_role"],[0,".put"]],"start1":9216,"start2":9216,"length1":437,"length2":8},{"diffs":[[0,"'delete-"],[1,"Domain"],[0,"Role'.\n "]],"start1":9379,"start2":9379,"length1":16,"length2":22}]],"length":110077,"saved":false}
{"ts":1379283056158,"patch":[[{"diffs":[[0,"stojecu "],[-1,""],[0,""],[1,"domain "],[0,"rolu\n   "]],"start1":9246,"start2":9246,"length1":16,"length2":23},{"diffs":[[0,"bjectLog(parent="],[1,"domain_"],[0,"role_key, agent="]],"start1":9500,"start2":9500,"length1":32,"length2":39},{"diffs":[[0,"t()\n        "],[-1,"role"],[1,"# projection=[DomainUser.user,]\n        domain"],[0,"_users = Rol"]],"start1":9602,"start2":9602,"length1":28,"length2":70},{"diffs":[[0,"users = "],[-1,"Role"],[1,"Domain"],[0,"User.que"]],"start1":9661,"start2":9661,"length1":20,"length2":22},{"diffs":[[0,"ery("],[-1,"ancestor=role_key).fetch(projection=[RoleUser.user,]"],[1,"roles == domain_role_key).fetch("],[0,")\n  "]],"start1":9682,"start2":9682,"length1":60,"length2":40},{"diffs":[[0,"    for "],[-1,"role"],[1,"domain"],[0,"_user in"]],"start1":9743,"start2":9743,"length1":20,"length2":22},{"diffs":[[0,"user in "],[-1,"role"],[1,"domain"],[0,"_users:\n"]],"start1":9758,"start2":9758,"length1":20,"length2":22},{"diffs":[[0,"    "],[-1,"key = ndb.Key(namespace=domain_key, parent=role_user, str("],[1,"domain_user.roles.remove(domain_"],[0,"role_key"],[-1,".id())"],[0,")\n  "]],"start1":9788,"start2":9788,"length1":80,"length2":48},{"diffs":[[0,"    "],[-1,"roles.append(key)\n        ndb.delete_multi(roles)\n        ndb.delete_multi(role_users"],[1,"user = domain_user.get()\n            user.roles.remove(domain_role_key)\n            domain_user.put()\n            user.put("],[0,")\n  "]],"start1":9842,"start2":9842,"length1":93,"length2":131},{"diffs":[[0,"r.put()\n        "],[1,"domain_"],[0,"role_key.delete("]],"start1":9963,"start2":9963,"length1":32,"length2":39}]],"length":110132,"saved":false}
{"ts":1379283300882,"patch":[[{"diffs":[[0,"  # "],[-1,"projection=[DomainUser.user,]"],[0,"\n   "]],"start1":9612,"start2":9612,"length1":37,"length2":8},{"diffs":[[0,"fetch()\n"],[1,"        user_keys = DomainUser.query(roles == domain_role_key).fetch(projection=[DomainUser.user,])\n        users = ndb.get_multi(user_keys)\n"],[0,"        "]],"start1":9683,"start2":9683,"length1":16,"length2":157}]],"length":110244,"saved":false}
{"ts":1379283451160,"patch":[[{"diffs":[[0,"t()\n"],[-1,"        # \n"],[0,"    "]],"start1":9602,"start2":9602,"length1":19,"length2":8},{"diffs":[[0,"s = "],[-1,"D"],[1,"[]\n        for d"],[0,"omain"],[-1,"User.query(roles == domain_role_key).fetch(projection=[D"],[1,"_user in domain_users:\n            domain_user.roles.remove(domain_role_key)\n            user_keys.append(d"],[0,"omain"],[-1,"U"],[1,"_u"],[0,"ser.user"],[-1,",]"],[1,")\n            domain_user.put("],[0,")\n  "]],"start1":9696,"start2":9696,"length1":86,"length2":181},{"diffs":[[0,"    "],[-1,"roles = []\n        for domain_"],[1,"for "],[0,"user in "],[-1,"domain_"],[0,"user"]],"start1":9920,"start2":9920,"length1":53,"length2":20},{"diffs":[[0,"user"],[-1," = domain_user.get()\n            user.roles.remove(domain_role_key"],[1,"_keys.append(domain_user.user"],[0,")\n  "]],"start1":10009,"start2":10009,"length1":74,"length2":37},{"diffs":[[0,"    "],[-1,"    user.put()"],[1,""],[0,"\n   "]],"start1":10078,"start2":10078,"length1":22,"length2":8}]],"length":110244,"saved":false}
{"ts":1379283505478,"patch":[[{"diffs":[[0,"omain_role_key)\n"],[1,"            domain_user.put()\n"],[0,"            user"]],"start1":9782,"start2":9782,"length1":32,"length2":62},{"diffs":[[0,"er)\n"],[-1,"            domain_user.put()\n"],[0,"    "]],"start1":9871,"start2":9871,"length1":38,"length2":8},{"diffs":[[0,"rs:\n            "],[-1,"domain_"],[0,"user.roles.remov"]],"start1":9939,"start2":9939,"length1":39,"length2":32},{"diffs":[[0,"user"],[-1,"_keys.append(domain_user.user)\n            domain_user.put()\n        "],[1,".put()"],[0,"\n   "]],"start1":10002,"start2":10002,"length1":77,"length2":14}]],"length":110174,"saved":false}
{"ts":1379283638461,"patch":[[{"diffs":[[0,"     domain_user"],[1,"_key = domain_user.put()\n            object_log = ObjectLog(parent=domain_user_key, agent=agent_key, action='update', state=domain_user.state)\n            object_log"],[0,".put()\n         "]],"start1":9805,"start2":9805,"length1":32,"length2":197},{"diffs":[[0,"        user"],[-1,".put()"],[1,"_key = user.put()\n            object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n            object_log.put()\n            "],[0,"\n        dom"]],"start1":10159,"start2":10159,"length1":30,"length2":187}]],"length":110496,"saved":false}
{"ts":1379283727188,"patch":[[{"diffs":[[0,"r in users:\n"],[1,"            if (user.state == 'active'):\n"],[0,"            "]],"start1":10096,"start2":10096,"length1":24,"length2":65}]],"length":110537,"saved":false}
{"ts":1379283733878,"patch":[[{"diffs":[[0,"'):\n            "],[1,"    "],[0,"user.roles.remov"]],"start1":10145,"start2":10145,"length1":32,"length2":36},{"diffs":[[0,"ey)\n            "],[1,"    "],[0,"user_key = user."]],"start1":10196,"start2":10196,"length1":32,"length2":36},{"diffs":[[0,"ey = user.put()\n"],[1,"    "],[0,"            obje"]],"start1":10222,"start2":10222,"length1":32,"length2":36},{"diffs":[[0,"ate=user.state)\n"],[1,"    "],[0,"            obje"]],"start1":10330,"start2":10330,"length1":32,"length2":36}]],"length":110553,"saved":false}
{"ts":1379283795745,"patch":[[{"diffs":[[0,"te == 'active'.\n"],[1,"        user = var_user.get()\n        if (user.state == 'active'):\n    "],[0,"        domain_u"]],"start1":12058,"start2":12058,"length1":32,"length2":103},{"diffs":[[0,"vited')\n        "],[1,"    "],[0,"domain_user_key "]],"start1":12257,"start2":12257,"length1":32,"length2":36},{"diffs":[[0,"r.put()\n        "],[1,"  "],[1,"  "],[0,"object_log = Obj"]],"start1":12305,"start2":12305,"length1":32,"length2":36},{"diffs":[[0,"n_user)\n        "],[1,"    "],[0,"object_log.put()"]],"start1":12440,"start2":12440,"length1":32,"length2":36},{"diffs":[[0,"bject_log.put()\n"],[1,"    "],[0,"        # salje "]],"start1":12461,"start2":12461,"length1":32,"length2":36}]],"length":110640,"saved":false}
{"ts":1379284173255,"patch":[[{"diffs":[[0,"ati kontrola"],[1," - treba odluciti konvenciju imenovanja objekata!"],[0,"\nclass Domai"]],"start1":3169,"start2":3169,"length1":24,"length2":73}]],"length":110689,"saved":false}
{"ts":1379284250614,"patch":[[{"diffs":[[0,"ame="],[-1,"'deskriptivno ime po zelji kreatora'"],[1,"var_name"],[0,", pr"]],"start1":4675,"start2":4675,"length1":44,"length2":16},{"diffs":[[0,"e = "],[-1,"'promenjeno ime od strane administratora domene'"],[1,"var_name"],[0,"\n   "]],"start1":5601,"start2":5601,"length1":56,"length2":16}]],"length":110621,"saved":false}
{"ts":1379284737224,"patch":[[{"diffs":[[0,"        "],[1,"domain_"],[0,"role = "],[1,"Domain"],[0,"Role(nam"]],"start1":4905,"start2":4905,"length1":23,"length2":36},{"diffs":[[0,"ue)\n        "],[1,"domain_"],[0,"role_key = r"]],"start1":5013,"start2":5013,"length1":24,"length2":31},{"diffs":[[0,"_role_key = "],[1,"domain_"],[0,"role.put()\n "]],"start1":5031,"start2":5031,"length1":24,"length2":31},{"diffs":[[0,"    "],[-1,"role"],[1,"domain"],[0,"_user = "],[-1,"RoleUser(parent=role_key, user=user_key"],[1,"DomainUser(namespace=domain_key, id=str(user_key.id()), name='Administrator', user=user_key, roles=[domain_role_key,]"],[0,", st"]],"start1":5065,"start2":5065,"length1":59,"length2":139},{"diffs":[[0,"        "],[-1,"role"],[1,"domain"],[0,"_user_ke"]],"start1":5220,"start2":5220,"length1":20,"length2":22},{"diffs":[[0,"r_key = "],[-1,"role"],[1,"domain"],[0,"_user.pu"]],"start1":5238,"start2":5238,"length1":20,"length2":22},{"diffs":[[0,"    "],[-1,"user_role = Role(namespace"],[1,"object_log = ObjectLog(parent"],[0,"=domain_"],[1,"user_"],[0,"key, "],[-1,"par"],[1,"ag"],[0,"ent="],[-1,"role_user.user, id=str(role_key.id()), name='Domain Admins', permissions=['*',], readonly=True)\n        user_role.put()"],[1,"agent_key, action='accept', state=domain_user.state)\n        object_log.put()\n        user = user_key.get()\n        user.roles.append(domain_role_key)\n        user_key = user.put()\n        object_log = ObjectLog(parent=user_key, agent=agent_key, action='update', state=user.state)\n        object_log.put()\n        "],[0,"\n   "]],"start1":5268,"start2":5268,"length1":173,"length2":375}]],"length":110934,"saved":false}
{"ts":1379284944766,"patch":[[{"diffs":[[0,"main_role.put()\n"],[1,"        object_log = ObjectLog(parent=domain_role_key, agent=agent_key, action='create', state='none', log=domain_role)\n        object_log.put()\n"],[0,"        domain_u"]],"start1":5045,"start2":5045,"length1":32,"length2":177}]],"length":111079,"saved":false}
{"ts":1379285052526,"patch":[[{"diffs":[[0,"role_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='cr"]],"start1":5106,"start2":5106,"length1":37,"length2":36},{"diffs":[[0,"user_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='ac"]],"start1":5453,"start2":5453,"length1":37,"length2":36},{"diffs":[[0,"user_key, agent="],[-1,"agent"],[1,"user"],[0,"_key, action='up"]],"start1":5687,"start2":5687,"length1":37,"length2":36}]],"length":111076,"saved":false}
{"ts":1379285101386,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n        object"]],"start1":5503,"start2":5503,"length1":32,"length2":49}]],"length":111093,"saved":false}
{"ts":1379285113604,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n        object"]],"start1":5747,"start2":5747,"length1":32,"length2":42}]],"length":111103,"saved":false}
{"ts":1379285180077,"patch":[[{"diffs":[[0,"omain_user.state"],[1,", log=domain_user"],[0,")\n            ob"]],"start1":10409,"start2":10409,"length1":32,"length2":49},{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n              "]],"start1":10808,"start2":10808,"length1":32,"length2":42}]],"length":111130,"saved":false}
{"ts":1379285207914,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":13803,"start2":13803,"length1":32,"length2":42}]],"length":111140,"saved":false}
{"ts":1379285216585,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":14798,"start2":14798,"length1":32,"length2":42}]],"length":111150,"saved":false}
{"ts":1379285237902,"patch":[[{"diffs":[[0,"state=user.state"],[1,", log=user"],[0,")\n            ob"]],"start1":15777,"start2":15777,"length1":32,"length2":42}]],"length":111160,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379333300309,"patch":[[{"diffs":[[0,"ategory,"],[-1,"stat"],[1,"activ"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":20,"length2":21},{"diffs":[[0," required=True)\n"],[1,"    active = ndb.BooleanProperty('6', default=False)\n"],[0,"    state = ndb."]],"start1":103116,"start2":103116,"length1":32,"length2":85},{"diffs":[[0,"ublished"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n    }\n    \n    # Ova akcija kreira novi product content.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content = ProductContent(parent=catalog_key, title=var_title, body=var_body)\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='create', state='none', log=product_content)\n        object_log.put()\n    \n    # Ova akcija azurira product content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'.\n        product_content.title = var_title\n        product_content.body = var_body\n        product_content_key = product_content.put()\n        object_log = ObjectLog(parent=product_content_key, agent=agent_key, action='update', state='none', log=product_content)\n        object_log.put()"],[0,"\n\n# done"]],"start1":103251,"start2":103251,"length1":16,"length2":1331}]],"length":112529,"saved":false}
{"ts":1379333354590,"patch":[[{"diffs":[[0,"ategory,"],[-1,"activ"],[1,"stat"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":21,"length2":20},{"diffs":[[0,"ue)\n"],[-1,"    active = ndb.BooleanProperty('6', default=False)\n"],[0,"    "]],"start1":103127,"start2":103127,"length1":61,"length2":8}]],"length":112475,"saved":false}
{"ts":1379333483756,"patch":[[{"diffs":[[0,"ategory,"],[-1,"stat"],[1,"activ"],[0,"e,sequen"]],"start1":102829,"start2":102829,"length1":20,"length2":21},{"diffs":[[0,"ue)\n    "],[-1,"stat"],[1,"activ"],[0,"e = ndb."],[-1,"Integer"],[1,"Boolean"],[0,"Property"]],"start1":103128,"start2":103128,"length1":35,"length2":36},{"diffs":[[0,"6', "],[-1,"required=True)# published/unpublished"],[1,"default=False)"],[0,"\n   "]],"start1":103166,"start2":103166,"length1":45,"length2":22},{"diffs":[[0,"kreira novi "],[-1,"product "],[0,"content.\n   "]],"start1":103341,"start2":103341,"length1":32,"length2":24}]],"length":112446,"saved":false}
{"ts":1379333505603,"patch":[[{"diffs":[[0,"  'update' : 2,\n"],[1,"       'delete' : 3,\n"],[0,"    }\n    \n    #"]],"start1":103297,"start2":103297,"length1":32,"length2":53}]],"length":112467,"saved":false}
{"ts":1379333582091,"patch":[[{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'cr"]],"start1":103467,"start2":103467,"length1":39,"length2":32},{"diffs":[[0,"ate-"],[-1,"ProductContent'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished"],[1,"Content"],[0,"'.\n "]],"start1":103500,"start2":103500,"length1":126,"length2":15}]],"length":112349,"saved":false}
{"ts":1379333633183,"patch":[[{"diffs":[[0,"t = "],[-1,"Product"],[0,"Content("],[-1,"parent=catalog_key, title=var_title, body=var_body"],[1,"title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_active"],[0,")\n  "]],"start1":103536,"start2":103536,"length1":73,"length2":111}]],"length":112387,"saved":false}
{"ts":1379333803307,"patch":[[{"diffs":[[0,"t'.\n        "],[-1,"product_"],[0,"content = Co"]],"start1":103510,"start2":103510,"length1":32,"length2":24},{"diffs":[[0,"ve)\n        "],[-1,"product_"],[0,"content_key "]],"start1":103633,"start2":103633,"length1":32,"length2":24},{"diffs":[[0,"ntent_key = "],[-1,"product_"],[0,"content.put("]],"start1":103647,"start2":103647,"length1":32,"length2":24},{"diffs":[[0,"tLog(parent="],[-1,"product_"],[0,"content_key,"]],"start1":103699,"start2":103699,"length1":32,"length2":24},{"diffs":[[0,"'none', log="],[-1,"product_"],[0,"content)\n   "]],"start1":103764,"start2":103764,"length1":32,"length2":24},{"diffs":[[0,"ija azurira "],[-1,"product "],[0,"content.\n   "]],"start1":103828,"start2":103828,"length1":32,"length2":24},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'up"]],"start1":103933,"start2":103933,"length1":39,"length2":32},{"diffs":[[0,"dozvolu 'update-"],[-1,"Product"],[0,"Content'.\n      "]],"start1":103954,"start2":103954,"length1":39,"length2":32},{"diffs":[[0,"    "],[-1,"# akcija se moze pozvati samo ako je domain.state == 'active' i catalog.state == 'unpublished'."],[1,"content.title = var_title\n        content.category = var_category\n        content.body = var_body"],[0,"\n   "]],"start1":103984,"start2":103984,"length1":103,"length2":105},{"diffs":[[0,"    "],[-1,"product_"],[0,"content."],[-1,"titl"],[1,"sequenc"],[0,"e = var_"],[-1,"titl"],[1,"sequenc"],[0,"e\n  "]],"start1":104090,"start2":104090,"length1":40,"length2":38},{"diffs":[[0,"    "],[-1,"product_"],[0,"content."],[-1,"body"],[1,"active"],[0," = var_"],[-1,"body"],[1,"active"],[0,"\n   "]],"start1":104130,"start2":104130,"length1":39,"length2":35},{"diffs":[[0,"ive\n        "],[-1,"product_"],[0,"content_key "]],"start1":104158,"start2":104158,"length1":32,"length2":24},{"diffs":[[0,"ntent_key = "],[-1,"product_"],[0,"content.put("]],"start1":104172,"start2":104172,"length1":32,"length2":24},{"diffs":[[0,"tLog(parent="],[-1,"product_"],[0,"content_key,"]],"start1":104224,"start2":104224,"length1":32,"length2":24},{"diffs":[[0,"'none', log="],[-1,"product_"],[0,"content)\n   "]],"start1":104289,"start2":104289,"length1":32,"length2":24},{"diffs":[[0,"  object_log.put"],[1,"()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Content'.\n        object_log = ObjectLog(parent=tax_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        tax_key.delete"],[0,"()\n\n# done!\nclas"]],"start1":104316,"start2":104316,"length1":32,"length2":352}]],"length":112609,"saved":false}
{"ts":1379333821816,"patch":[[{"diffs":[[0,"bjectLog(parent="],[-1,"tax"],[1,"content"],[0,"_key, agent=agen"]],"start1":104532,"start2":104532,"length1":35,"length2":39},{"diffs":[[0,"g.put()\n        "],[-1,"tax"],[1,"content"],[0,"_key.delete()\n\n#"]],"start1":104626,"start2":104626,"length1":35,"length2":39}]],"length":112617,"saved":false}
{"ts":1379334048412,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi country.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-Country'.\n        country = Country(code=var_code, name=var_name, active=var_active)\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='create', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija azurira country.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Country'.\n        country.code = var_code\n        country.name = var_name\n        country.active = var_active\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='update', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Country'.\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        content_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":105832,"start2":105832,"length1":32,"length2":1380}]],"length":113965,"saved":false}
{"ts":1379334176327,"patch":[[{"diffs":[[0,"uired=True)\n    "],[-1,"state"],[1,"availability"],[0," = ndb.IntegerPr"]],"start1":46098,"start2":46098,"length1":37,"length2":44},{"diffs":[[0,"  # "],[-1,"states"],[1,"availability"],[0,": - "]],"start1":46239,"start2":46239,"length1":14,"length2":20},{"diffs":[[0,"ce, "],[-1,"state=var_state"],[1,"availability=var_availability"],[0,")\n  "]],"start1":48253,"start2":48253,"length1":23,"length2":37},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":48434,"start2":48434,"length1":38,"length2":22},{"diffs":[[0,"emplate."],[-1,"state = var_state"],[1,"availability = var_availability"],[0,"\n       "]],"start1":49081,"start2":49081,"length1":33,"length2":47},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":49267,"start2":49267,"length1":38,"length2":22}]],"length":113974,"saved":false}
{"ts":1379334350876,"patch":[[{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,")\n      "]],"start1":49718,"start2":49718,"length1":38,"length2":22},{"diffs":[[0,", state="],[-1,"product_template.state"],[1,"'none'"],[0,", log=pr"]],"start1":55619,"start2":55619,"length1":38,"length2":22},{"diffs":[[0,"ate="],[-1,"product_template.state"],[1,"'none'"],[0,", lo"]],"start1":56202,"start2":56202,"length1":30,"length2":14},{"diffs":[[0,"o\n    # "],[-1,"state"],[1,"availability"],[0," = ndb.I"]],"start1":57415,"start2":57415,"length1":21,"length2":28},{"diffs":[[0,"overide "],[-1,"state"],[1,"availability"],[0," vrednos"]],"start1":57478,"start2":57478,"length1":21,"length2":28},{"diffs":[[0,"nstance."],[-1,"state"],[1,"availability"],[0," i produ"]],"start1":59087,"start2":59087,"length1":21,"length2":28},{"diffs":[[0,"ate="],[-1,"product_instance.state"],[1,"'none'"],[0,", lo"]],"start1":59337,"start2":59337,"length1":30,"length2":14}]],"length":113931,"saved":false}
{"ts":1379334416455,"patch":[[{"diffs":[[0,"ectLog(parent=co"],[-1,"ntent"],[1,"untry"],[0,"_key, agent=agen"]],"start1":107034,"start2":107034,"length1":37,"length2":37},{"diffs":[[0,"put()\n        co"],[-1,"ntent"],[1,"untry"],[0,"_key.delete()\n\n#"]],"start1":107128,"start2":107128,"length1":37,"length2":37}]],"length":113931,"saved":false}
{"ts":1379334793689,"patch":[[{"diffs":[[0,"', default=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi country subdivision.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-CountrySubdivision'.\n        country_subdivision = CountrySubdivision(parent=country_key, parent_record=var_parent_record, code=var_code, name=var_name, type=var_type, active=var_active)\n        country_subdivision_key = country_subdivision.put()\n        object_log = ObjectLog(parent=country_subdivision_key, agent=agent_key, action='create', state='none', log=country_subdivision)\n        object_log.put()\n    \n    # Ova akcija azurira country.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Country'.\n        country.code = var_code\n        country.name = var_name\n        country.active = var_active\n        country_key = country.put()\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='update', state='none', log=country)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'delete-Country'.\n        object_log = ObjectLog(parent=country_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        country_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":107988,"start2":107988,"length1":32,"length2":1542}]],"length":115441,"saved":false}
{"ts":1379334911619,"patch":[[{"diffs":[[0," azurira country"],[-1,""],[0,""],[1," subdivision"],[0,".\n    @ndb.trans"]],"start1":108765,"start2":108765,"length1":32,"length2":44},{"diffs":[[0," 'update-Country"],[1,"Subdivision"],[0,"'.\n        count"]],"start1":108907,"start2":108907,"length1":32,"length2":43},{"diffs":[[0,"\n        country"],[1,"_subdivision.parent_record = var_parent_record\n        country_subdivision"],[0,".code = var_code"]],"start1":108936,"start2":108936,"length1":32,"length2":106},{"diffs":[[0,"\n        country"],[1,"_subdivision"],[0,".name = var_name"]],"start1":109042,"start2":109042,"length1":32,"length2":44},{"diffs":[[0,"\n        country"],[1,"_subdivision.type = var_type\n        country_subdivision"],[0,".active = var_ac"]],"start1":109086,"start2":109086,"length1":32,"length2":88},{"diffs":[[0,"        country_"],[1,"subdivision_"],[0,"key = country.pu"]],"start1":109179,"start2":109179,"length1":32,"length2":44},{"diffs":[[0,"on_key = country"],[1,"_subdivision"],[0,".put()\n        o"]],"start1":109204,"start2":109204,"length1":32,"length2":44},{"diffs":[[0,"(parent=country_"],[1,"subdivision_"],[0,"key, agent=agent"]],"start1":109269,"start2":109269,"length1":32,"length2":44},{"diffs":[[0,"ne', log=country"],[1,"_subdivision"],[0,")\n        object"]],"start1":109345,"start2":109345,"length1":32,"length2":44},{"diffs":[[0," 'delete-Country"],[1,"Subdivision"],[0,"'.\n        objec"]],"start1":109556,"start2":109556,"length1":32,"length2":43},{"diffs":[[0,"(parent=country_"],[1,"subdivision_"],[0,"key, agent=agent"]],"start1":109616,"start2":109616,"length1":32,"length2":44},{"diffs":[[0,"        country_"],[1,"subdivision_"],[0,"key.delete()\n\n# "]],"start1":109722,"start2":109722,"length1":32,"length2":44}]],"length":115689,"saved":false}
{"ts":1379335025173,"patch":[[{"diffs":[[0," akcija brise co"],[-1,"ntent"],[1,"untry"],[0,".\n    @ndb.trans"]],"start1":106849,"start2":106849,"length1":37,"length2":37},{"diffs":[[0," akcija brise co"],[1,"u"],[0,"nt"],[-1,"ent"],[1,"ry subdivision"],[0,".\n    @ndb.trans"]],"start1":109414,"start2":109414,"length1":37,"length2":49}]],"length":115701,"saved":false}
{"ts":1379335159244,"patch":[[{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":104422,"start2":104422,"length1":39,"length2":32},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":106949,"start2":106949,"length1":39,"length2":32},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'de"]],"start1":109519,"start2":109519,"length1":39,"length2":32}]],"length":115680,"saved":false}
{"ts":1379335577759,"patch":[[{"diffs":[[0,"cestor:no - stat"],[-1,"e"],[1,"us"],[0,",name\n    parent"]],"start1":110632,"start2":110632,"length1":33,"length2":34},{"diffs":[[0,"n query\n    stat"],[-1,"e"],[1,"us"],[0," = ndb.IntegerPr"]],"start1":110890,"start2":110890,"length1":33,"length2":34},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductCategory'.\n        product_category = ProductCategory(parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status)\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='create', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija azurira product category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductCategory'.\n        product_category.parent_record = var_parent_record\n        product_category.name = var_name\n        product_category.complete_name = var_complete_name\n        product_category.status = var_status\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='update', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija brise product category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductCategory'.\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_category_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":110934,"start2":110934,"length1":32,"length2":1686}]],"length":117336,"saved":false}
{"ts":1379335863569,"patch":[[{"diffs":[[0,"bject_log.put()\n"],[1,"        country_subdivisions = CountrySubdivision.query(ancestor=country_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog country_subdivision entiteta, pa se trebati ustvari pozivati CountrySubdivision.delete() sa listom kljuceva.\n        # CountrySubdivision.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog Country entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(country_subdivisions)\n"],[0,"        country_"]],"start1":107104,"start2":107104,"length1":32,"length2":574},{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductCategory'.\n        product_category = ProductCategory(parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status)\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='create', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija azurira product category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductCategory'.\n        product_category.parent_record = var_parent_record\n        product_category.name = var_name\n        product_category.complete_name = var_complete_name\n        product_category.status = var_status\n        product_category_key = product_category.put()\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='update', state='none', log=product_category)\n        object_log.put()\n    \n    # Ova akcija brise product category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductCategory'.\n        object_log = ObjectLog(parent=product_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_category_key.delete()"],[0,"\n\n# done!\nclass "]],"start1":113469,"start2":113469,"length1":32,"length2":1686}]],"length":119532,"saved":false}
{"ts":1379336043951,"patch":[[{"diffs":[[0,"ra novi product "],[-1,""],[0,""],[1,"uom "],[0,"category.\n    @n"]],"start1":113667,"start2":113667,"length1":32,"length2":36},{"diffs":[[0," 'create-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":113809,"start2":113809,"length1":32,"length2":35},{"diffs":[[0,"        product_"],[1,"uom_"],[0,"category = Produ"]],"start1":113839,"start2":113839,"length1":32,"length2":36},{"diffs":[[0,"tegory = Product"],[1,"UOM"],[0,"Category(parent_"]],"start1":113861,"start2":113861,"length1":32,"length2":35},{"diffs":[[0,"ory("],[-1,"parent_record=var_parent_record, name=var_name, complete_name=var_complete_name, status=var_status"],[1,"name=var_name"],[0,")\n  "]],"start1":113885,"start2":113885,"length1":106,"length2":21},{"diffs":[[0,"        product_"],[1,"uom_"],[0,"category_key = p"]],"start1":113904,"start2":113904,"length1":32,"length2":36},{"diffs":[[0,"y_key = product_"],[1,"uom_"],[0,"category.put()\n "]],"start1":113931,"start2":113931,"length1":32,"length2":36},{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":113996,"start2":113996,"length1":32,"length2":36},{"diffs":[[0,"e', log=product_"],[1,"uom_"],[0,"category)\n      "]],"start1":114074,"start2":114074,"length1":32,"length2":36},{"diffs":[[0,"azurira product "],[1,"uom "],[0,"category.\n    @n"]],"start1":114151,"start2":114151,"length1":32,"length2":36},{"diffs":[[0," 'update-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":114293,"start2":114293,"length1":32,"length2":35},{"diffs":[[0,"uct_"],[-1,"category.parent_record = var_parent_record\n        product_category.name = var_name\n        product"],[1,"uom"],[0,"_cat"]],"start1":114335,"start2":114335,"length1":107,"length2":11},{"diffs":[[0,"om_category."],[-1,"complete_"],[0,"name = var_c"]],"start1":114340,"start2":114340,"length1":33,"length2":24},{"diffs":[[0,".name = var_"],[-1,"complete_"],[0,"name\n       "]],"start1":114351,"start2":114351,"length1":33,"length2":24},{"diffs":[[0,"uct_"],[-1,"category.status = var_status\n        product"],[1,"uom"],[0,"_cat"]],"start1":114380,"start2":114380,"length1":52,"length2":11},{"diffs":[[0,"y_key = product_"],[1,"uom_"],[0,"category.put()\n "]],"start1":114395,"start2":114395,"length1":32,"length2":36},{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":114460,"start2":114460,"length1":32,"length2":36},{"diffs":[[0,"e', log=product_"],[1,"uom_"],[0,"category)\n      "]],"start1":114538,"start2":114538,"length1":32,"length2":36},{"diffs":[[0,"a brise product "],[1,"uom "],[0,"category.\n    @n"]],"start1":114613,"start2":114613,"length1":32,"length2":36},{"diffs":[[0," 'delete-Product"],[1,"UOM"],[0,"Category'.\n     "]],"start1":114755,"start2":114755,"length1":32,"length2":35}]],"length":119348,"saved":false}
{"ts":1379336282190,"patch":[[{"diffs":[[0,"(parent=product_"],[1,"uom_"],[0,"category_key, ag"]],"start1":114815,"start2":114815,"length1":32,"length2":36},{"diffs":[[0,"        product_"],[1,"uoms = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_"],[0,"category_key.del"]],"start1":114922,"start2":114922,"length1":32,"length2":554},{"diffs":[[0,"', default=True)"],[1,"\n    "],[0,"\n\n# done!\nclass "]],"start1":116633,"start2":116633,"length1":32,"length2":37}]],"length":119879,"saved":false}
{"ts":1379336449049,"patch":[[{"diffs":[[0,"ue)\n    "],[1,"\n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi product uom category.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-ProductUOMCategory'.\n        product_uom = ProductUOM(parent=product_uom_category_key, name=var_name, symbol=var_symbol, rate=var_rate, factor=var_factor, rounding=var_rounding, digits=var_digits, active=var_active)\n        product_uom_category_key = product_uom_category.put()\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='create', state='none', log=product_uom_category)\n        object_log.put()\n    \n    # Ova akcija azurira product uom category.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-ProductUOMCategory'.\n        product_uom_category.name = var_name\n        product_uom_category_key = product_uom_category.put()\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='update', state='none', log=product_uom_category)\n        object_log.put()\n    \n    # Ova akcija brise product uom category.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-ProductUOMCategory'.\n        object_log = ObjectLog(parent=product_uom_category_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        product_uoms = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_category_key.delete()"],[0,"\n\n# done"]],"start1":116646,"start2":116646,"length1":16,"length2":2137}]],"length":122000,"saved":false}
{"ts":1379336460853,"patch":[[{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":116838,"start2":116838,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        p"]],"start1":116971,"start2":116971,"length1":32,"length2":24}]],"length":121983,"saved":false}
{"ts":1379336774168,"patch":[[{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key = produc"]],"start1":117189,"start2":117189,"length1":33,"length2":24},{"diffs":[[0," product_uom"],[-1,"_category"],[0,".put()\n     "]],"start1":117206,"start2":117206,"length1":33,"length2":24},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":117263,"start2":117263,"length1":33,"length2":24},{"diffs":[[0,"=product_uom"],[-1,"_category"],[0,")\n        ob"]],"start1":117331,"start2":117331,"length1":33,"length2":24},{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":117399,"start2":117399,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        p"]],"start1":117532,"start2":117532,"length1":32,"length2":24},{"diffs":[[0," product_uom"],[-1,"_category"],[0,".name = var_"]],"start1":117554,"start2":117554,"length1":33,"length2":24},{"diffs":[[0,"_uom"],[-1,"_category_key = product_uom_category"],[1,".symbol = var_symbol\n        product_uom.rate = var_rate\n        product_uom.factor = var_factor\n        product_uom.rounding = var_rounding\n        product_uom.digits = var_digits\n        product_uom.active = var_active\n        product_uom_key = product_uom"],[0,".put"]],"start1":117598,"start2":117598,"length1":44,"length2":266},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":117905,"start2":117905,"length1":33,"length2":24},{"diffs":[[0,"=product_uom"],[-1,"_category"],[0,")\n        ob"]],"start1":117973,"start2":117973,"length1":33,"length2":24},{"diffs":[[0," product uom"],[-1," category"],[0,".\n    @ndb.t"]],"start1":118039,"start2":118039,"length1":33,"length2":24},{"diffs":[[0,"e-ProductUOM"],[-1,"Category"],[0,"'.\n        o"]],"start1":118172,"start2":118172,"length1":32,"length2":24},{"diffs":[[0,"product_uom_"],[-1,"category_"],[0,"key, agent=a"]],"start1":118225,"start2":118225,"length1":33,"length2":24},{"diffs":[[0,"_uom"],[-1,"s = ProductUOM.query(ancestor=product_uom_category_key).fetch(keys_only=True)\n        # ovaj metod ne loguje brisanje pojedinacno svakog product_uom entiteta, pa se trebati ustvari pozivati ProductUOM.delete() sa listom kljuceva.\n        # ProductUOM.delete() nije za sada nije opisana da radi multi key delete.\n        # a mozda je ta tehnika nepotrebna, posto se logovanje brisanja samog ProductUOMCategory entiteta podrazumvea da su svi potomci izbrisani!!\n        ndb.delete_multi(product_uoms)\n        product_uom_category"],[0,"_key"]],"start1":118330,"start2":118330,"length1":535,"length2":8}]],"length":121572,"saved":false}
{"ts":1379336998217,"patch":[[{"diffs":[[0,", indexed=False)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'none'\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'delete' : 3,\n    }\n    \n    # Ova akcija kreira novi currency.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'create-Content'.\n        currency = Currency(title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_active)\n        content_key = content.put()\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='create', state='none', log=content)\n        object_log.put()\n    \n    # Ova akcija azurira content.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'update-Content'.\n        content.title = var_title\n        content.category = var_category\n        content.body = var_body\n        content.sequence = var_sequence\n        content.active = var_active\n        content_key = content.put()\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='update', state='none', log=content)\n        object_log.put()\n    \n    # Ova akcija brise content.\n    @ndb.transactional\n    def delete():\n        # ovu akciju moze izvrsiti samo agent koji ima globalnu dozvolu 'delete-Content'.\n        object_log = ObjectLog(parent=content_key, agent=agent_key, action='delete', state='none')\n        object_log.put()\n        content_key.delete()"],[0,"\n\n# done!\n# osta"]],"start1":120152,"start2":120152,"length1":32,"length2":1506}]],"length":123046,"saved":false}
{"ts":1379337541431,"patch":[[{"diffs":[[0,"ozvolu 'create-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        curre"]],"start1":120474,"start2":120474,"length1":38,"length2":39},{"diffs":[[0,"ncy("],[-1,"title=var_title, category=var_category, body=var_body, sequence=var_sequence, active=var_activ"],[1,"name=var_name, symbol=var_symbol, code=var_code, numeric_code=var_numeric_code, \n        rounding=var_rounding, digits=var_digits, active=var_active, grouping=var_grouping, decimal_separator=var_decimal_separator, \n        thousands_separator=var_thousands_separator, positive_sign_position=var_positive_sign_position, negative_sign_position=var_negative_sign_position,\n        positive_sign=var_positive_sign, negative_sign=var_negative_sign, positive_currency_symbol_precedes=var_positive_currency_symbol_precedes,\n        negative_currency_symbol_precedes=var_negative_currency_symbol_precedes, positive_separate_by_space=var_positive_separate_by_space, negative_separate_by_space=var_negative_separate_by_spac"],[0,"e)\n "]],"start1":120524,"start2":120524,"length1":102,"length2":721},{"diffs":[[0,"       c"],[-1,"ontent"],[1,"urrency"],[0,"_key = c"],[-1,"ontent"],[1,"urrency"],[0,".put()\n "]],"start1":121245,"start2":121245,"length1":36,"length2":38},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":121305,"start2":121305,"length1":38,"length2":39},{"diffs":[[0,"te='none', log=c"],[-1,"ontent"],[1,"urrency"],[0,")\n        object"]],"start1":121371,"start2":121371,"length1":38,"length2":39},{"diffs":[[0,"akcija azurira c"],[-1,"ontent"],[1,"urrency"],[0,".\n    @ndb.trans"]],"start1":121436,"start2":121436,"length1":38,"length2":39},{"diffs":[[0,"ozvolu 'update-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        conte"]],"start1":121567,"start2":121567,"length1":38,"length2":39},{"diffs":[[0,"       c"],[-1,"ontent"],[1,"urrency"],[0,"_key = c"],[-1,"ontent"],[1,"urrency"],[0,".put()\n "]],"start1":121776,"start2":121776,"length1":36,"length2":38},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":121836,"start2":121836,"length1":38,"length2":39},{"diffs":[[0,"te='none', log=c"],[-1,"ontent"],[1,"urrency"],[0,")\n        object"]],"start1":121902,"start2":121902,"length1":38,"length2":39},{"diffs":[[0,"a akcija brise c"],[-1,"ontent"],[1,"urrency"],[0,".\n    @ndb.trans"]],"start1":121965,"start2":121965,"length1":38,"length2":39},{"diffs":[[0,"ozvolu 'delete-C"],[-1,"ontent"],[1,"urrency"],[0,"'.\n        objec"]],"start1":122096,"start2":122096,"length1":38,"length2":39},{"diffs":[[0,"jectLog(parent=c"],[-1,"ontent"],[1,"urrency"],[0,"_key, agent=agen"]],"start1":122145,"start2":122145,"length1":38,"length2":39},{"diffs":[[0,".put()\n        c"],[-1,"ontent"],[1,"urrency"],[0,"_key.delete()\n\n#"]],"start1":122240,"start2":122240,"length1":38,"length2":39}]],"length":123680,"saved":false}
{"ts":1379337786241,"patch":[[{"diffs":[[0,"urrency("],[1,")\n        currency."],[0,"name"],[-1,"="],[1," = "],[0,"var_name"],[-1,", "],[1,"\n        currency."],[0,"symbol"],[-1,"="],[1," = "],[0,"var_symb"]],"start1":120520,"start2":120520,"length1":38,"length2":77},{"diffs":[[0,"r_symbol"],[-1,", code=var_code, "],[1,"\n        currency.code = var_code\n        currency."],[0,"numeric_"]],"start1":120591,"start2":120591,"length1":33,"length2":67},{"diffs":[[0,"numeric_code"],[-1,"="],[1," = "],[0,"var_numeric_"]],"start1":120650,"start2":120650,"length1":25,"length2":27},{"diffs":[[0,"ric_code"],[-1,", "],[0,"\n       "]],"start1":120673,"start2":120673,"length1":18,"length2":16},{"diffs":[[0,"        "],[1,"currency."],[0,"rounding"],[-1,"="],[1," = "],[0,"var_roun"]],"start1":120682,"start2":120682,"length1":25,"length2":36},{"diffs":[[0,"var_rounding"],[-1,", "],[1,"\n        currency."],[0,"digits"],[-1,"="],[1," = "],[0,"var_digits, "]],"start1":120710,"start2":120710,"length1":33,"length2":51},{"diffs":[[0,"= var_digits"],[-1,", "],[1,"\n        currency."],[0,"active"],[-1,"="],[1," = "],[0,"var_active, "]],"start1":120747,"start2":120747,"length1":33,"length2":51},{"diffs":[[0,"tive"],[-1,", "],[1,"\n        currency."],[0,"grouping"],[-1,"="],[1," = "],[0,"var_"]],"start1":120792,"start2":120792,"length1":19,"length2":37},{"diffs":[[0,"grouping"],[-1,", "],[1,"\n        currency."],[0,"decimal_"]],"start1":120829,"start2":120829,"length1":18,"length2":34},{"diffs":[[0,"al_separator"],[-1,"="],[1," = "],[0,"var_decimal_"]],"start1":120860,"start2":120860,"length1":25,"length2":27},{"diffs":[[0,"eparator"],[-1,", "],[0,"\n       "]],"start1":120888,"start2":120888,"length1":18,"length2":16},{"diffs":[[0,"tor\n        "],[1,"currency."],[0,"thousands_se"]],"start1":120893,"start2":120893,"length1":24,"length2":33},{"diffs":[[0,"eparator"],[-1,"="],[1," = "],[0,"var_thou"]],"start1":120925,"start2":120925,"length1":17,"length2":19},{"diffs":[[0,"eparator"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":120951,"start2":120951,"length1":18,"length2":34},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":120987,"start2":120987,"length1":25,"length2":27},{"diffs":[[0,"position"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121020,"start2":121020,"length1":18,"length2":34},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_negative"]],"start1":121056,"start2":121056,"length1":25,"length2":27},{"diffs":[[0,"position"],[-1,","],[0,"\n       "]],"start1":121089,"start2":121089,"length1":17,"length2":16},{"diffs":[[0,"ion\n        "],[1,"currency."],[0,"positive_sig"]],"start1":121094,"start2":121094,"length1":24,"length2":33},{"diffs":[[0,"ositive_sign"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121116,"start2":121116,"length1":25,"length2":27},{"diffs":[[0,"ive_sign"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121140,"start2":121140,"length1":18,"length2":34},{"diffs":[[0,"ive_sign"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121171,"start2":121171,"length1":17,"length2":19},{"diffs":[[0,"ive_sign"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":121191,"start2":121191,"length1":18,"length2":34},{"diffs":[[0,"bol_precedes"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121238,"start2":121238,"length1":25,"length2":27},{"diffs":[[0,"precedes"],[-1,","],[0,"\n       "]],"start1":121282,"start2":121282,"length1":17,"length2":16},{"diffs":[[0,"des\n        "],[1,"currency."],[0,"negative_cur"]],"start1":121287,"start2":121287,"length1":24,"length2":33},{"diffs":[[0,"precedes"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121333,"start2":121333,"length1":17,"length2":19},{"diffs":[[0,"precedes"],[-1,", "],[1,"\n        currency."],[0,"positive"]],"start1":121373,"start2":121373,"length1":18,"length2":34},{"diffs":[[0,"ate_by_space"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":121413,"start2":121413,"length1":25,"length2":27},{"diffs":[[0,"by_space"],[-1,", "],[1,"\n        currency."],[0,"negative"]],"start1":121450,"start2":121450,"length1":18,"length2":34},{"diffs":[[0,"by_space"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":121494,"start2":121494,"length1":17,"length2":19},{"diffs":[[0,"by_space"],[-1,")"],[0,"\n       "]],"start1":121527,"start2":121527,"length1":17,"length2":16},{"diffs":[[0,"   c"],[-1,"ontent.title = var_title\n        content.category = var_category\n        content.body = var_body\n        content.sequence = var_sequence\n        content.active = var_active"],[1,"urrency.name=var_name\n        currency.symbol=var_symbol\n        currency.code=var_code\n        currency.numeric_code=var_numeric_code\n        currency.rounding=var_rounding\n        currency.digits=var_digits\n        currency.active=var_active\n        currency.grouping=var_grouping\n        currency.decimal_separator=var_decimal_separator\n        currency.thousands_separator=var_thousands_separator\n        currency.positive_sign_position=var_positive_sign_position\n        currency.negative_sign_position=var_negative_sign_position\n        currency.positive_sign=var_positive_sign\n        currency.negative_sign=var_negative_sign\n        currency.positive_currency_symbol_precedes=var_positive_currency_symbol_precedes\n        currency.negative_currency_symbol_precedes=var_negative_currency_symbol_precedes\n        currency.positive_separate_by_space=var_positive_separate_by_space\n        currency.negative_separate_by_space=var_negative_separate_by_space\n        \n        "],[0,"\n   "]],"start1":121890,"start2":121890,"length1":180,"length2":986}]],"length":124778,"saved":false}
{"ts":1379337805124,"patch":[[{"diffs":[[0,"urrency.name"],[-1,"="],[1," = "],[0,"var_name\n   "]],"start1":121894,"start2":121894,"length1":25,"length2":27},{"diffs":[[0,"rency.symbol"],[-1,"="],[1," = "],[0,"var_symbol\n "]],"start1":121929,"start2":121929,"length1":25,"length2":27},{"diffs":[[0,"urrency.code"],[-1,"="],[1," = "],[0,"var_code\n   "]],"start1":121964,"start2":121964,"length1":25,"length2":27},{"diffs":[[0,"numeric_code"],[-1,"="],[1," = "],[0,"var_numeric_"]],"start1":122005,"start2":122005,"length1":25,"length2":27},{"diffs":[[0,"urrency.rounding"],[-1,"="],[1," = "],[0,"var_rounding\n   "]],"start1":122046,"start2":122046,"length1":33,"length2":35},{"diffs":[[0,"rency.digits"],[-1,"="],[1," = "],[0,"var_digits\n "]],"start1":122089,"start2":122089,"length1":25,"length2":27},{"diffs":[[0,"rency.active"],[-1,"="],[1," = "],[0,"var_active\n "]],"start1":122126,"start2":122126,"length1":25,"length2":27},{"diffs":[[0,"grouping"],[-1,"="],[1," = "],[0,"var_grou"]],"start1":122169,"start2":122169,"length1":17,"length2":19},{"diffs":[[0,"al_separator"],[-1,"="],[1," = "],[0,"var_decimal_"]],"start1":122215,"start2":122215,"length1":25,"length2":27},{"diffs":[[0,"eparator"],[-1,"="],[1," = "],[0,"var_thou"]],"start1":122280,"start2":122280,"length1":17,"length2":19},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122342,"start2":122342,"length1":25,"length2":27},{"diffs":[[0,"ign_position"],[-1,"="],[1," = "],[0,"var_negative"]],"start1":122411,"start2":122411,"length1":25,"length2":27},{"diffs":[[0,"ositive_sign"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122471,"start2":122471,"length1":25,"length2":27},{"diffs":[[0,"ive_sign"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122526,"start2":122526,"length1":17,"length2":19},{"diffs":[[0,"bol_precedes"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122593,"start2":122593,"length1":25,"length2":27},{"diffs":[[0,"precedes"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122688,"start2":122688,"length1":17,"length2":19},{"diffs":[[0,"ate_by_space"],[-1,"="],[1," = "],[0,"var_positive"]],"start1":122768,"start2":122768,"length1":25,"length2":27},{"diffs":[[0,"by_space"],[-1,"="],[1," = "],[0,"var_nega"]],"start1":122849,"start2":122849,"length1":17,"length2":19},{"diffs":[[0,"ace\n"],[-1,"        \n        \n"],[0,"    "]],"start1":122887,"start2":122887,"length1":26,"length2":8}]],"length":124796,"saved":false}
{"ts":1379338152264,"patch":[[{"diffs":[[0,", required=True)"],[1,"\n    \n    _KIND = 0\n    \n    OBJECT_DEFAULT_STATE = 'open'\n    \n    OBJECT_STATES = {\n        # tuple represents (state_code, transition_name)\n        # second value represents which transition will be called for changing the state\n        # Ne znam da li je predvidjeno ovde da moze biti vise tranzicija/akcija koje vode do istog state-a,\n        # sto ce biti slucaj sa verovatno mnogim modelima.\n        # broj 0 je rezervisan za none (Stateless Models) i ne koristi se za definiciju validnih state-ova\n        'sending' : (1, ),\n        'sent' : (2, ),\n    }\n    \n    OBJECT_ACTIONS = {\n       'create' : 1,\n       'update' : 2,\n       'close' : 3,\n       'open' : 4,\n    }\n    \n    OBJECT_TRANSITIONS = {\n        'open' : {\n            'from' : ('closed',),\n            'to' : ('open',),\n         },\n        'close' : {\n           'from' : ('open', ),\n           'to'   : ('closed',),\n        },\n    }\n    \n    # Ova akcija kreira novi store.\n    @ndb.transactional\n    def create():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'create-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='open')\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='create', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija azurira postojeci store.\n    @ndb.transactional\n    def update():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'update-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.name = var_name\n        store.logo = var_logo\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='update', state=store.state, log=store)\n        object_log.put()\n    \n    # Ova akcija zatvara otvoren store. Ovde cemo dalje opisati posledice zatvaranja...\n    @ndb.transactional\n    def close():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'close-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'open'.\n        store.state = 'closed'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='close', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()\n    \n    # Ova akcija otvara zatvoreni store. Ovde cemo dalje opisati posledice otvaranja...\n    @ndb.transactional\n    def open():\n        # ovu akciju moze izvrsiti samo agent koji ima domain-specific dozvolu 'open-Store'.\n        # akcija se moze pozvati samo ako je domain.state == 'active' i store.state == 'closed'.\n        store.state = 'open'\n        store_key = store.put()\n        object_log = ObjectLog(parent=store_key, agent=agent_key, action='open', state=store.state, message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!')\n        object_log.put()"],[0,"\n\n##############"]],"start1":123654,"start2":123654,"length1":32,"length2":3223}]],"length":127987,"saved":false}
{"ts":1379338488253,"patch":[[{"diffs":[[0,"   '"],[-1,"send"],[1,"prepare' : (1, ),\n        'process"],[0,"ing' : ("],[-1,"1"],[1,"2"],[0,", ),"]],"start1":124181,"start2":124181,"length1":21,"length2":51},{"diffs":[[0,"   '"],[-1,"sent"],[1,"completed"],[0,"' : ("],[-1,"2"],[1,"3"],[0,", ),"]],"start1":124238,"start2":124238,"length1":18,"length2":23},{"diffs":[[0,"   '"],[-1,"update' : 2,\n       'close' : 3,\n       'open"],[1,"complete"],[0,"' : "],[-1,"4"],[1,"2"],[0,",\n  "]],"start1":124321,"start2":124321,"length1":58,"length2":21},{"diffs":[[0,"NS = {\n        '"],[-1,"open"],[1,"process"],[0,"' : {\n          "]],"start1":124371,"start2":124371,"length1":36,"length2":39},{"diffs":[[0,"     'from' : ('"],[-1,"closed"],[1,"preparation"],[0,"',),\n           "]],"start1":124407,"start2":124407,"length1":38,"length2":43},{"diffs":[[0,"       'to' : ('"],[-1,"open"],[1,"processing"],[0,"',),\n         },"]],"start1":124444,"start2":124444,"length1":36,"length2":42},{"diffs":[[0,"ija kreira novi "],[-1,"stor"],[1,"messag"],[0,"e.\n    @ndb.tran"]],"start1":124607,"start2":124607,"length1":36,"length2":38},{"diffs":[[0,"nt koji ima "],[-1,"domain-specific"],[1,"globalnu"],[0," dozvolu 'cr"]],"start1":124716,"start2":124716,"length1":39,"length2":32},{"diffs":[[0,"dozvolu 'create-"],[-1,"Stor"],[1,"Messag"],[0,"e'.\n        # ak"]],"start1":124737,"start2":124737,"length1":36,"length2":38},{"diffs":[[0,"    "],[-1,"# akcija se moze pozvati samo ako je domain.state == 'active'.\n        store = Store(name=var_name, logo=var_logo, state='ope"],[1,"message = Message(outlet=var_outlet, group=var_group, state='preparatio"],[0,"n')\n"]],"start1":124767,"start2":124767,"length1":133,"length2":79},{"diffs":[[0,"        "],[-1,"stor"],[1,"messag"],[0,"e_key = "],[-1,"stor"],[1,"messag"],[0,"e.put()\n"]],"start1":124846,"start2":124846,"length1":32,"length2":36},{"diffs":[[0,"bjectLog(parent="],[-1,"stor"],[1,"messag"],[0,"e_key, agent=age"]],"start1":124904,"start2":124904,"length1":36,"length2":38},{"diffs":[[0,"'create', state="],[-1,"stor"],[1,"messag"],[0,"e.state, log=sto"]],"start1":124957,"start2":124957,"length1":36,"length2":38},{"diffs":[[0,"sage.state, "],[-1,"log=store"],[1,"message='poruka od agenta - obavezno polje!', note='privatni komentar agenta (dostupan samo privilegovanim agentima) - obavezno polje!'"],[0,")\n        ob"]],"start1":124976,"start2":124976,"length1":33,"length2":159},{"diffs":[[0,"urira postojeci "],[-1,"stor"],[1,"messag"],[0,"e.\n    @ndb.tran"]],"start1":125174,"start2":125174,"length1":36,"length2":38}]],"length":128078,"saved":false}
{"ts":1379338504433,"patch":[[{"diffs":[[0,"   },\n        'c"],[-1,"los"],[1,"omplet"],[0,"e' : {\n         "]],"start1":124481,"start2":124481,"length1":35,"length2":38},{"diffs":[[0,"     'from' : ('"],[-1,"open"],[1,"processing"],[0,"', ),\n          "]],"start1":124516,"start2":124516,"length1":36,"length2":42},{"diffs":[[0,"    'to'   : ('c"],[-1,"los"],[1,"omplet"],[0,"ed',),\n        }"]],"start1":124555,"start2":124555,"length1":35,"length2":38}]],"length":128090,"saved":false}
