{"ts":1375383197328,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#coding=UTF-8\n\n#MASTER MODEL FILE\n\n# NAPOMENA!!! - Sve mapirane informacije koje se koriste u aplikaciji trebaju biti hardcoded, tj. u samom aplikativnom codu a ne u settings.py\n# u settings.py se cuvaju one informacije koje se ne cuvaju u datastore i koje se ne koriste u izgradnji datastore recorda...\n\nfrom google.appengine.ext import blobstore\nfrom google.appengine.ext import ndb\nfrom decimal import *\n\n'''\nOvo su zabranjena imena propertija:\n\nall\napp\ncopy\ndelete\nentity\nentity_type\nfields\nfrom_entity\nget\ngql\ninstance_properties\nis_saved\nkey\nkey_name\nkind\nparent\nparent_key\nproperties\nput\nsetdefault\nto_xml\nupdate\n'''\n\ndatastore_key_kinds = {\n    'ObjectLog':0,\n    'User':1,\n    'UserEmail':2,\n    'UserIdentity':3,\n    'UserIPAddress':4,\n    'UserRole':5,\n    'AggregateUserPermission':6,\n    'Role':7,\n    'Country':8,\n    'CountrySubdivision':9,\n    'Content':10,\n    'SupportRequest':11,\n    'FeedbackRequest':12,\n    'Image':13,\n    'ProductCategory':14,\n    'ProductUOMCategory':15,\n    'ProductUOM':16,\n    'BuyerAddress':17,\n    'BuyerCollection':18,\n    \n    \n    'Notification':1,\n    'NotificationRecipient':1,\n    'NotificationOutlet':1,\n    'Location':1,\n    'Store':1,\n    'StoreContent':1,\n    'StoreTax':1,\n    'StoreCarrier':1,\n    'StoreCarrierLine':1,\n    'StoreCarrierPricelist':1,\n    \n    'Currency':1,\n    'Order':1,\n    'OrderReference':1,\n    'OrderAddress':1,\n    'OrderLine':1,\n    'OrderLineReference':1,\n    'OrderLineTax':1,\n    'PayPalTransaction':1,\n    'BillingLog':1,\n    'BillingCreditAdjustment':1,\n    'OrderFeedback':1,\n    'Catalog':1,\n    'CatalogContent':1,\n    'CatalogPricetag':1,\n    'ProductTemplate':1,\n    'ProductInstance':1,\n    'ProductInstanceInventory':1,\n    'ProductContent':1,\n    'ProductVariant':1,\n    'ProductTemplateVariant':1,\n}\n\n\nclass DecimalProperty(ndb.StringProperty):\n  def _validate(self, value):\n    if not isinstance(value, (decimal.Decimal)):\n      raise TypeError('expected an decimal, got %s' % repr(value))\n\n  def _to_base_type(self, value):\n    return str(value) # Doesn't matter if it's a decimal or string\n\n  def _from_base_type(self, value):\n    return decimal.Decimal(value)  # Always return a decimal\n\n\nclass ObjectLog(ndb.Expando):\n    \n    # ancestor Any - ancestor je objekat koji se ujedno i pickle u log property, ukljucujuci i njegovu hiejrarhiju - napr: 'User-UserLog-ObjectLog'\n    # reference i type izvlacimo iz kljuca - key.parent()\n    # posible composite indexes ???\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    agent = ndb.KeyProperty('2', kind=User, required=True)\n    action = ndb.IntegerProperty('3', required=True)\n    state = ndb.IntegerProperty('4', required=True)\n    #_default_indexed = False\n    #pass\n    #message / m = ndb.TextProperty('5')# max size 64kb - to determine char count\n    #note / n = ndb.TextProperty('6')# max size 64kb - to determine char count\n    #log / l = ndb.TextProperty('7')\n    \n    # ovako se smanjuje storage u Datastore, i trebalo bi sprovesti to isto na sve modele\n    @classmethod\n    def _get_kind(cls):\n      return datastore_key_kinds.ObjectLog\n\n\n# ovo ce biti sistem za slanje poruka userima preko odredjenog outleta\n# ostavicemo ga za kasnije posto nismo upoznati detaljno sa task queue\nclass Message(ndb.Model):\n    \n    # root\n    outlet = ndb.IntegerProperty('1', required=True)\n    group = ndb.IntegerProperty('2', required=True)\n    state = ndb.IntegerProperty('3', required=True)\n\n\nclass MessageRecepient(ndb.Model):\n    \n    # ancestor Message\n    recepient = ndb.KeyProperty('1', kind=User, required=True)\n    sent = ndb.DateTimeProperty('2', auto_now_add=True, required=True)\n\n\nclass FeedbackRequest(ndb.Model):\n    \n    # ancestor User\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n    \n    # primer helper funkcije u slucajevima gde se ne koristi ancestor mehanizam za pristup relacijama\n    @property\n    def logs(self):\n      return ObjectLog.query(ancestor = self.key())\n\n\nclass SupportRequest(ndb.Model):\n    \n    # ancestor User\n    reference = ndb.StringProperty('1', required=True, indexed=False)\n    state = ndb.IntegerProperty('2', required=True)\n    updated = ndb.DateTimeProperty('3', auto_now=True, required=True)\n    created = ndb.DateTimeProperty('4', auto_now_add=True, required=True)\n\n\nclass Content(ndb.Model):\n    \n    # root\n    # composite index category+state+sequence\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    updated = ndb.DateTimeProperty('1', auto_now=True, required=True)\n    title = ndb.StringProperty('2', required=True, indexed=False)\n    category = ndb.IntegerProperty('3', required=True)# proveriti da li composite index moze raditi kada je ovo indexed=False\n    body = ndb.TextProperty('4', required=True)\n    sequence = ndb.IntegerProperty('5', required=True)# proveriti da li composite index moze raditi kada je ovo indexed=False\n    state = ndb.IntegerProperty('6', required=True)# published/unpublished - proveriti da li composite index moze raditi kada je ovo indexed=False\n\n\nclass Image(ndb.Model):\n    \n    # ancestor Any Object\n    image = blobstore.BlobKeyProperty('1', required=True, indexed=False)# blob ce se implementirati na GCS\n    content_type = ndb.StringProperty('2', required=True, indexed=False)\n    size = ndb.FloatProperty('3', required=True, indexed=False)\n    width = ndb.IntegerProperty('4', required=True, indexed=False)\n    height = ndb.IntegerProperty('5', required=True, indexed=False)\n    sequence = ndb.IntegerProperty('6', required=True)\n\n\nclass Country(ndb.Model):\n    \n    # root\n    # u slucaju da ostane index za code, trebace nam composit index code+name\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    code = ndb.StringProperty('1', required=True, indexed=False)\n    name = ndb.StringProperty('2', required=True, indexed=False)\n    state = ndb.IntegerProperty('3', required=True)# active/inactive - proveriti da li composite index moze raditi kada je ovo indexed=False\n\n\nclass CountrySubdivision(ndb.Model):\n    \n    # ancestor Country\n    # koliko cemo drilldown u ovoj strukturi zavisi od kasnijih odluka u vezi povezivanja lokativnih informacija sa informacijama ovog modela..\n    # u slucaju da ostane index za code, trebace nam composit index code+name\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    parent_record = ndb.KeyProperty('1', kind=CountrySubdivision, indexed=False)\n    name = ndb.StringProperty('2', required=True, indexed=False)\n    code = ndb.StringProperty('3', required=True, indexed=False)\n    type = ndb.IntegerProperty('4', required=True, indexed=False)\n    state = ndb.IntegerProperty('5', required=True)# active/inactive - proveriti da li composite index moze raditi kada je ovo indexed=False\n\n\nclass Location(ndb.Model):\n    \n    # ancestor Any Object (Store, StoreTax, StoreCarrierLine, Catalog...)\n    country = ndb.KeyProperty('1', kind=Country, required=True)\n    region = ndb.KeyProperty('2', kind=CountrySubdivision)\n    city = ndb.KeyProperty('3', kind=CountrySubdivision)# ne znam da li ce ovo postojati??\n    postal_code_from = ndb.StringProperty('4')\n    postal_code_to = ndb.StringProperty('5')\n\n\nclass ProductCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/category.py#l8\n    # https://support.google.com/merchants/answer/1705911\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L227\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    parent_record = ndb.KeyProperty('1', kind=ProductCategory, indexed=False)\n    name = ndb.StringProperty('2', required=True, indexed=False)\n    complete_name = ndb.TextProperty('3', required=True, indexed=False)\n    state = ndb.IntegerProperty('4', required=True)\n\n\nclass ProductUOMCategory(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l16\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L81\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    name = ndb.StringProperty('1', required=True, indexed=False)\n\n\nclass ProductUOM(ndb.Model):\n    \n    # ancestor ProductUOMCategory\n    # http://hg.tryton.org/modules/product/file/tip/uom.py#l28\n    # http://hg.tryton.org/modules/product/file/tip/uom.xml#l63 - http://hg.tryton.org/modules/product/file/tip/uom.xml#l312\n    # http://bazaar.launchpad.net/~openerp/openobject-addons/7.0/view/head:/product/product.py#L89\n    # veliki problem je ovde u vezi query-ja, zato sto datastore ne podrzava LIKE statement, verovatno cemo koristiti GAE Search\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True, indexed=False)\n    rate = ndb.FloatProperty('3', required=True, indexed=False)# ovde ide custom decimal property\n    factor = ndb.FloatProperty('4', required=True, indexed=False)# ovde ide custom decimal property\n    rounding = ndb.FloatProperty('5', required=True, indexed=False)# ovde ide custom decimal property\n    digits = ndb.IntegerProperty('6', required=True, indexed=False)\n    state = ndb.IntegerProperty('7', required=True)\n\n\nclass User(ndb.Expando):\n    \n    # root\n    state = ndb.IntegerProperty('1', required=True)\n    #_default_indexed = False\n    #pass\n\n\nclass UserEmail(ndb.Model):\n    \n    # ancestor User\n    email = ndb.StringProperty('1', required=True)\n    primary = ndb.BooleanProperty('2', default=True, indexed=False)\n\n\nclass UserIdentity(ndb.Model):\n    \n    # ancestor User\n    user_email = ndb.KeyProperty('1', kind=UserEmail, required=True, indexed=False)\n    identity = ndb.StringProperty('2', required=True)# spojen je i provider name sa id-jem\n    associated = ndb.BooleanProperty('3', default=True, indexed=False)\n\n\nclass UserIPAddress(ndb.Model):\n    \n    # ancestor User\n    ip_address = ndb.StringProperty('1', required=True, indexed=False)\n    logged = ndb.DateTimeProperty('2', auto_now_add=True, required=True)\n\n\nclass UserRole(ndb.Model):\n    \n    # ancestor User\n    role = ndb.KeyProperty('1', kind=Role, required=True)\n    state = ndb.IntegerProperty('1', required=True)# invited/accepted\n\n\nclass AggregateUserPermission(ndb.Model):\n    \n    # ancestor User\n    reference = ndb.KeyProperty('1',required=True)# ? ovo je referenca na Role u slucaju da user nasledjuje globalne dozvole, tj da je Role entitet root\n    permissions = ndb.StringProperty('2', repeated=True, indexed=False)# permission_state_model - edit_unpublished_catalog\n\n\nclass Role(ndb.Model):\n    \n    # ancestor Store (Application, in the future) with permissions that affect store (application) and it's related entities\n    # or root (if it is root, key id is manually assigned string) with global permissions on mstyle\n    name = ndb.StringProperty('1', required=True, indexed=False)\n    permissions = ndb.StringProperty('2', repeated=True, indexed=False)# permission_state_model - edit_unpublished_catalog\n    readonly = ndb.BooleanProperty('3', default=True, indexed=False)\n\n\nclass Store(ndb.Expando):\n    \n    # root\n    name = ndb.StringProperty('1', required=True)\n    logo = blobstore.BlobKeyProperty('2', required=True)# verovatno je i dalje ovaj property od klase blobstore\n    state = ndb.IntegerProperty('3', required=True)\n    _default_indexed = False\n    pass\n\n\nclass StoreContent(ndb.Model):\n    \n    # ancestor Store, Catalog (kesiranje)\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n    sequence = ndb.IntegerProperty('3', required=True)\n\n\nclass StoreTax(ndb.Expando):\n    \n    # ancestor Store\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    type = ndb.IntegerProperty('3', required=True)\n    amount = ndb.FloatProperty('4', required=True)# ovde ide custom decimal property - obratiti paznju oko decimala posto ovo moze da bude i currency i procenat.\n    location_exclusion = ndb.BooleanProperty('5', default=False)\n    active = ndb.BooleanProperty('6', default=True)\n    #product_category = ndb.KeyProperty('7', kind=ProductCategory)\n    #store_carrier = ndb.KeyProperty('8', kind=StoreCarrier)\n\n\nclass StoreCarrier(ndb.Model):\n    \n    # ancestor Store\n    name = ndb.StringProperty('1', required=True)\n    active = ndb.BooleanProperty('2', default=True)\n\n\nclass StoreCarrierLine(ndb.Model):\n    \n    # ancestor StoreCarrier\n    name = ndb.StringProperty('1', required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n    location_exclusion = ndb.BooleanProperty('3', default=False)\n    active = ndb.BooleanProperty('4', default=True)\n    pricelists = ndb.StructuredProperty(StoreCarrierPricelist, '5', repeated=True)\n\n# jos je upitno da li cemo ovo ovako zadrzati, to sve zavizi od querija i indexa...\nclass StoreCarrierPricelist(ndb.Model):\n    \n    # StructuredProperty model\n    condition_type = ndb.IntegerProperty('1', required=True)\n    condition_operator = ndb.IntegerProperty('2', required=True)\n    condition_value = ndb.FloatProperty('3', required=True)# ovde ide custom decimal property - verovatno da ce trebati i ovde product_uom_id kako bi prodavac mogao da ustima vrednost koju zeli... mozemo ici i na to da je uom fiksan ovde, a isto tako i fiksan u product measurements-ima...\n    price_type = ndb.IntegerProperty('4', required=True)\n    price_type_factor = ndb.IntegerProperty('5', required=True)\n    amount = ndb.FloatProperty('6', required=True)# ovde ide custom decimal property\n\n\nclass BuyerAddress(ndb.Model):\n    \n    # ancestor User\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.KeyProperty('2', kind=Country, required=True, indexed=False)\n    region = ndb.KeyProperty('3', kind=CountrySubdivision, required=True, indexed=False)# ostaje da vidimo kako cemo ovo da handlamo, ili selection, ili text, ili i jedno i drugo po potrebi...\n    city = ndb.StringProperty('4', required=True, indexed=False)\n    postal_code = ndb.StringProperty('5', required=True, indexed=False)\n    street_address = ndb.StringProperty('6', required=True, indexed=False)\n    street_address2 = ndb.StringProperty('7', indexed=False)\n    email = ndb.StringProperty('8', indexed=False)\n    telephone = ndb.StringProperty('9', indexed=False)\n    default_shipping = ndb.BooleanProperty('10', default=True)# indexed=False ?\n    default_billing = ndb.BooleanProperty('11', default=True)# indexed=False ?\n\n# bice potrebna verovatno i aggregate tabela neka\nclass BuyerCollection(ndb.Model):\n    \n    # ancestor User\n    name = ndb.StringProperty('1', required=True)\n    notifications = ndb.BooleanProperty('2', default=False, indexed=False)\n    store = ndb.KeyProperty('3', kind=Store, repeated=True, indexed=False)\n    product_category = ndb.KeyProperty('4', kind=ProductCategory, repeated=True, indexed=False)\n\n\nclass Currency(ndb.Model):\n    \n    # root\n    # http://hg.tryton.org/modules/currency/file/tip/currency.py#l14\n    # http://hg.tryton.org/modules/currency/file/tip/currency.xml#l107\n    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_currency.py#L32\n    name = ndb.StringProperty('1', required=True)\n    symbol = ndb.StringProperty('2', required=True)\n    code = ndb.StringProperty('3', required=True)\n    numeric_code = ndb.StringProperty('4')\n    rounding = ndb.FloatProperty('5', required=True)# custom decimal\n    digits = ndb.IntegerProperty('6', required=True)\n    active = ndb.BooleanProperty('7', default=True)\n    #formating\n    grouping = ndb.StringProperty('8', required=True)\n    decimal_separator = ndb.StringProperty('9', required=True)\n    thousands_separator = ndb.StringProperty('10')\n    positive_sign_position = ndb.IntegerProperty('11', required=True)\n    negative_sign_position = ndb.IntegerProperty('12', required=True)\n    positive_sign = ndb.StringProperty('13')\n    negative_sign = ndb.StringProperty('14')\n    positive_currency_symbol_precedes = ndb.BooleanProperty('15', default=True)\n    negative_currency_symbol_precedes = ndb.BooleanProperty('16', default=True)\n    positive_separate_by_space = ndb.BooleanProperty('17', default=True)\n    negative_separate_by_space = ndb.BooleanProperty('18', default=True)\n\n\nclass Order(ndb.Expando):\n    \n    # root\n    reference = ndb.StringProperty('1', required=True)\n    order_date = ndb.DateTimeProperty('2', auto_now_add=True, required=True)\n    currency = ndb.KeyProperty('3', kind=Currency, required=True)\n    untaxed_amount = ndb.FloatProperty('4', required=True)# custom decimal\n    tax_amount = ndb.FloatProperty('5', required=True)# custom decimal\n    total_amount = ndb.FloatProperty('6', required=True)# custom decimal\n    comment = ndb.TextProperty('7')\n    state = ndb.IntegerProperty('8', required=True)\n    #Expando\n    company_address = ndb.StructuredProperty(OrderAddress, '9', required=True)\n    billing_address = ndb.StructuredProperty(OrderAddress, '10', required=True)\n    shipping_address = ndb.StructuredProperty(OrderAddress, '11', required=True)\n    _default_indexed = False\n    pass\n\n\nclass OrderReference(ndb.Model):\n    \n    # ancestor Order\n    company_address = ndb.KeyProperty('1', kind=BuyerAddress, required=True)\n    billing_address = ndb.KeyProperty('2', kind=BuyerAddress, required=True)\n    shipping_address = ndb.KeyProperty('3', kind=BuyerAddress, required=True)\n    carrier = ndb.KeyProperty('4', kind=StoreCarrier, required=True)\n\n\nclass OrderAddress(ndb.Expando):\n    \n    # StructuredProperty model\n    name = ndb.StringProperty('1', required=True)\n    country = ndb.StringProperty('2', required=True)\n    country_code = ndb.StringProperty('3', required=True)\n    region = ndb.StringProperty('4', required=True)\n    city = ndb.StringProperty('5', required=True)\n    postal_code = ndb.StringProperty('6', required=True)\n    street_address = ndb.StringProperty('7', required=True)\n    street_address2 = ndb.StringProperty('8')\n    email = ndb.StringProperty('9')\n    telephone = ndb.StringProperty('10')\n    type = ndb.IntegerProperty('11', required=True)# ?\n\n\nclass OrderLine(ndb.Expando):\n    \n    # ancestor Order\n    description = ndb.TextProperty('1', required=True)\n    quantity = ndb.FloatProperty('2', required=True)# custom decimal\n    product_uom = ndb.KeyProperty('3', kind=ProductUOM, required=True)\n    unit_price = ndb.FloatProperty('4', required=True)# custom decimal\n    discount = ndb.FloatProperty('5', default=0.00)# custom decimal\n    sequence = ndb.IntegerProperty('6', required=True)\n    taxes = ndb.StructuredProperty(OrderLineTax, '7', repeated=True)\n    _default_indexed = False\n    pass\n    #Expando\n    #product_category = ndb.KeyProperty('1', kind=ProductCategory, required=True)\n\n\nclass OrderLineReference(ndb.Model):\n    \n    # ancestor OrderLine\n    catalog_pricetag = ndb.KeyProperty('1', kind=CatalogPricetag, required=True)\n    product_instance = ndb.KeyProperty('2', kind=ProductInstance, required=True)\n    taxes = ndb.KeyProperty('3', kind=StoreTax, repeated=True)\n\n\nclass OrderLineTax(ndb.Model):\n    \n    # StructuredProperty model\n    # ovde vazi isto, ovo se moze izmeniti kada budemo optimize query/index..\n    # http://hg.tryton.org/modules/account/file/tip/tax.py#l545\n    name = ndb.StringProperty('1', required=True)\n    type = ndb.IntegerProperty('2', required=True)\n    amount = ndb.FloatProperty('3', required=True) # custom decimal - obratiti paznju oko decimala posto ovo moze da bude i currency i procenat.\n    #sequence = ndb.IntegerProperty('4', required=True)\n\n\nclass PayPalTransaction(ndb.Model):\n    \n    # ancestor Order\n    txn_id = ndb.StringProperty('1', required=True)\n    ipn_message = ndb.TextProperty('2', required=True)\n    logged = ndb.DateTimeProperty('3', auto_now_add=True, required=True)\n\n\nclass BillingLog(ndb.Model):\n    \n    # ancestor Billing Object (Store)\n    logged = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    reference = ndb.KeyProperty('2',required=True)\n    amount = ndb.FloatProperty('3', required=True)# custom decimal\n    balance = ndb.FloatProperty('4', required=True)# custom decimal\n\n\nclass BillingCreditAdjustment(ndb.Model):\n    \n    # ancestor Billing Object (Store)\n    amount = ndb.FloatProperty('1', required=True)# custom decimal\n    state = ndb.IntegerProperty('2', required=True)\n\n\nclass OrderFeedback(ndb.Model):\n    \n    # ancestor Order\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    store_name = ndb.StringProperty('2', required=True)\n    buyer = ndb.KeyProperty('3', kind=User, required=True)\n    state = ndb.IntegerProperty('4', required=True)\n    \n    order_reference = ndb.StringProperty('5', required=True)# ? mozda async \n    order_date = ndb.DateTimeProperty('6', auto_now_add=True, required=True)#? mozda async\n    total_amount = ndb.FloatProperty('7', required=True)# custom decimal ? mozda async\n    order_state = ndb.IntegerProperty('8', required=True)# ? mozda async\n\n\nclass Catalog(ndb.Expando):\n    \n    # root\n    store = ndb.KeyProperty('1', kind=Store, required=True)\n    name = ndb.StringProperty('2', required=True)\n    publish = ndb.DateTimeProperty('3', required=True)# trebaju se definisati granice i rasponi, i postaviti neke default vrednosti\n    discontinue = ndb.DateTimeProperty('4', required=True)\n    cover = blobstore.BlobKeyProperty('5', required=True)# verovatno je i dalje ovaj property od klase blobstore\n    cost = ndb.FloatProperty('6', required=True)# custom decimal\n    state = ndb.IntegerProperty('7', required=True)\n    _default_indexed = False\n    pass\n\n\nclass CatalogContent(ndb.Model):\n    \n    # ancestor Catalog\n    title = ndb.StringProperty('1', required=True)\n    body = ndb.TextProperty('2', required=True)\n\n\nclass CatalogPricetag(ndb.Model):\n    \n    # ancestor Catalog\n    product_template = ndb.KeyProperty('1', kind=ProductTemplate, required=True)\n    container_image = blobstore.BlobKeyProperty('2', required=True)# verovatno je i dalje ovaj property od klase blobstore\n    source_width = ndb.FloatProperty('3', required=True)\n    source_height = ndb.FloatProperty('4', required=True)\n    source_position_top = ndb.FloatProperty('5', required=True)\n    source_position_left = ndb.FloatProperty('6', required=True)\n    value = ndb.StringProperty('7', required=True)\n\n\nclass ProductTemplate(ndb.Expando):\n    \n    # ancestor Catalog\n    product_category = ndb.KeyProperty('1', kind=ProductCategory, required=True)\n    name = ndb.StringProperty('2', required=True)\n    description = ndb.TextProperty('3', required=True)# limit na 10000 karaktera - We recommend that you submit around 500 to 1,000 characters, but you can submit up to 10,000 characters.\n    product_uom = ndb.KeyProperty('4', kind=ProductUOM, required=True)\n    unit_price = ndb.FloatProperty('5', required=True) # custom decimal property\n    active = ndb.BooleanProperty('6', default=True)#?\n    _default_indexed = False\n    pass\n    #Expando\n    #weight = ndb.FloatProperty('7')# custom decimal\n    #weight_uom = ndb.KeyProperty('8', kind=ProductUOM, required=True)# filtrirano po ProductUOMCategory Weight\n    #volume = ndb.FloatProperty('9')# custom decimal\n    #volume_uom = ndb.KeyProperty('10', kind=ProductUOM, required=True)# filtrirano po ProductUOMCategory Volume\n\n\nclass ProductInstance(ndb.Expando):\n    \n    # ancestor ProductTemplate\n    #variant_signature se gradi na osnovu ProductVariant entiteta vezanih za ProductTemplate-a (od aktuelne ProductInstance) preko ProductTemplateVariant \n    #key name ce se graditi tako sto se uradi MD5 na variant_signature\n    #query ce se graditi tako sto se prvo izgradi variant_signature vrednost na osnovu odabira od strane krajnjeg korisnika a potom se ta vrednost hesira u MD5 i koristi kao key identifier\n    #mana ove metode je ta sto se uvek mora izgraditi kompletan variant_signature, tj moraju se sve varijacije odabrati (svaka varianta mora biti mandatory_variant_type)\n    #default vrednost code ce se graditi na osnovu sledecih informacija: ancestorkey-n, gde je n incremental integer koji se dodeljuje instanci prilikom njenog kreiranja\n    #ukoliko user ne odabere multivariant opciju onda se za ProductTemplate generise samo jedna ProductInstance i njen key se gradi automatski.\n    code = ndb.StringProperty('1', required=True)\n    active = ndb.BooleanProperty('2', default=True)#?\n    _default_indexed = False\n    pass\n    #Expando\n    #description = ndb.TextProperty('3', required=True)\n    #unit_price = ndb.FloatProperty('4', required=True) # custom decimal property\n    #managed_stock = ndb.BooleanProperty('5', default=False)\n    #low_stock_notify = ndb.BooleanProperty('6', default=True)\n    #low_stock_quantity = ndb.FloatProperty('7', default=0.00)# custom decimal\n    #weight = ndb.FloatProperty('8')# custom decimal\n    #weight_uom = ndb.KeyProperty('9', kind=ProductUOM, required=True)# filtrirano po ProductUOMCategory Weight\n    #volume = ndb.FloatProperty('10')# custom decimal\n    #volume_uom = ndb.KeyProperty('11', kind=ProductUOM, required=True)# filtrirano po ProductUOMCategory Volume\n    #variant_signature = ndb.TextProperty('12', required=True)\n\n\nclass ProductInstanceInventory(ndb.Model):\n    \n    # ancestor ProductInstance\n    updated = ndb.DateTimeProperty('1', auto_now_add=True, required=True)\n    # ? reference = ndb.KeyProperty('2', required=True)\n    quantity = ndb.FloatProperty('3', required=True)# custom decimal\n    balance = ndb.FloatProperty('4', required=True)# custom decimal\n\n\nclass ProductContent(ndb.Model):\n    \n    # ancestor ProductTemplate, ProductInstance\n    catalog_content = ndb.KeyProperty('1', kind=CatalogContent, required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n\n\nclass ProductVariant(ndb.Model):\n    \n    #ancestor Catalog\n    name = ndb.StringProperty('1', required=True)\n    description = ndb.TextProperty('2')\n    options = ndb.StringProperty('3', repeated=True)# nema potrebe za seqence - The datastore preserves the order of the list items in a repeated property, so you can assign some meaning to their ordering.\n    allow_custom_value = ndb.BooleanProperty('4', default=False)#?\n    mandatory_variant_type = ndb.BooleanProperty('5', default=True)#?\n\n\nclass ProductTemplateVariant(ndb.Model):\n    \n    # ancestor ProductTemplate\n    product_variant = ndb.KeyProperty('1', kind=ProductVariant, required=True)\n    sequence = ndb.IntegerProperty('2', required=True)\n"]],"start1":0,"start2":0,"length1":0,"length2":26867}]],"length":26867}
{"contributors":[],"silentsave":true,"ts":1375383335125,"patch":[[{"diffs":[[0,"\n    # root\n"],[1,"    \n"],[0,"    # u sluc"]],"start1":5834,"start2":5834,"length1":24,"length2":29}]],"length":26872,"saved":false}
{"ts":1375383337562,"patch":[[{"diffs":[[0," # root\n    "],[1,"# "],[0,"\n    # u slu"]],"start1":5838,"start2":5838,"length1":24,"length2":26}]],"length":26874,"saved":false}
{"ts":1375383363292,"patch":[[{"diffs":[[0,"t\n    # "],[1,"http://hg.tryton.org/modules/country/file/tip/country.py#l8\n    "],[0,"\n    # u"]],"start1":5844,"start2":5844,"length1":16,"length2":80}]],"length":26938,"saved":false}
{"ts":1375383365440,"patch":[[{"diffs":[[0,"y.py#l8\n    "],[1,"# "],[0,"\n    # u slu"]],"start1":5904,"start2":5904,"length1":24,"length2":26}]],"length":26940,"saved":false}
{"ts":1375383374936,"patch":[[{"diffs":[[0,"8\n    # "],[1,"http://en.wikipedia.org/wiki/ISO_3166"],[0,"\n    # u"]],"start1":5910,"start2":5910,"length1":16,"length2":53}]],"length":26977,"saved":false}
{"ts":1375383416970,"patch":[[{"diffs":[[0,"SO_3166\n"],[1,"    # \n"],[0,"    # u "]],"start1":5948,"start2":5948,"length1":16,"length2":23}]],"length":26984,"saved":false}
{"ts":1375383417821,"patch":[[{"diffs":[[0,"6\n    # "],[1,"http://www.google.com/url?q=http%3A%2F%2Fhg.tryton.org%2Fmodules%2Fcountry%2Ffile%2Ftip%2Fcountry.xml&sa=D&sntz=1&usg=AFQjCNG-MB-7IPU8vD1HToqZY0nXsC6LoQ"],[0,"\n    # u"]],"start1":5954,"start2":5954,"length1":16,"length2":168}]],"length":27136,"saved":false}
{"ts":1375383432247,"patch":[[{"diffs":[[0,"2Ffi"],[-1,"le%2Ftip%2Fcountry.xml&sa=D&sntz=1&usg=AFQjCNG-MB-7IPU8vD1HToqZY0nXsC6LoQ"],[0,"\n   "]],"start1":6037,"start2":6037,"length1":81,"length2":8}]],"length":27063,"saved":false}
{"ts":1375383436391,"patch":[[{"diffs":[[0,"  # "],[-1,"http://www.google.com/url?q=http%3A%2F%2Fhg.tryton.org%2Fmodules%2Fcountry%2Ffi"],[0,"\n   "]],"start1":5958,"start2":5958,"length1":87,"length2":8}]],"length":26984,"saved":false}
{"ts":1375383448542,"patch":[[{"diffs":[[0,"SO_3166\n"],[1,"    # http://hg.tryton.org/modules/country/file/tip/country.xml\n"],[0,"    # \n "]],"start1":5948,"start2":5948,"length1":16,"length2":80}]],"length":27048,"saved":false}
{"ts":1375383455847,"patch":[[{"diffs":[[0,"l\n    # "],[1,"http://downloads.tryton.org/2.8/trytond_country-2.8.0.tar.gz"],[0,"\n    # u"]],"start1":6018,"start2":6018,"length1":16,"length2":76}]],"length":27108,"saved":false}
{"ts":1375383844649,"patch":[[{"diffs":[[0,".tar.gz\n"],[1,"    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L42\n"],[0,"    # u "]],"start1":6079,"start2":6079,"length1":16,"length2":135}]],"length":27227,"saved":false}
{"ts":1375383857363,"patch":[[{"diffs":[[0,"Country\n"],[1,"    # http://bazaar.launchpad.net/~openerp/openobject-server/7.0/view/head:/openerp/addons/base/res/res_country.py#L86\n"],[0,"    # ko"]],"start1":6743,"start2":6743,"length1":16,"length2":135}]],"length":27346,"saved":false}
{"ts":1375383885832,"patch":[[{"diffs":[[0,"Country\n"],[1,"    \n"],[0,"    # ht"]],"start1":6743,"start2":6743,"length1":16,"length2":21}]],"length":27351,"saved":false}
{"ts":1375383890909,"patch":[[{"diffs":[[0,"Country\n    "],[1,"# "],[0,"\n    # http:"]],"start1":6743,"start2":6743,"length1":24,"length2":26}]],"length":27353,"saved":false}
{"ts":1375383897685,"patch":[[{"diffs":[[0,"y\n    # "],[1,"http://hg.tryton.org/modules/country/file/tip/country.py#l52"],[0,"\n    # h"]],"start1":6749,"start2":6749,"length1":16,"length2":76}]],"length":27413,"saved":false}
