class BuyerAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code = models.CharField(max_length=255L, blank=True)
    street_address = models.CharField(max_length=255L, blank=True)
    street_address2 = models.CharField(max_length=255L, blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    default_shipping = models.IntegerField(null=True, blank=True)
    default_billing = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_address'

class BuyerCollection(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    notify = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_collection'

class BuyerCollectionProductCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_product_category'

class BuyerCollectionStore(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    store_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_store'

class Catalog(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    publish = models.DateTimeField(null=True, blank=True)
    discontinue = models.DateTimeField(null=True, blank=True)
    catalog_cover_id = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'catalog'

class CatalogImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_image'

class CatalogPricetag(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    catalog_product_template_id = models.IntegerField()
    catalog_image_id = models.IntegerField()
    src_width = models.FloatField()
    src_height = models.FloatField()
    src_top = models.FloatField()
    src_left = models.FloatField()
    class Meta:
        db_table = 'catalog_pricetag'

class CatalogProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    class Meta:
        db_table = 'catalog_product_content'

class CatalogProductImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField(null=True, blank=True)
    catalog_product_product_id = models.IntegerField(null=True, blank=True)
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_image'

class CatalogProductProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    variants = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    unit_price_margin = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    unit_price_extra = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_product'

class CatalogProductProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    catalog_product_content_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_content'

class CatalogProductProductMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_product_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_measurements'

class CatalogProductProductProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_variant_value_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_product_variant_value'

class CatalogProductTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    product_category_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_template'

class CatalogProductTemplateMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_measurements'

class CatalogProductTemplateProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_product_variant_type'

class CatalogProductVariantOption(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_varinat_type_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_option'

class CatalogProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    allow_custom_value = models.IntegerField(null=True, blank=True)
    mandatory_variant_type = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_variant_type'

class CatalogProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    catalog_product_varinat_option_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_value'

class CatalogStoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_store_content'

class CatalogStoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'catalog_store_shipping_exclusion'

class Content(models.Model):
    id = models.IntegerField(primary_key=True)
    category = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    published = models.IntegerField(null=True, blank=True)
    content_revision_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'content'

class ContentRevision(models.Model):
    id = models.IntegerField(primary_key=True)
    content_id = models.IntegerField()
    content = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'content_revision'

class Currency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    symbol = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    numeric_code = models.CharField(max_length=255L, blank=True)
    rounding = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    digits = models.IntegerField()
    active = models.IntegerField(null=True, blank=True)
    grouping = models.CharField(max_length=255L, blank=True)
    decimal_separator = models.CharField(max_length=255L, blank=True)
    thousands_separator = models.CharField(max_length=255L, blank=True)
    positive_sign_position = models.IntegerField()
    negative_sign_position = models.IntegerField()
    positive_sign = models.CharField(max_length=255L, blank=True)
    negative_sign = models.CharField(max_length=255L, blank=True)
    positive_cs_precedes = models.IntegerField(null=True, blank=True)
    negative_cs_precedes = models.IntegerField(null=True, blank=True)
    positive_sep_by_space = models.IntegerField(null=True, blank=True)
    negative_sep_by_space = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'currency'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40L, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = 'django_session'

class Feedback(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'feedback'

class Image(models.Model):
    id = models.IntegerField(primary_key=True)
    blobstore_key = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    content_type = models.CharField(max_length=255L, blank=True)
    size = models.FloatField()
    extension = models.CharField(max_length=255L, blank=True)
    width = models.IntegerField()
    height = models.IntegerField()
    class Meta:
        db_table = 'image'

class LocationCountry(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'location_country'

class LocationSubdivision(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_id = models.IntegerField()
    location_country_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'location_subdivision'

class Notify(models.Model):
    id = models.BigIntegerField(primary_key=True)
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    message = models.TextField(blank=True)
    class Meta:
        db_table = 'notify'

class NotifyRecipient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_id = models.BigIntegerField()
    user_id = models.IntegerField()
    class Meta:
        db_table = 'notify_recipient'

class NotifyRecipientOutlet(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_recipient_id = models.BigIntegerField()
    outlet = models.IntegerField()
    notified = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'notify_recipient_outlet'

class ObjectLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    object_id = models.IntegerField()
    object_type = models.IntegerField()
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    event = models.IntegerField()
    state = models.IntegerField()
    message = models.TextField(blank=True)
    note = models.TextField(blank=True)
    log = models.TextField(blank=True)
    class Meta:
        db_table = 'object_log'

class Order(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    order_date = models.DateTimeField(null=True, blank=True)
    company_address_id = models.IntegerField()
    invoice_address_id = models.IntegerField()
    shipping_address_id = models.IntegerField()
    currency_id = models.IntegerField()
    untaxed_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    total_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    comment = models.TextField(blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'order'

class OrderAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    location_country = models.TextField(blank=True)
    location_country_code = models.TextField(blank=True)
    location_region = models.TextField(blank=True)
    location_city = models.TextField(blank=True)
    location_postal_code = models.TextField(blank=True)
    location_street_address = models.TextField(blank=True)
    location_street_address2 = models.TextField(blank=True)
    name = models.TextField(blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'order_address'

class OrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    description = models.TextField(blank=True)
    quantity = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    discount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'order_line'

class OrderLineProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    product_category_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    openerp_sale_order_line_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_product'

class OrderLineTax(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'order_line_tax'

class OrderLineTax2(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    order_line_tax_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_tax2'

class PaypalTransaction(models.Model):
    id = models.IntegerField(primary_key=True)
    txn_id = models.CharField(max_length=255L, blank=True)
    order_id = models.IntegerField()
    ipn_message = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'paypal_transaction'

class Role(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    readonly = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'role'

class Store(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    logo_id = models.IntegerField()
    fingerprint = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'store'

class StoreBuyerOrderFeedback(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    store_name = models.CharField(max_length=255L, blank=True)
    user_id = models.IntegerField()
    order_id = models.IntegerField()
    state = models.IntegerField()
    class Meta:
        db_table = 'store_buyer_order_feedback'

class StoreCarrier(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier'

class StoreCarrierLine(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier_line'

class StoreCarrierLineLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_carrier_line_location'

class StoreCarrierLinePricelist(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    condition_type = models.IntegerField()
    condition_operator = models.IntegerField()
    condition_value = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    price_type = models.IntegerField()
    price_type_factor = models.IntegerField()
    list_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'store_carrier_line_pricelist'

class StoreConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'store_config'

class StoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'store_content'

class StorePermission(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    role_id = models.IntegerField()
    permission = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_permission'

class StoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_shipping_exclusion'

class StoreTax(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_tax'

class StoreTaxApplication(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    application = models.IntegerField(null=True, blank=True)
    store_carrier_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'store_tax_application'

class StoreTaxLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_tax_location'

class Support(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'support'

class User(models.Model):
    id = models.IntegerField(primary_key=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'user'

class UserConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'user_config'

class UserEmail(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    email = models.CharField(max_length=255L, blank=True)
    primary = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_email'

class UserIdentity(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    identity = models.CharField(max_length=255L, blank=True)
    user_email_id = models.IntegerField(null=True, blank=True)
    provider = models.CharField(max_length=255L, blank=True)
    associated = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_identity'

class UserIpAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    ip_address = models.CharField(max_length=255L, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'user_ip_address'

class UserRole(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    role_id = models.IntegerField()
    class Meta:
        db_table = 'user_role'

WARNING  2013-07-12 21:00:56,145 hashcompat.py:9] /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/utils/hashcompat.py:9: DeprecationWarning: django.utils.hashcompat is deprecated; use hashlib instead
  DeprecationWarning)

ERROR    2013-07-12 21:00:56,154 wsgi.py:235] 
Traceback (most recent call last):
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/runtime/wsgi.py", line 223, in Handle
    result = handler(dict(self._environ), self._StartResponse)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/wsgi.py", line 255, in __call__
    response = self.get_response(request)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 178, in get_response
    response = self.handle_uncaught_exception(request, resolver, sys.exc_info())
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 220, in handle_uncaught_exception
    if resolver.urlconf_module is None:
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/urlresolvers.py", line 342, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/utils/importlib.py", line 35, in import_module
    __import__(name)
  File "/Users/admin/Dev/py/miraclestyle2/app/urls.py", line 25, in <module>
    if len(settings.INSTALLED_APP):
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/conf/__init__.py", line 53, in __getattr__
    return getattr(self._wrapped, name)
AttributeError: 'Settings' object has no attribute 'INSTALLED_APP'
INFO     2013-07-12 21:00:56,184 server.py:593] default: "GET /favicon.ico HTTP/1.1" 500 -
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class Billing(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    reference = models.IntegerField()
    reference_type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    balance = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'billing'

class BillingCreditAdjustment(models.Model):
    id = models.IntegerField(primary_key=True)
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    message = models.TextField(blank=True)
    note = models.TextField(blank=True)
    class Meta:
        db_table = 'billing_credit_adjustment'

class BuyerAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code = models.CharField(max_length=255L, blank=True)
    street_address = models.CharField(max_length=255L, blank=True)
    street_address2 = models.CharField(max_length=255L, blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    default_shipping = models.IntegerField(null=True, blank=True)
    default_billing = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_address'

class BuyerCollection(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    notify = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_collection'

class BuyerCollectionProductCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_product_category'

class BuyerCollectionStore(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    store_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_store'

class Catalog(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    publish = models.DateTimeField(null=True, blank=True)
    discontinue = models.DateTimeField(null=True, blank=True)
    catalog_cover_id = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'catalog'

class CatalogImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_image'

class CatalogPricetag(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    catalog_product_template_id = models.IntegerField()
    catalog_image_id = models.IntegerField()
    src_width = models.FloatField()
    src_height = models.FloatField()
    src_top = models.FloatField()
    src_left = models.FloatField()
    class Meta:
        db_table = 'catalog_pricetag'

class CatalogProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    class Meta:
        db_table = 'catalog_product_content'

class CatalogProductImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField(null=True, blank=True)
    catalog_product_product_id = models.IntegerField(null=True, blank=True)
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_image'

class CatalogProductProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    variants = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    unit_price_margin = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    unit_price_extra = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_product'

class CatalogProductProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    catalog_product_content_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_content'

class CatalogProductProductMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_product_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_measurements'

class CatalogProductProductProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_variant_value_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_product_variant_value'

class CatalogProductTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    product_category_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_template'

class CatalogProductTemplateMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_measurements'

class CatalogProductTemplateProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_product_variant_type'

class CatalogProductVariantOption(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_varinat_type_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_option'

class CatalogProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    allow_custom_value = models.IntegerField(null=True, blank=True)
    mandatory_variant_type = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_variant_type'

class CatalogProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    catalog_product_varinat_option_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_value'

class CatalogStoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_store_content'

class CatalogStoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'catalog_store_shipping_exclusion'

class Content(models.Model):
    id = models.IntegerField(primary_key=True)
    category = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    published = models.IntegerField(null=True, blank=True)
    content_revision_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'content'

class ContentRevision(models.Model):
    id = models.IntegerField(primary_key=True)
    content_id = models.IntegerField()
    content = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'content_revision'

class Currency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    symbol = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    numeric_code = models.CharField(max_length=255L, blank=True)
    rounding = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    digits = models.IntegerField()
    active = models.IntegerField(null=True, blank=True)
    grouping = models.CharField(max_length=255L, blank=True)
    decimal_separator = models.CharField(max_length=255L, blank=True)
    thousands_separator = models.CharField(max_length=255L, blank=True)
    positive_sign_position = models.IntegerField()
    negative_sign_position = models.IntegerField()
    positive_sign = models.CharField(max_length=255L, blank=True)
    negative_sign = models.CharField(max_length=255L, blank=True)
    positive_cs_precedes = models.IntegerField(null=True, blank=True)
    negative_cs_precedes = models.IntegerField(null=True, blank=True)
    positive_sep_by_space = models.IntegerField(null=True, blank=True)
    negative_sep_by_space = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'currency'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40L, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = 'django_session'

class Feedback(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'feedback'

class Image(models.Model):
    id = models.IntegerField(primary_key=True)
    blobstore_key = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    content_type = models.CharField(max_length=255L, blank=True)
    size = models.FloatField()
    extension = models.CharField(max_length=255L, blank=True)
    width = models.IntegerField()
    height = models.IntegerField()
    class Meta:
        db_table = 'image'

class LocationCountry(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'location_country'

class LocationSubdivision(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_id = models.IntegerField()
    location_country_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'location_subdivision'

class Notify(models.Model):
    id = models.BigIntegerField(primary_key=True)
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    message = models.TextField(blank=True)
    class Meta:
        db_table = 'notify'

class NotifyRecipient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_id = models.BigIntegerField()
    user_id = models.IntegerField()
    class Meta:
        db_table = 'notify_recipient'

class NotifyRecipientOutlet(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_recipient_id = models.BigIntegerField()
    outlet = models.IntegerField()
    notified = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'notify_recipient_outlet'

class ObjectLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    object_id = models.IntegerField()
    object_type = models.IntegerField()
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    event = models.IntegerField()
    state = models.IntegerField()
    message = models.TextField(blank=True)
    note = models.TextField(blank=True)
    log = models.TextField(blank=True)
    class Meta:
        db_table = 'object_log'

class Order(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    order_date = models.DateTimeField(null=True, blank=True)
    company_address_id = models.IntegerField()
    invoice_address_id = models.IntegerField()
    shipping_address_id = models.IntegerField()
    currency_id = models.IntegerField()
    untaxed_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    total_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    comment = models.TextField(blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'order'

class OrderAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    location_country = models.TextField(blank=True)
    location_country_code = models.TextField(blank=True)
    location_region = models.TextField(blank=True)
    location_city = models.TextField(blank=True)
    location_postal_code = models.TextField(blank=True)
    location_street_address = models.TextField(blank=True)
    location_street_address2 = models.TextField(blank=True)
    name = models.TextField(blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'order_address'

class OrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    description = models.TextField(blank=True)
    quantity = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    discount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'order_line'

class OrderLineProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    product_category_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    openerp_sale_order_line_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_product'

class OrderLineTax(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'order_line_tax'

class OrderLineTax2(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    order_line_tax_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_tax2'

class PaypalTransaction(models.Model):
    id = models.IntegerField(primary_key=True)
    txn_id = models.CharField(max_length=255L, blank=True)
    order_id = models.IntegerField()
    ipn_message = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'paypal_transaction'

class Role(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    readonly = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'role'

class Store(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    logo_id = models.IntegerField()
    fingerprint = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'store'

class StoreBuyerOrderFeedback(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    store_name = models.CharField(max_length=255L, blank=True)
    user_id = models.IntegerField()
    order_id = models.IntegerField()
    state = models.IntegerField()
    class Meta:
        db_table = 'store_buyer_order_feedback'

class StoreCarrier(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier'

class StoreCarrierLine(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier_line'

class StoreCarrierLineLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_carrier_line_location'

class StoreCarrierLinePricelist(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    condition_type = models.IntegerField()
    condition_operator = models.IntegerField()
    condition_value = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    price_type = models.IntegerField()
    price_type_factor = models.IntegerField()
    list_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'store_carrier_line_pricelist'

class StoreConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'store_config'

class StoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'store_content'

class StorePermission(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    role_id = models.IntegerField()
    permission = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_permission'

class StoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_shipping_exclusion'

class StoreTax(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_tax'

class StoreTaxApplication(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    application = models.IntegerField(null=True, blank=True)
    store_carrier_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'store_tax_application'

class StoreTaxLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_tax_location'

class Support(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'support'

class User(models.Model):
    id = models.IntegerField(primary_key=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'user'

class UserConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'user_config'

class UserEmail(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    email = models.CharField(max_length=255L, blank=True)
    primary = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_email'

class UserIdentity(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    identity = models.CharField(max_length=255L, blank=True)
    user_email_id = models.IntegerField(null=True, blank=True)
    provider = models.CharField(max_length=255L, blank=True)
    associated = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_identity'

class UserIpAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    ip_address = models.CharField(max_length=255L, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'user_ip_address'

class UserRole(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    role_id = models.IntegerField()
    class Meta:
        db_table = 'user_role'

WARNING  2013-07-12 21:01:20,291 hashcompat.py:9] /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/utils/hashcompat.py:9: DeprecationWarning: django.utils.hashcompat is deprecated; use hashlib instead
  DeprecationWarning)

ERROR    2013-07-12 21:01:20,300 wsgi.py:235] 
Traceback (most recent call last):
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/runtime/wsgi.py", line 223, in Handle
    result = handler(dict(self._environ), self._StartResponse)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/wsgi.py", line 255, in __call__
    response = self.get_response(request)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 178, in get_response
    response = self.handle_uncaught_exception(request, resolver, sys.exc_info())
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 220, in handle_uncaught_exception
    if resolver.urlconf_module is None:
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/urlresolvers.py", line 342, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/utils/importlib.py", line 35, in import_module
    __import__(name)
  File "/Users/admin/Dev/py/miraclestyle2/app/urls.py", line 29, in <module>
    patts = getattr(module, 'urlpatterns')
AttributeError: 'module' object has no attribute 'urlpatterns'
INFO     2013-07-12 21:01:20,321 server.py:593] default: "GET / HTTP/1.1" 500 -
ERROR    2013-07-12 21:01:20,490 wsgi.py:235] 
Traceback (most recent call last):
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/runtime/wsgi.py", line 223, in Handle
    result = handler(dict(self._environ), self._StartResponse)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/wsgi.py", line 255, in __call__
    response = self.get_response(request)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 178, in get_response
    response = self.handle_uncaught_exception(request, resolver, sys.exc_info())
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/handlers/base.py", line 220, in handle_uncaught_exception
    if resolver.urlconf_module is None:
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/core/urlresolvers.py", line 342, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/django-1.5/django/utils/importlib.py", line 35, in import_module
    __import__(name)
  File "/Users/admin/Dev/py/miraclestyle2/app/urls.py", line 29, in <module>
    patts = getattr(module, 'urlpatterns')
AttributeError: 'module' object has no attribute 'urlpatterns'
INFO     2013-07-12 21:01:20,502 server.py:593] default: "GET /favicon.ico HTTP/1.1" 500 -
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class Billing(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    reference = models.IntegerField()
    reference_type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    balance = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'billing'

class BillingCreditAdjustment(models.Model):
    id = models.IntegerField(primary_key=True)
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    message = models.TextField(blank=True)
    note = models.TextField(blank=True)
    class Meta:
        db_table = 'billing_credit_adjustment'

class BuyerAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code = models.CharField(max_length=255L, blank=True)
    street_address = models.CharField(max_length=255L, blank=True)
    street_address2 = models.CharField(max_length=255L, blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    default_shipping = models.IntegerField(null=True, blank=True)
    default_billing = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_address'

class BuyerCollection(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    notify = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'buyer_collection'

class BuyerCollectionProductCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_product_category'

class BuyerCollectionStore(models.Model):
    id = models.IntegerField(primary_key=True)
    buyer_collection_id = models.IntegerField()
    store_id = models.IntegerField()
    class Meta:
        db_table = 'buyer_collection_store'

class Catalog(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    publish = models.DateTimeField(null=True, blank=True)
    discontinue = models.DateTimeField(null=True, blank=True)
    catalog_cover_id = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'catalog'

class CatalogImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_image'

class CatalogPricetag(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    catalog_product_template_id = models.IntegerField()
    catalog_image_id = models.IntegerField()
    src_width = models.FloatField()
    src_height = models.FloatField()
    src_top = models.FloatField()
    src_left = models.FloatField()
    class Meta:
        db_table = 'catalog_pricetag'

class CatalogProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    class Meta:
        db_table = 'catalog_product_content'

class CatalogProductImage(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField(null=True, blank=True)
    catalog_product_product_id = models.IntegerField(null=True, blank=True)
    image_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_image'

class CatalogProductProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    variants = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    unit_price_margin = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    unit_price_extra = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_product'

class CatalogProductProductContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    catalog_product_content_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_content'

class CatalogProductProductMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_product_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_measurements'

class CatalogProductProductProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_variant_value_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_product_product_variant_value'

class CatalogProductTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    product_category_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_template'

class CatalogProductTemplateMeasurements(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    weight = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    weight_uom_id = models.IntegerField()
    volume = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    volume_uom_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_measurements'

class CatalogProductTemplateProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_template_product_variant_type'

class CatalogProductVariantOption(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_varinat_type_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_option'

class CatalogProductVariantType(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    description = models.TextField(blank=True)
    allow_custom_value = models.IntegerField(null=True, blank=True)
    mandatory_variant_type = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'catalog_product_variant_type'

class CatalogProductVariantValue(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_product_template_id = models.IntegerField()
    catalog_product_varinat_type_id = models.IntegerField()
    catalog_product_varinat_option_id = models.IntegerField()
    class Meta:
        db_table = 'catalog_product_variant_value'

class CatalogStoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'catalog_store_content'

class CatalogStoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    catalog_id = models.IntegerField()
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'catalog_store_shipping_exclusion'

class Content(models.Model):
    id = models.IntegerField(primary_key=True)
    category = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    published = models.IntegerField(null=True, blank=True)
    content_revision_id = models.IntegerField()
    sequence = models.IntegerField()
    class Meta:
        db_table = 'content'

class ContentRevision(models.Model):
    id = models.IntegerField(primary_key=True)
    content_id = models.IntegerField()
    content = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'content_revision'

class Currency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    symbol = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    numeric_code = models.CharField(max_length=255L, blank=True)
    rounding = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    digits = models.IntegerField()
    active = models.IntegerField(null=True, blank=True)
    grouping = models.CharField(max_length=255L, blank=True)
    decimal_separator = models.CharField(max_length=255L, blank=True)
    thousands_separator = models.CharField(max_length=255L, blank=True)
    positive_sign_position = models.IntegerField()
    negative_sign_position = models.IntegerField()
    positive_sign = models.CharField(max_length=255L, blank=True)
    negative_sign = models.CharField(max_length=255L, blank=True)
    positive_cs_precedes = models.IntegerField(null=True, blank=True)
    negative_cs_precedes = models.IntegerField(null=True, blank=True)
    positive_sep_by_space = models.IntegerField(null=True, blank=True)
    negative_sep_by_space = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'currency'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40L, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = 'django_session'

class Feedback(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'feedback'

class Image(models.Model):
    id = models.IntegerField(primary_key=True)
    blobstore_key = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    content_type = models.CharField(max_length=255L, blank=True)
    size = models.FloatField()
    extension = models.CharField(max_length=255L, blank=True)
    width = models.IntegerField()
    height = models.IntegerField()
    class Meta:
        db_table = 'image'

class LocationCountry(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=255L, blank=True)
    name = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'location_country'

class LocationSubdivision(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_id = models.IntegerField()
    location_country_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    code = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'location_subdivision'

class Notify(models.Model):
    id = models.BigIntegerField(primary_key=True)
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    message = models.TextField(blank=True)
    class Meta:
        db_table = 'notify'

class NotifyRecipient(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_id = models.BigIntegerField()
    user_id = models.IntegerField()
    class Meta:
        db_table = 'notify_recipient'

class NotifyRecipientOutlet(models.Model):
    id = models.BigIntegerField(primary_key=True)
    notify_recipient_id = models.BigIntegerField()
    outlet = models.IntegerField()
    notified = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'notify_recipient_outlet'

class ObjectLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    object_id = models.IntegerField()
    object_type = models.IntegerField()
    user_id = models.IntegerField()
    date = models.DateTimeField(null=True, blank=True)
    event = models.IntegerField()
    state = models.IntegerField()
    message = models.TextField(blank=True)
    note = models.TextField(blank=True)
    log = models.TextField(blank=True)
    class Meta:
        db_table = 'object_log'

class Order(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    order_date = models.DateTimeField(null=True, blank=True)
    company_address_id = models.IntegerField()
    invoice_address_id = models.IntegerField()
    shipping_address_id = models.IntegerField()
    currency_id = models.IntegerField()
    untaxed_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    total_amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    comment = models.TextField(blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'order'

class OrderAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    location_country = models.TextField(blank=True)
    location_country_code = models.TextField(blank=True)
    location_region = models.TextField(blank=True)
    location_city = models.TextField(blank=True)
    location_postal_code = models.TextField(blank=True)
    location_street_address = models.TextField(blank=True)
    location_street_address2 = models.TextField(blank=True)
    name = models.TextField(blank=True)
    email = models.CharField(max_length=255L, blank=True)
    telephone = models.CharField(max_length=255L, blank=True)
    type = models.IntegerField()
    class Meta:
        db_table = 'order_address'

class OrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    order_id = models.IntegerField()
    description = models.TextField(blank=True)
    quantity = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    product_uom_id = models.IntegerField()
    unit_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    discount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'order_line'

class OrderLineProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    product_category_id = models.IntegerField()
    catalog_product_product_id = models.IntegerField()
    openerp_sale_order_line_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_product'

class OrderLineTax(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'order_line_tax'

class OrderLineTax2(models.Model):
    id = models.IntegerField(primary_key=True)
    order_line_id = models.IntegerField()
    order_line_tax_id = models.IntegerField()
    class Meta:
        db_table = 'order_line_tax2'

class PaypalTransaction(models.Model):
    id = models.IntegerField(primary_key=True)
    txn_id = models.CharField(max_length=255L, blank=True)
    order_id = models.IntegerField()
    ipn_message = models.TextField(blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'paypal_transaction'

class Role(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    readonly = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'role'

class Store(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255L, blank=True)
    logo_id = models.IntegerField()
    fingerprint = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'store'

class StoreBuyerOrderFeedback(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    store_name = models.CharField(max_length=255L, blank=True)
    user_id = models.IntegerField()
    order_id = models.IntegerField()
    state = models.IntegerField()
    class Meta:
        db_table = 'store_buyer_order_feedback'

class StoreCarrier(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier'

class StoreCarrierLine(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_carrier_line'

class StoreCarrierLineLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_carrier_line_location'

class StoreCarrierLinePricelist(models.Model):
    id = models.IntegerField(primary_key=True)
    store_carrier_line_id = models.IntegerField()
    condition_type = models.IntegerField()
    condition_operator = models.IntegerField()
    condition_value = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    price_type = models.IntegerField()
    price_type_factor = models.IntegerField()
    list_price = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    class Meta:
        db_table = 'store_carrier_line_pricelist'

class StoreConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'store_config'

class StoreContent(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    title = models.CharField(max_length=255L, blank=True)
    content = models.TextField(blank=True)
    sequence = models.IntegerField()
    class Meta:
        db_table = 'store_content'

class StorePermission(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    role_id = models.IntegerField()
    permission = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_permission'

class StoreShippingExclusion(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_shipping_exclusion'

class StoreTax(models.Model):
    id = models.IntegerField(primary_key=True)
    store_id = models.IntegerField()
    name = models.CharField(max_length=255L, blank=True)
    sequence = models.IntegerField()
    type = models.IntegerField()
    amount = models.DecimalField(null=True, max_digits=18, decimal_places=2, blank=True)
    location_exclusion = models.IntegerField(null=True, blank=True)
    active = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'store_tax'

class StoreTaxApplication(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    application = models.IntegerField(null=True, blank=True)
    store_carrier_id = models.IntegerField()
    product_category_id = models.IntegerField()
    class Meta:
        db_table = 'store_tax_application'

class StoreTaxLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    store_tax_id = models.IntegerField()
    location_country_id = models.IntegerField()
    location_region = models.IntegerField()
    location_city = models.IntegerField()
    location_postal_code_from = models.CharField(max_length=255L, blank=True)
    location_postal_code_to = models.CharField(max_length=255L, blank=True)
    class Meta:
        db_table = 'store_tax_location'

class Support(models.Model):
    id = models.IntegerField(primary_key=True)
    reference = models.CharField(max_length=255L, blank=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'support'

class User(models.Model):
    id = models.IntegerField(primary_key=True)
    state = models.IntegerField()
    class Meta:
        db_table = 'user'

class UserConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    key = models.CharField(max_length=255L, blank=True)
    data = models.TextField(blank=True)
    class Meta:
        db_table = 'user_config'

class UserEmail(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    email = models.CharField(max_length=255L, blank=True)
    primary = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_email'

class UserIdentity(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    identity = models.CharField(max_length=255L, blank=True)
    user_email_id = models.IntegerField(null=True, blank=True)
    provider = models.CharField(max_length=255L, blank=True)
    associated = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'user_identity'

class UserIpAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    ip_address = models.CharField(max_length=255L, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = 'user_ip_address'

class UserRole(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    role_id = models.IntegerField()
    class Meta:
        db_table = 'user_role'
 